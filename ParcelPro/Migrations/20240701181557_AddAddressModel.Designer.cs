// <auto-generated />
using System;
using ParcelPro.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ParcelPro.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240701181557_AddAddressModel")]
    partial class AddAddressModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppIdentityUserAppRole", b =>
                {
                    b.Property<string>("RolesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("AppIdentityUserAppRole");
                });

            modelBuilder.Entity("Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "1",
                            Name = "دلار آمریکا"
                        },
                        new
                        {
                            Id = 2,
                            Code = "2",
                            Name = "یورو"
                        },
                        new
                        {
                            Id = 3,
                            Code = "3",
                            Name = "درهم امارات"
                        },
                        new
                        {
                            Id = 4,
                            Code = "4",
                            Name = "ریال عمان"
                        },
                        new
                        {
                            Id = 5,
                            Code = "5",
                            Name = "دینار کویت"
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("ArchiveCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Bed")
                        .HasColumnType("bigint");

                    b.Property<long>("Bes")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DocId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EditorUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("KolId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MoeinId")
                        .HasColumnType("int");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int");

                    b.Property<int>("RowNumber")
                        .HasColumnType("int");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Tafsil4Id")
                        .HasColumnType("int");

                    b.Property<string>("Tafsil4Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Tafsil5Id")
                        .HasColumnType("int");

                    b.Property<string>("Tafsil5Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Tafsil6Id")
                        .HasColumnType("int");

                    b.Property<string>("Tafsil6Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Tafsil7Id")
                        .HasColumnType("int");

                    b.Property<string>("Tafsil7Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Tafsil8Id")
                        .HasColumnType("int");

                    b.Property<string>("Tafsil8Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocId");

                    b.HasIndex("MoeinId");

                    b.ToTable("Acc_Articles");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Group", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("bit");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<short>("TypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Acc_Coding_Groups");

                    b.HasData(
                        new
                        {
                            Id = (short)10,
                            Description = "",
                            GroupCode = "0",
                            GroupName = "تراز افتتاحیه و اختتامیه",
                            IsEditable = false,
                            TypeId = (short)3
                        },
                        new
                        {
                            Id = (short)1,
                            Description = "",
                            GroupCode = "1",
                            GroupName = "دارایی های غیرجاری",
                            IsEditable = false,
                            TypeId = (short)1
                        },
                        new
                        {
                            Id = (short)2,
                            Description = "",
                            GroupCode = "2",
                            GroupName = "دارایی های جاری",
                            IsEditable = false,
                            TypeId = (short)1
                        },
                        new
                        {
                            Id = (short)3,
                            Description = "",
                            GroupCode = "3",
                            GroupName = "حقوق مالکانه",
                            IsEditable = false,
                            TypeId = (short)1
                        },
                        new
                        {
                            Id = (short)4,
                            Description = "",
                            GroupCode = "4",
                            GroupName = "بدهی های غیرجاری",
                            IsEditable = false,
                            TypeId = (short)1
                        },
                        new
                        {
                            Id = (short)5,
                            Description = "",
                            GroupCode = "5",
                            GroupName = "بدهی های جاری",
                            IsEditable = false,
                            TypeId = (short)1
                        },
                        new
                        {
                            Id = (short)6,
                            Description = "",
                            GroupCode = "6",
                            GroupName = "فروش و درآمدها",
                            IsEditable = false,
                            TypeId = (short)2
                        },
                        new
                        {
                            Id = (short)7,
                            Description = "",
                            GroupCode = "7",
                            GroupName = "هزینه ها",
                            IsEditable = false,
                            TypeId = (short)2
                        },
                        new
                        {
                            Id = (short)8,
                            Description = "",
                            GroupCode = "8",
                            GroupName = "بهای تمام شده",
                            IsEditable = false,
                            TypeId = (short)2
                        },
                        new
                        {
                            Id = (short)9,
                            Description = "",
                            GroupCode = "9",
                            GroupName = "حسابهای انتظامی",
                            IsEditable = false,
                            TypeId = (short)3
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Kol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("GroupId")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("bit");

                    b.Property<string>("KolCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Nature")
                        .HasColumnType("smallint");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<short>("TypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Acc_Coding_Kols");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Moein", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCurrencyAccount")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("bit");

                    b.Property<int>("KolId")
                        .HasColumnType("int");

                    b.Property<string>("MoeinCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MoeinContraryNatureId")
                        .HasColumnType("int");

                    b.Property<string>("MoeinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Nature")
                        .HasColumnType("smallint");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Tafsil4_GroupIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tafsil5_GroupIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tafsil6_GroupIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tafsil7_GroupIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tafsil8_GroupIds")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KolId");

                    b.ToTable("Acc_Coding_Moeins");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Tafsil", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupsId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPerson")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Acc_Coding_Tafsils");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_TafsilGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPerson")
                        .HasColumnType("bit");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Acc_Coding_TafsilGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "مشتریان، تأمین کنندگان، کارمندان، شرکت های طرف قرارداد و ...",
                            GroupName = "اشخاص و شرکت ها",
                            IsEditable = false,
                            IsPerson = true
                        },
                        new
                        {
                            Id = 2,
                            GroupName = "بانک ها",
                            IsEditable = false,
                            IsPerson = false
                        },
                        new
                        {
                            Id = 3,
                            GroupName = "صندوق ها",
                            IsEditable = false,
                            IsPerson = false
                        },
                        new
                        {
                            Id = 4,
                            GroupName = "حساب های بانکی",
                            IsEditable = false,
                            IsPerson = false
                        },
                        new
                        {
                            Id = 5,
                            GroupName = "شعب",
                            IsEditable = false,
                            IsPerson = false
                        },
                        new
                        {
                            Id = 6,
                            GroupName = "نمایندگی ها",
                            IsEditable = false,
                            IsPerson = false
                        },
                        new
                        {
                            Id = 7,
                            GroupName = "مراکز هزینه",
                            IsEditable = false,
                            IsPerson = false
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_TafsilToGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<long>("TafsilId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("TafsilId");

                    b.ToTable("Acc_Coding_TafsilToGroups");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_CostCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("TafsilCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TafsilId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Acc_CostCenters");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_DocStatus", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Acc_DocStatuses");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Name = "یادداشت"
                        },
                        new
                        {
                            Id = (short)2,
                            Name = "ثبت موقت"
                        },
                        new
                        {
                            Id = (short)3,
                            Name = "ثبت دائم"
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_DocType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("DocTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Acc_DocTypes");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            DocTypeName = "سند روزانه"
                        },
                        new
                        {
                            Id = (short)2,
                            DocTypeName = "سند افتتاحیه"
                        },
                        new
                        {
                            Id = (short)3,
                            DocTypeName = "سند اختتامیه"
                        },
                        new
                        {
                            Id = (short)4,
                            DocTypeName = "سند بستن حسابهای موقت"
                        },
                        new
                        {
                            Id = (short)5,
                            DocTypeName = "سند بستن حسابهای دائم"
                        },
                        new
                        {
                            Id = (short)6,
                            DocTypeName = "سند طبقه بندی حسابها"
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AtfNumber")
                        .HasColumnType("int");

                    b.Property<int>("AutoDocNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DocDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocNumber")
                        .HasColumnType("int");

                    b.Property<string>("EditorUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<short>("StatusId")
                        .HasColumnType("smallint");

                    b.Property<int?>("SubsystemId")
                        .HasColumnType("int");

                    b.Property<long?>("SubsystemRef")
                        .HasColumnType("bigint");

                    b.Property<short>("TypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("PeriodId");

                    b.ToTable("Acc_Documents");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_FinancialPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("DefualtVatRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Acc_FinancialPeriods");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.kh_Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TafsilCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TafsilId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Banks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "بانک ملی ایران"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ملت"
                        },
                        new
                        {
                            Id = 3,
                            Name = "تجارت"
                        },
                        new
                        {
                            Id = 4,
                            Name = "صادرات ایران"
                        },
                        new
                        {
                            Id = 5,
                            Name = "سامان"
                        },
                        new
                        {
                            Id = 6,
                            Name = "سپه"
                        },
                        new
                        {
                            Id = 7,
                            Name = "پارسیان"
                        },
                        new
                        {
                            Id = 8,
                            Name = "پاسارگاد"
                        },
                        new
                        {
                            Id = 9,
                            Name = "مهر اقتصاد"
                        },
                        new
                        {
                            Id = 10,
                            Name = "رفاه کارگران"
                        },
                        new
                        {
                            Id = 11,
                            Name = "آینده"
                        },
                        new
                        {
                            Id = 12,
                            Name = "شهر"
                        },
                        new
                        {
                            Id = 13,
                            Name = "رسالت"
                        },
                        new
                        {
                            Id = 14,
                            Name = "سینا"
                        },
                        new
                        {
                            Id = 15,
                            Name = "ایران زمین"
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.kh_BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BankId")
                        .HasColumnType("int");

                    b.Property<string>("BranchCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SHABA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("TafsilCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TafsilId")
                        .HasColumnType("bigint");

                    b.Property<string>("cvvt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("AddressText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefaultForReceiver")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefaultForSender")
                        .HasColumnType("bit");

                    b.Property<string>("Landline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NeighborhoodId")
                        .HasColumnType("int");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressId");

                    b.HasIndex("BranchId");

                    b.HasIndex("NeighborhoodId");

                    b.HasIndex("PersonId");

                    b.ToTable("Cu_Addresses");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_AddressCity", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameFa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("Cu_AddressCities");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            Abbreviation = "TBZ",
                            NameEn = "Tabriz",
                            NameFa = "تبریز",
                            StateId = 1
                        },
                        new
                        {
                            CityId = 2,
                            Abbreviation = "OMH",
                            NameEn = "Urmia",
                            NameFa = "ارومیه",
                            StateId = 2
                        },
                        new
                        {
                            CityId = 3,
                            Abbreviation = "ADU",
                            NameEn = "Ardabil",
                            NameFa = "اردبیل",
                            StateId = 3
                        },
                        new
                        {
                            CityId = 4,
                            Abbreviation = "IFN",
                            NameEn = "Isfahan",
                            NameFa = "اصفهان",
                            StateId = 4
                        },
                        new
                        {
                            CityId = 5,
                            Abbreviation = "THR",
                            NameEn = "Karaj",
                            NameFa = "کرج",
                            StateId = 5
                        },
                        new
                        {
                            CityId = 6,
                            Abbreviation = "IIL",
                            NameEn = "Ilam",
                            NameFa = "ایلام",
                            StateId = 6
                        },
                        new
                        {
                            CityId = 7,
                            Abbreviation = "BUZ",
                            NameEn = "Bushehr",
                            NameFa = "بوشهر",
                            StateId = 7
                        },
                        new
                        {
                            CityId = 8,
                            Abbreviation = "THR",
                            NameEn = "Tehran",
                            NameFa = "تهران",
                            StateId = 8
                        },
                        new
                        {
                            CityId = 9,
                            Abbreviation = "CHK",
                            NameEn = "Shahr-e Kord",
                            NameFa = "شهرکرد",
                            StateId = 9
                        },
                        new
                        {
                            CityId = 10,
                            Abbreviation = "XBJ",
                            NameEn = "Birjand",
                            NameFa = "بیرجند",
                            StateId = 10
                        },
                        new
                        {
                            CityId = 11,
                            Abbreviation = "MHD",
                            NameEn = "Mashhad",
                            NameFa = "مشهد",
                            StateId = 11
                        },
                        new
                        {
                            CityId = 12,
                            Abbreviation = "BJR",
                            NameEn = "Bojnourd",
                            NameFa = "بجنورد",
                            StateId = 12
                        },
                        new
                        {
                            CityId = 13,
                            Abbreviation = "AWZ",
                            NameEn = "Ahvaz",
                            NameFa = "اهواز",
                            StateId = 13
                        },
                        new
                        {
                            CityId = 14,
                            Abbreviation = "JWN",
                            NameEn = "Zanjan",
                            NameFa = "زنجان",
                            StateId = 14
                        },
                        new
                        {
                            CityId = 15,
                            Abbreviation = "SMN",
                            NameEn = "Semnan",
                            NameFa = "سمنان",
                            StateId = 15
                        },
                        new
                        {
                            CityId = 16,
                            Abbreviation = "ZAH",
                            NameEn = "Zahedan",
                            NameFa = "زاهدان",
                            StateId = 16
                        },
                        new
                        {
                            CityId = 17,
                            Abbreviation = "SYZ",
                            NameEn = "Shiraz",
                            NameFa = "شیراز",
                            StateId = 17
                        },
                        new
                        {
                            CityId = 18,
                            Abbreviation = "GZW",
                            NameEn = "Qazvin",
                            NameFa = "قزوین",
                            StateId = 18
                        },
                        new
                        {
                            CityId = 19,
                            Abbreviation = "QOM",
                            NameEn = "Qom",
                            NameFa = "قم",
                            StateId = 19
                        },
                        new
                        {
                            CityId = 20,
                            Abbreviation = "SDG",
                            NameEn = "Sanandaj",
                            NameFa = "سنندج",
                            StateId = 20
                        },
                        new
                        {
                            CityId = 21,
                            Abbreviation = "KER",
                            NameEn = "Kerman",
                            NameFa = "کرمان",
                            StateId = 21
                        },
                        new
                        {
                            CityId = 22,
                            Abbreviation = "KSH",
                            NameEn = "Kermanshah",
                            NameFa = "کرمانشاه",
                            StateId = 22
                        },
                        new
                        {
                            CityId = 23,
                            Abbreviation = "YES",
                            NameEn = "Yasuj",
                            NameFa = "یاسوج",
                            StateId = 23
                        },
                        new
                        {
                            CityId = 24,
                            Abbreviation = "GBT",
                            NameEn = "Gorgan",
                            NameFa = "گرگان",
                            StateId = 24
                        },
                        new
                        {
                            CityId = 25,
                            Abbreviation = "RAS",
                            NameEn = "Rasht",
                            NameFa = "رشت",
                            StateId = 25
                        },
                        new
                        {
                            CityId = 26,
                            Abbreviation = "KHD",
                            NameEn = "Khorramabad",
                            NameFa = "خرم‌آباد",
                            StateId = 26
                        },
                        new
                        {
                            CityId = 27,
                            Abbreviation = "SRY",
                            NameEn = "Sari",
                            NameFa = "ساری",
                            StateId = 27
                        },
                        new
                        {
                            CityId = 28,
                            Abbreviation = "AJK",
                            NameEn = "Arak",
                            NameFa = "اراک",
                            StateId = 28
                        },
                        new
                        {
                            CityId = 29,
                            Abbreviation = "BND",
                            NameEn = "Bandar Abbas",
                            NameFa = "بندرعباس",
                            StateId = 29
                        },
                        new
                        {
                            CityId = 30,
                            Abbreviation = "HDM",
                            NameEn = "Hamadan",
                            NameFa = "همدان",
                            StateId = 30
                        },
                        new
                        {
                            CityId = 31,
                            Abbreviation = "AZD",
                            NameEn = "Yazd",
                            NameFa = "یزد",
                            StateId = 31
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_AddressCountry", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameFa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CountryId");

                    b.ToTable("Cu_AddressCountries");

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            Abbreviation = "IRIB",
                            NameEn = "Iran",
                            NameFa = "ایران"
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_AddressNeighborhood", b =>
                {
                    b.Property<int>("NeighborhoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NeighborhoodId"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<byte?>("DistrictNo")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsSuburbs")
                        .HasColumnType("bit");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameFa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("NeighborhoodId");

                    b.HasIndex("CityId");

                    b.ToTable("Cu_AddressNeighborhoods");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_AddressState", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateId"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameFa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.ToTable("Cu_AddressStates");

                    b.HasData(
                        new
                        {
                            StateId = 1,
                            CountryId = 1,
                            NameEn = "East Azerbaijan",
                            NameFa = "آذربایجان شرقی"
                        },
                        new
                        {
                            StateId = 2,
                            CountryId = 1,
                            NameEn = "West Azerbaijan",
                            NameFa = "آذربایجان غربی"
                        },
                        new
                        {
                            StateId = 3,
                            CountryId = 1,
                            NameEn = "Ardabil",
                            NameFa = "اردبیل"
                        },
                        new
                        {
                            StateId = 4,
                            CountryId = 1,
                            NameEn = "Isfahan",
                            NameFa = "اصفهان"
                        },
                        new
                        {
                            StateId = 5,
                            CountryId = 1,
                            NameEn = "Alborz",
                            NameFa = "البرز"
                        },
                        new
                        {
                            StateId = 6,
                            CountryId = 1,
                            NameEn = "Ilam",
                            NameFa = "ایلام"
                        },
                        new
                        {
                            StateId = 7,
                            CountryId = 1,
                            NameEn = "Bushehr",
                            NameFa = "بوشهر"
                        },
                        new
                        {
                            StateId = 8,
                            CountryId = 1,
                            NameEn = "Tehran",
                            NameFa = "تهران"
                        },
                        new
                        {
                            StateId = 9,
                            CountryId = 1,
                            NameEn = "Chaharmahal and Bakhtiari",
                            NameFa = "چهارمحال و بختیاری"
                        },
                        new
                        {
                            StateId = 10,
                            CountryId = 1,
                            NameEn = "South Khorasan",
                            NameFa = "خراسان جنوبی"
                        },
                        new
                        {
                            StateId = 11,
                            CountryId = 1,
                            NameEn = "Razavi Khorasan",
                            NameFa = "خراسان رضوی"
                        },
                        new
                        {
                            StateId = 12,
                            CountryId = 1,
                            NameEn = "North Khorasan",
                            NameFa = "خراسان شمالی"
                        },
                        new
                        {
                            StateId = 13,
                            CountryId = 1,
                            NameEn = "Khuzestan",
                            NameFa = "خوزستان"
                        },
                        new
                        {
                            StateId = 14,
                            CountryId = 1,
                            NameEn = "Zanjan",
                            NameFa = "زنجان"
                        },
                        new
                        {
                            StateId = 15,
                            CountryId = 1,
                            NameEn = "Semnan",
                            NameFa = "سمنان"
                        },
                        new
                        {
                            StateId = 16,
                            CountryId = 1,
                            NameEn = "Sistan and Baluchestan",
                            NameFa = "سیستان و بلوچستان"
                        },
                        new
                        {
                            StateId = 17,
                            CountryId = 1,
                            NameEn = "Fars",
                            NameFa = "فارس"
                        },
                        new
                        {
                            StateId = 18,
                            CountryId = 1,
                            NameEn = "Qazvin",
                            NameFa = "قزوین"
                        },
                        new
                        {
                            StateId = 19,
                            CountryId = 1,
                            NameEn = "Qom",
                            NameFa = "قم"
                        },
                        new
                        {
                            StateId = 20,
                            CountryId = 1,
                            NameEn = "Kurdistan",
                            NameFa = "کردستان"
                        },
                        new
                        {
                            StateId = 21,
                            CountryId = 1,
                            NameEn = "Kerman",
                            NameFa = "کرمان"
                        },
                        new
                        {
                            StateId = 22,
                            CountryId = 1,
                            NameEn = "Kermanshah",
                            NameFa = "کرمانشاه"
                        },
                        new
                        {
                            StateId = 23,
                            CountryId = 1,
                            NameEn = "Kohgiluyeh and Boyer-Ahmad",
                            NameFa = "کهگیلویه و بویراحمد"
                        },
                        new
                        {
                            StateId = 24,
                            CountryId = 1,
                            NameEn = "Golestan",
                            NameFa = "گلستان"
                        },
                        new
                        {
                            StateId = 25,
                            CountryId = 1,
                            NameEn = "Gilan",
                            NameFa = "گیلان"
                        },
                        new
                        {
                            StateId = 26,
                            CountryId = 1,
                            NameEn = "Lorestan",
                            NameFa = "لرستان"
                        },
                        new
                        {
                            StateId = 27,
                            CountryId = 1,
                            NameEn = "Mazandaran",
                            NameFa = "مازندران"
                        },
                        new
                        {
                            StateId = 28,
                            CountryId = 1,
                            NameEn = "Markazi",
                            NameFa = "مرکزی"
                        },
                        new
                        {
                            StateId = 29,
                            CountryId = 1,
                            NameEn = "Hormozgan",
                            NameFa = "هرمزگان"
                        },
                        new
                        {
                            StateId = 30,
                            CountryId = 1,
                            NameEn = "Hamadan",
                            NameFa = "همدان"
                        },
                        new
                        {
                            StateId = 31,
                            CountryId = 1,
                            NameEn = "Yazd",
                            NameFa = "یزد"
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cu_Branch");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_LogisticsFleetNeighborhood", b =>
                {
                    b.Property<int>("MyProperty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MyProperty"));

                    b.Property<int?>("Cu_AddressNeighborhoodNeighborhoodId")
                        .HasColumnType("int");

                    b.HasKey("MyProperty");

                    b.HasIndex("Cu_AddressNeighborhoodNeighborhoodId");

                    b.ToTable("Cu_LogisticsFleetNeighborhood");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_NeighborhoodBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Cu_AddressNeighborhoodNeighborhoodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Cu_AddressNeighborhoodNeighborhoodId");

                    b.ToTable("Cu_NeighborhoodBranch");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Route", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("Cu_AddressCityCityId")
                        .HasColumnType("int");

                    b.Property<int?>("Cu_AddressCityCityId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Cu_AddressCityCityId");

                    b.HasIndex("Cu_AddressCityCityId1");

                    b.ToTable("Cu_Route");
                });

            modelBuilder.Entity("ParcelPro.Models.AppSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpierDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoginMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LunchDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppName = "نرم افزار حسابداری گارنِت ",
                            CompanyName = "آوا اندیش رستـا",
                            LoginMessage = "آوای تکنولوژی، آواز موفقیت",
                            LogoUrl = "../../img/aar.png",
                            OwnerName = "سیامک آهی",
                            Version = "0.1"
                        });
                });

            modelBuilder.Entity("ParcelPro.Models.AppSubsystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_En")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_fa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppSubsystems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name_En = "Accounting",
                            Name_fa = "حسابداری"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name_En = "Buy",
                            Name_fa = "خرید"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Name_En = "Sale",
                            Name_fa = "فروش"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            Name_En = "Warehouse",
                            Name_fa = "انبار"
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            Name_En = "Khazane",
                            Name_fa = "خزانه داری"
                        },
                        new
                        {
                            Id = 6,
                            Description = "",
                            Name_En = "Asset",
                            Name_fa = "اموال"
                        },
                        new
                        {
                            Id = 7,
                            Description = "",
                            Name_En = "Contract",
                            Name_fa = "قراردادها"
                        },
                        new
                        {
                            Id = 8,
                            Description = "",
                            Name_En = "Hoghoogh",
                            Name_fa = "حقوق و دستمزد"
                        });
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActivationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("City")
                        .HasColumnType("int");

                    b.Property<string>("EconomicNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceCountLimit")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("Ishoghooghi")
                        .HasColumnType("bit");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LicenseCount")
                        .HasColumnType("int");

                    b.Property<string>("LogoAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("State")
                        .HasColumnType("int");

                    b.Property<string>("TafsilCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TafsilId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VersionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("licenseExpierDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.InvoiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InvoiceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = 1,
                            Name = "فروش"
                        },
                        new
                        {
                            Id = 2,
                            Code = 2,
                            Name = "اصلاحی"
                        },
                        new
                        {
                            Id = 3,
                            Code = 3,
                            Name = "ابطال"
                        },
                        new
                        {
                            Id = 4,
                            Code = 4,
                            Name = "برگشت از فروش"
                        },
                        new
                        {
                            Id = 5,
                            Code = 5,
                            Name = "خرید"
                        },
                        new
                        {
                            Id = 6,
                            Code = 6,
                            Name = "برگشت از خرید"
                        });
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.PartyRepresentative", b =>
                {
                    b.Property<long>("PartyId")
                        .HasColumnType("bigint");

                    b.Property<long>("RepresentativeId")
                        .HasColumnType("bigint");

                    b.HasKey("PartyId", "RepresentativeId");

                    b.HasIndex("RepresentativeId");

                    b.ToTable("PartyRepresentatives");
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.PartyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PartyTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "1",
                            Name = "حقیقی"
                        },
                        new
                        {
                            Id = 2,
                            Code = "2",
                            Name = "حقوقی"
                        },
                        new
                        {
                            Id = 3,
                            Code = "3",
                            Name = "مشارکت مدنی"
                        },
                        new
                        {
                            Id = 4,
                            Code = "4",
                            Name = "اتباع غیرایرانی"
                        },
                        new
                        {
                            Id = 5,
                            Code = "5",
                            Name = "مصرف کننده نهایی"
                        });
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.ProductOrServiceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("TafsilCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TafsilId")
                        .HasColumnType("bigint");

                    b.Property<int?>("customerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StuffCategories");
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.ProductOrServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("productOrServiceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "1",
                            Name = "عمومی"
                        },
                        new
                        {
                            Id = 2,
                            Code = "2",
                            Name = "قرارداد پیمانکاری"
                        },
                        new
                        {
                            Id = 3,
                            Code = "3",
                            Name = "طلا، جواهر و پلاتین"
                        },
                        new
                        {
                            Id = 4,
                            Code = "4",
                            Name = "قبوض خدماتی"
                        },
                        new
                        {
                            Id = 5,
                            Code = "5",
                            Name = "بلیط هواپیما"
                        });
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.SettlementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SettlementTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = 1,
                            Name = "نقد"
                        },
                        new
                        {
                            Id = 2,
                            Code = 2,
                            Name = "نسیه"
                        },
                        new
                        {
                            Id = 3,
                            Code = 3,
                            Name = "نقد/نسیه"
                        });
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.TaxPayerType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TaxPayerTypes");
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.UserSeller", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserSellers");
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.UserSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActiveFinancePeriodId")
                        .HasColumnType("int");

                    b.Property<long?>("ActiveSellerId")
                        .HasColumnType("bigint");

                    b.Property<bool>("AllowBuyerManagement")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowSaleManagement")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowSellerManagement")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowStuffManagement")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowUserManagement")
                        .HasColumnType("bit");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("ParcelPro.Models.Identity.AppIdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Gender")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastVisitDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ParcelPro.Models.Identity.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Invoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountingSystemId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Billid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("BuyerId")
                        .HasColumnType("bigint");

                    b.Property<string>("BuyerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Cdcd")
                        .HasColumnType("int");

                    b.Property<string>("Cdcn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractRegisterNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("InstallmentPayment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InvoicePattern")
                        .HasColumnType("int");

                    b.Property<int?>("InvoiceSellerCount")
                        .HasColumnType("int");

                    b.Property<int?>("InvoiceSubject")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<int>("SettlementTypeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Tax17")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TaxId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Tocv")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Tonw")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Torv")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalAfterDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalBill")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalOtherDutyAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalPreDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalVatAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalVatOfPayment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("buyerBranchCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("cashPayment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("contractRegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("invoiceReferenceTaxId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sellerBranchCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sellerCustomsCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sellerCustomsLicenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("statusId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("InvoiceTypeId");

                    b.HasIndex("SellerId");

                    b.HasIndex("SettlementTypeId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("InvoiceItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Bros_TalaHagh")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Consfee_TalaOjrat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CurrencyTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("InvoiceId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("NetPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Nw")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Olr")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductOrServiceId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductOrServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RowNumber")
                        .HasColumnType("int");

                    b.Property<decimal?>("Spro_TalaSood")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Sscv")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Ssrv")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Tcpbs_TalaTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPriceAfterDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VatPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("brokerSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("buyerSRegisterNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("cashOfPayment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("constructionFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("currencyFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("otherLegalRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("otherLegalTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("overDutyAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("overDutyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("overDutyTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("pspd")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("sellerProfit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("totalConstructionProfitBrokerSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("vatOfPayment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("vatRate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyTypeId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductOrServiceId");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Party", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountingSystemId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("EconomicCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLogoDisplayedOnInvoice")
                        .HasColumnType("bit");

                    b.Property<short>("LegalStatus")
                        .HasColumnType("smallint");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Role")
                        .HasColumnType("smallint");

                    b.Property<string>("SellerCSRKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellerCSRKeyAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellerPrivateAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellerPrivateKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellerPublicKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellerPublicKeyAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TafsilCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TafsilId")
                        .HasColumnType("bigint");

                    b.Property<string>("TaxMemoryId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("TaxPayerType")
                        .HasColumnType("smallint");

                    b.Property<string>("fullNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("uyer_SellerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TaxPayerType");

                    b.ToTable("parties");
                });

            modelBuilder.Entity("PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = 1,
                            Name = "نقدی"
                        },
                        new
                        {
                            Id = 2,
                            Code = 2,
                            Name = "واریز به حساب"
                        },
                        new
                        {
                            Id = 3,
                            Code = 3,
                            Name = "چک"
                        },
                        new
                        {
                            Id = 4,
                            Code = 4,
                            Name = "چک واگذاری"
                        });
                });

            modelBuilder.Entity("ProductOrService", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountingSystemId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ForeignCurrencyValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsService")
                        .HasColumnType("bit");

                    b.Property<decimal?>("LocalCurrencyValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("NetWeight")
                        .HasColumnType("real");

                    b.Property<decimal?>("OtherLegalChargesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<float?>("OtherLegalChargesRate")
                        .HasColumnType("real");

                    b.Property<string>("OtherLegalChargesSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("OtherTaxesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<float?>("OtherTaxesRate")
                        .HasColumnType("real");

                    b.Property<string>("OtherTaxesSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("UniqueId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitOfMeasurementId")
                        .HasColumnType("int");

                    b.Property<float>("VATRate")
                        .HasColumnType("real");

                    b.Property<int>("customerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UnitOfMeasurementId");

                    b.ToTable("ProductOrServices");
                });

            modelBuilder.Entity("UnitOfMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Measurements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "1627",
                            Name = "عدد"
                        },
                        new
                        {
                            Id = 2,
                            Code = "164",
                            Name = "کیلوگرم"
                        },
                        new
                        {
                            Id = 3,
                            Code = "165",
                            Name = "متر"
                        },
                        new
                        {
                            Id = 4,
                            Code = "1631",
                            Name = "دستگاه"
                        },
                        new
                        {
                            Id = 5,
                            Code = "1637",
                            Name = "لیتر"
                        },
                        new
                        {
                            Id = 6,
                            Code = "1628",
                            Name = "بسته"
                        },
                        new
                        {
                            Id = 7,
                            Code = "1622",
                            Name = "گرم"
                        },
                        new
                        {
                            Id = 8,
                            Code = "1676",
                            Name = "نفر"
                        },
                        new
                        {
                            Id = 9,
                            Code = "16103",
                            Name = "ساعت"
                        },
                        new
                        {
                            Id = 10,
                            Code = "169",
                            Name = "تن"
                        },
                        new
                        {
                            Id = 11,
                            Code = "1614",
                            Name = "گالن"
                        },
                        new
                        {
                            Id = 12,
                            Code = "1624",
                            Name = "کارتن"
                        },
                        new
                        {
                            Id = 13,
                            Code = "1620",
                            Name = "دست"
                        },
                        new
                        {
                            Id = 14,
                            Code = "161",
                            Name = "برگ"
                        },
                        new
                        {
                            Id = 15,
                            Code = "1629",
                            Name = "پاکت"
                        },
                        new
                        {
                            Id = 16,
                            Code = "1645",
                            Name = "مترمربع"
                        },
                        new
                        {
                            Id = 17,
                            Code = "1643",
                            Name = "جفت"
                        },
                        new
                        {
                            Id = 18,
                            Code = "1653",
                            Name = "واحد"
                        },
                        new
                        {
                            Id = 19,
                            Code = "1640",
                            Name = "تخته"
                        },
                        new
                        {
                            Id = 20,
                            Code = "1660",
                            Name = "شانه"
                        },
                        new
                        {
                            Id = 21,
                            Code = "1654",
                            Name = "بندیل"
                        },
                        new
                        {
                            Id = 22,
                            Code = "1687",
                            Name = "فاقد بسته بندی"
                        },
                        new
                        {
                            Id = 23,
                            Code = "1638",
                            Name = "بطری"
                        },
                        new
                        {
                            Id = 24,
                            Code = "1615",
                            Name = "کیسه"
                        },
                        new
                        {
                            Id = 25,
                            Code = "1633",
                            Name = "سیلندر"
                        },
                        new
                        {
                            Id = 26,
                            Code = "16121",
                            Name = "نفر-ساعت"
                        },
                        new
                        {
                            Id = 27,
                            Code = "168",
                            Name = "حلب"
                        },
                        new
                        {
                            Id = 28,
                            Code = "1665",
                            Name = "شیت"
                        },
                        new
                        {
                            Id = 29,
                            Code = "1636",
                            Name = "جام"
                        },
                        new
                        {
                            Id = 30,
                            Code = "16113",
                            Name = "سال"
                        },
                        new
                        {
                            Id = 31,
                            Code = "16112",
                            Name = "ماه"
                        },
                        new
                        {
                            Id = 32,
                            Code = "16104",
                            Name = "روز"
                        },
                        new
                        {
                            Id = 33,
                            Code = "16111",
                            Name = "دقیقه"
                        },
                        new
                        {
                            Id = 34,
                            Code = "16115",
                            Name = "سانتی متر"
                        },
                        new
                        {
                            Id = 35,
                            Code = "16114",
                            Name = "قطعه"
                        },
                        new
                        {
                            Id = 36,
                            Code = "16119",
                            Name = "گیگابایت بر ثانیه"
                        },
                        new
                        {
                            Id = 37,
                            Code = "90",
                            Name = "نسخه (جلد)"
                        },
                        new
                        {
                            Id = 38,
                            Code = "1611",
                            Name = "لنگه"
                        },
                        new
                        {
                            Id = 39,
                            Code = "1612",
                            Name = "عدل"
                        },
                        new
                        {
                            Id = 40,
                            Code = "1613",
                            Name = "جعبه"
                        },
                        new
                        {
                            Id = 41,
                            Code = "1618",
                            Name = "توپ"
                        },
                        new
                        {
                            Id = 42,
                            Code = "1619",
                            Name = "ست"
                        },
                        new
                        {
                            Id = 43,
                            Code = "1641",
                            Name = "رول"
                        });
                });

            modelBuilder.Entity("AppIdentityUserAppRole", b =>
                {
                    b.HasOne("ParcelPro.Models.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Models.Identity.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Article", b =>
                {
                    b.HasOne("ParcelPro.Areas.Accounting.Models.Entities.Acc_Document", "Doc")
                        .WithMany("DocArticles")
                        .HasForeignKey("DocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Moein", "Moein")
                        .WithMany("Articles")
                        .HasForeignKey("MoeinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doc");

                    b.Navigation("Moein");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Kol", b =>
                {
                    b.HasOne("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Group", "KolGroup")
                        .WithMany("Kols")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KolGroup");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Moein", b =>
                {
                    b.HasOne("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Kol", "MoeinKol")
                        .WithMany("Moeins")
                        .HasForeignKey("KolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MoeinKol");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_TafsilToGroup", b =>
                {
                    b.HasOne("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_TafsilGroup", "Group")
                        .WithMany("TafsilToGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Tafsil", "TafsilAccount")
                        .WithMany("TafsilToGroups")
                        .HasForeignKey("TafsilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("TafsilAccount");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Document", b =>
                {
                    b.HasOne("ParcelPro.Areas.Accounting.Models.Entities.Acc_FinancialPeriod", "DocPeriod")
                        .WithMany("Documents")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocPeriod");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.kh_BankAccount", b =>
                {
                    b.HasOne("ParcelPro.Areas.Accounting.Models.Entities.kh_Bank", "Bank")
                        .WithMany("BankAccounts")
                        .HasForeignKey("BankId");

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Address", b =>
                {
                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_AddressNeighborhood", "AddressNeighborhood")
                        .WithMany("Addresses")
                        .HasForeignKey("NeighborhoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Party", "person")
                        .WithMany("PartyAddress")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressNeighborhood");

                    b.Navigation("Branch");

                    b.Navigation("person");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_AddressCity", b =>
                {
                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_AddressState", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_AddressNeighborhood", b =>
                {
                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_AddressCity", "City")
                        .WithMany("Neighborhoods")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_AddressState", b =>
                {
                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_AddressCountry", "Country")
                        .WithMany("AddressStates")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_LogisticsFleetNeighborhood", b =>
                {
                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_AddressNeighborhood", null)
                        .WithMany("LogisticsFleetNeighborhoods")
                        .HasForeignKey("Cu_AddressNeighborhoodNeighborhoodId");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_NeighborhoodBranch", b =>
                {
                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_AddressNeighborhood", null)
                        .WithMany("NeighborhoodBranches")
                        .HasForeignKey("Cu_AddressNeighborhoodNeighborhoodId");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Route", b =>
                {
                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_AddressCity", null)
                        .WithMany("DestinationRouts")
                        .HasForeignKey("Cu_AddressCityCityId");

                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_AddressCity", null)
                        .WithMany("OriginRouts")
                        .HasForeignKey("Cu_AddressCityCityId1");
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.PartyRepresentative", b =>
                {
                    b.HasOne("Party", "Party")
                        .WithMany("PartyRepresentatives")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Party", "Representative")
                        .WithMany()
                        .HasForeignKey("RepresentativeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Party");

                    b.Navigation("Representative");
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.ProductOrServiceCategory", b =>
                {
                    b.HasOne("ParcelPro.Models.Commercial.ProductOrServiceCategory", "parent")
                        .WithMany("SubCategories")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("parent");
                });

            modelBuilder.Entity("ParcelPro.Models.Identity.AppIdentityUser", b =>
                {
                    b.HasOne("ParcelPro.Models.Commercial.Customer", "Customer")
                        .WithMany("CustomerUsers")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Invoice", b =>
                {
                    b.HasOne("Party", "Buyer")
                        .WithMany("BuyerInvoices")
                        .HasForeignKey("BuyerId");

                    b.HasOne("ParcelPro.Models.Commercial.InvoiceType", "InvoiceType")
                        .WithMany("Invoices")
                        .HasForeignKey("InvoiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Party", "Seller")
                        .WithMany("SellerInvoices")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Models.Commercial.SettlementType", "SettlementType")
                        .WithMany("Invoices")
                        .HasForeignKey("SettlementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("InvoiceType");

                    b.Navigation("Seller");

                    b.Navigation("SettlementType");
                });

            modelBuilder.Entity("InvoiceItem", b =>
                {
                    b.HasOne("Currency", "Currency")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("CurrencyTypeId");

                    b.HasOne("Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductOrService", "ProductOrService")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("ProductOrServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Invoice");

                    b.Navigation("ProductOrService");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ParcelPro.Models.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ParcelPro.Models.Identity.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ParcelPro.Models.Identity.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ParcelPro.Models.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Models.Identity.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ParcelPro.Models.Identity.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Party", b =>
                {
                    b.HasOne("ParcelPro.Models.Commercial.Customer", "PartyCustomer")
                        .WithMany("CustomerParties")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Models.Commercial.TaxPayerType", "PayerType")
                        .WithMany("Parties")
                        .HasForeignKey("TaxPayerType");

                    b.Navigation("PartyCustomer");

                    b.Navigation("PayerType");
                });

            modelBuilder.Entity("ProductOrService", b =>
                {
                    b.HasOne("ParcelPro.Models.Commercial.ProductOrServiceCategory", "Category")
                        .WithMany("ProductOrServices")
                        .HasForeignKey("CategoryId");

                    b.HasOne("UnitOfMeasurement", "UnitCount")
                        .WithMany("ProductOrServices")
                        .HasForeignKey("UnitOfMeasurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("UnitCount");
                });

            modelBuilder.Entity("Currency", b =>
                {
                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Group", b =>
                {
                    b.Navigation("Kols");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Kol", b =>
                {
                    b.Navigation("Moeins");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Moein", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Tafsil", b =>
                {
                    b.Navigation("TafsilToGroups");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_TafsilGroup", b =>
                {
                    b.Navigation("TafsilToGroups");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Document", b =>
                {
                    b.Navigation("DocArticles");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_FinancialPeriod", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.kh_Bank", b =>
                {
                    b.Navigation("BankAccounts");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_AddressCity", b =>
                {
                    b.Navigation("DestinationRouts");

                    b.Navigation("Neighborhoods");

                    b.Navigation("OriginRouts");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_AddressCountry", b =>
                {
                    b.Navigation("AddressStates");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_AddressNeighborhood", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("LogisticsFleetNeighborhoods");

                    b.Navigation("NeighborhoodBranches");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_AddressState", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.Customer", b =>
                {
                    b.Navigation("CustomerParties");

                    b.Navigation("CustomerUsers");
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.InvoiceType", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.ProductOrServiceCategory", b =>
                {
                    b.Navigation("ProductOrServices");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.SettlementType", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.TaxPayerType", b =>
                {
                    b.Navigation("Parties");
                });

            modelBuilder.Entity("Invoice", b =>
                {
                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("Party", b =>
                {
                    b.Navigation("BuyerInvoices");

                    b.Navigation("PartyAddress");

                    b.Navigation("PartyRepresentatives");

                    b.Navigation("SellerInvoices");
                });

            modelBuilder.Entity("ProductOrService", b =>
                {
                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("UnitOfMeasurement", b =>
                {
                    b.Navigation("ProductOrServices");
                });
#pragma warning restore 612, 618
        }
    }
}
