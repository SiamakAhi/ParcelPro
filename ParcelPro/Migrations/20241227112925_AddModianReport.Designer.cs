// <auto-generated />
using System;
using ParcelPro.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ParcelPro.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241227112925_AddModianReport")]
    partial class AddModianReport
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppIdentityUserAppRole", b =>
                {
                    b.Property<string>("RolesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("AppIdentityUserAppRole");
                });

            modelBuilder.Entity("Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "1",
                            Name = "دلار آمریکا"
                        },
                        new
                        {
                            Id = 2,
                            Code = "2",
                            Name = "یورو"
                        },
                        new
                        {
                            Id = 3,
                            Code = "3",
                            Name = "درهم امارات"
                        },
                        new
                        {
                            Id = 4,
                            Code = "4",
                            Name = "ریال عمان"
                        },
                        new
                        {
                            Id = 5,
                            Code = "5",
                            Name = "دینار کویت"
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountantRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("ArchiveCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Bed")
                        .HasColumnType("bigint");

                    b.Property<long>("Bes")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DocId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EditorUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInternalTransaction")
                        .HasColumnType("bit");

                    b.Property<int?>("KolId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MoeinId")
                        .HasColumnType("int");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RowNumber")
                        .HasColumnType("int");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Tafsil4Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Tafsil4Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Tafsil5Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Tafsil5Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Tafsil6Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Tafsil6Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Tafsil7Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Tafsil7Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Tafsil8Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Tafsil8Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocId");

                    b.HasIndex("MoeinId");

                    b.ToTable("Acc_Articles");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Group", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("AltGroupCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("GroupType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("bit");

                    b.Property<short>("Order")
                        .HasColumnType("smallint");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<short>("TypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Acc_Coding_Groups");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Kol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("GroupId")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("bit");

                    b.Property<string>("KolCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Nature")
                        .HasColumnType("smallint");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<short>("TypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Acc_Coding_Kols");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Moein", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCurrencyAccount")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("bit");

                    b.Property<int>("KolId")
                        .HasColumnType("int");

                    b.Property<string>("MoeinCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MoeinContraryNatureId")
                        .HasColumnType("int");

                    b.Property<string>("MoeinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Nature")
                        .HasColumnType("smallint");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Tafsil4_GroupIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tafsil5_GroupIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tafsil6_GroupIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tafsil7_GroupIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tafsil8_GroupIds")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KolId");

                    b.ToTable("Acc_Coding_Moeins");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Tafsil", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupsId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPerson")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Acc_Coding_Tafsils");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_TafsilGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPerson")
                        .HasColumnType("bit");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Acc_Coding_TafsilGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "مشتریان، تأمین کنندگان، کارمندان، شرکت های طرف قرارداد و ...",
                            GroupName = "اشخاص و شرکت ها",
                            IsEditable = false,
                            IsPerson = true
                        },
                        new
                        {
                            Id = 2,
                            GroupName = "بانک ها",
                            IsEditable = false,
                            IsPerson = false
                        },
                        new
                        {
                            Id = 3,
                            GroupName = "صندوق ها",
                            IsEditable = false,
                            IsPerson = false
                        },
                        new
                        {
                            Id = 4,
                            GroupName = "حساب های بانکی",
                            IsEditable = false,
                            IsPerson = false
                        },
                        new
                        {
                            Id = 5,
                            GroupName = "شعب",
                            IsEditable = false,
                            IsPerson = false
                        },
                        new
                        {
                            Id = 6,
                            GroupName = "نمایندگی ها",
                            IsEditable = false,
                            IsPerson = false
                        },
                        new
                        {
                            Id = 7,
                            GroupName = "همه",
                            IsEditable = false,
                            IsPerson = false
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_TafsilToGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<long>("TafsilId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("TafsilId");

                    b.ToTable("Acc_Coding_TafsilToGroups");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_CostCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("TafsilCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TafsilId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Acc_CostCenters");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_DocStatus", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Acc_DocStatuses");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Name = "یادداشت"
                        },
                        new
                        {
                            Id = (short)2,
                            Name = "ثبت موقت"
                        },
                        new
                        {
                            Id = (short)3,
                            Name = "ثبت دائم"
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_DocType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("DocTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Acc_DocTypes");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            DocTypeName = "سند روزانه"
                        },
                        new
                        {
                            Id = (short)2,
                            DocTypeName = "سند افتتاحیه"
                        },
                        new
                        {
                            Id = (short)3,
                            DocTypeName = "سند اختتامیه"
                        },
                        new
                        {
                            Id = (short)4,
                            DocTypeName = "سند بستن حسابهای موقت"
                        },
                        new
                        {
                            Id = (short)5,
                            DocTypeName = "سند بستن حسابهای دائم"
                        },
                        new
                        {
                            Id = (short)6,
                            DocTypeName = "سند طبقه بندی حسابها"
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AtfNumber")
                        .HasColumnType("int");

                    b.Property<int>("AutoDocNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DocDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocNumber")
                        .HasColumnType("int");

                    b.Property<string>("EditorUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<short>("StatusId")
                        .HasColumnType("smallint");

                    b.Property<int?>("SubsystemId")
                        .HasColumnType("int");

                    b.Property<long?>("SubsystemRef")
                        .HasColumnType("bigint");

                    b.Property<short>("TypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("PeriodId");

                    b.ToTable("Acc_Documents");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_FinancialPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("DefualtVatRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Acc_FinancialPeriods");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_MoadianReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountingStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuyerEconomicNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuyerIdentity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuyerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuyerPersonType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuyerTradeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractorContractNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlightType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FolderInsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasAccountingDoc")
                        .HasColumnType("bit");

                    b.Property<long>("InvoiceAmountWithoutVAT")
                        .HasColumnType("bigint");

                    b.Property<string>("InvoicePattern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("InvoiceSettlementBalance")
                        .HasColumnType("bigint");

                    b.Property<string>("InvoiceStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceSubject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSaleInvoice")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LimitStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NonAccountingStatusDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferenceInvoiceTaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReferringInvoiceIssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SellerBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellerContractNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("SettlementMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubscriptionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TotalInvoiceAmount")
                        .HasColumnType("bigint");

                    b.Property<long>("VAT")
                        .HasColumnType("bigint");

                    b.Property<string>("YearAndPeriod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Acc_ModianReports");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<short?>("AccLevel")
                        .HasColumnType("smallint");

                    b.Property<string>("Approver1Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Approver1Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Approver2Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Approver2Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("DocPrintDefault")
                        .HasColumnType("smallint");

                    b.Property<bool>("MandatoryTafsil")
                        .HasColumnType("bit");

                    b.Property<bool>("PrintCreator")
                        .HasColumnType("bit");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ShowAllTafsil")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Acc_Settings");
                });

            modelBuilder.Entity("ParcelPro.Areas.AvaRasta.Models.Entities.License", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Licenses");
                });

            modelBuilder.Entity("ParcelPro.Areas.AvaRasta.Models.Entities.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("ParcelPro.Areas.Commercial.Models.Entities.com_Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ArchiveRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditorUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FinancePeriodId")
                        .HasColumnType("int");

                    b.Property<long>("InvoiceAutoNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InvoiceSubject")
                        .HasColumnType("int");

                    b.Property<short>("InvoiceType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PartyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("int");

                    b.Property<int>("SettlementTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TaxInvoiceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Visitor")
                        .HasColumnType("bigint");

                    b.Property<short?>("VisitorPercent")
                        .HasColumnType("smallint");

                    b.Property<bool>("flag")
                        .HasColumnType("bit");

                    b.Property<short>("status")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("ParcelPro.Areas.Commercial.Models.Entities.com_InvoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EditorUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PriceAfterDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceBeForDescount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("QuantityInBaseUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QuantityInPakageUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QuantityInPerPakage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VatPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VatRate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchManager")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchManagerPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("BranchTypeId")
                        .HasColumnType("smallint");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<decimal?>("CommissionPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("Cu_RepresentativeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBillOfLadingIssuer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExternalBLIssuer")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHub")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIntercityFleet")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInternalBLIssuer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOwnership")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUrbanFleet")
                        .HasColumnType("bit");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("OldBranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldDistRepName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OpeningDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RenewalDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RepresentativeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("TafsilId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Cu_RepresentativeId");

                    b.HasIndex("TafsilId");

                    b.ToTable("Cu_Branch");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_BranchUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBLIssuerDistributor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDispatchVehicle")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDistCollectManager")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExternalBLIssuer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInternalBLIssuer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupervisor")
                        .HasColumnType("bit");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("sellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Cu_BranchUser");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Representative", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDistributor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIssuer")
                        .HasColumnType("bit");

                    b.Property<long?>("PartyId")
                        .HasColumnType("bigint");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TafsilId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PartyId")
                        .IsUnique()
                        .HasFilter("[PartyId] IS NOT NULL");

                    b.ToTable("Representatives");
                });

            modelBuilder.Entity("ParcelPro.Areas.DataTransfer.Models.KPOldSystemSaleReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<float?>("ActualCargoWeight")
                        .HasColumnType("real");

                    b.Property<long?>("AddedValue")
                        .HasColumnType("bigint");

                    b.Property<string>("AgencyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AgentConfirmationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("AgentDetailedCode")
                        .HasColumnType("bigint");

                    b.Property<long?>("BaseFare")
                        .HasColumnType("bigint");

                    b.Property<string>("BillOfLadingGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("BillOfLadingGroupCode")
                        .HasColumnType("bigint");

                    b.Property<long?>("BillOfLadingNumber")
                        .HasColumnType("bigint");

                    b.Property<bool?>("BranchManagerApprove")
                        .HasColumnType("bit");

                    b.Property<bool?>("Cancellation")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CancellationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CancellationPenalty")
                        .HasColumnType("bigint");

                    b.Property<string>("CancellationUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CargoFare")
                        .HasColumnType("bigint");

                    b.Property<float?>("ChargeableWeight")
                        .HasColumnType("real");

                    b.Property<long?>("CollectionOrSeparationFee")
                        .HasColumnType("bigint");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ConfirmedByAgent")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConfirmedByIssuingBranch")
                        .HasColumnType("bit");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreditCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CustomerCode")
                        .HasColumnType("bigint");

                    b.Property<string>("DataEntryDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DataEntryUserCode")
                        .HasColumnType("bigint");

                    b.Property<string>("DataEntryUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DeclaredGoodsValue")
                        .HasColumnType("bigint");

                    b.Property<string>("DeliveryConfirmation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DestinationMiscellaneousFee")
                        .HasColumnType("bigint");

                    b.Property<string>("DestinationRepresentative")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Discount")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("DistributerBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DistributerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DistributionCostDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DistributionOrSeparationFee")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DistributorApprove")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DocId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DocNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinancialInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrigin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("GoodsCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("InsuranceFee")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("IssuingBranchConfirmationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("IssuingBranchDetailedCode")
                        .HasColumnType("bigint");

                    b.Property<long?>("MachineCode")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("MiladiDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("MiscellaneousFee")
                        .HasColumnType("bigint");

                    b.Property<long?>("NonSystemicBillOfLadingNumber")
                        .HasColumnType("bigint");

                    b.Property<long?>("OldSeparationFee")
                        .HasColumnType("bigint");

                    b.Property<long>("OtherDistributionCosts")
                        .HasColumnType("bigint");

                    b.Property<long?>("OtherOriginFees")
                        .HasColumnType("bigint");

                    b.Property<string>("POSReceiptNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PackagingFee")
                        .HasColumnType("bigint");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RateType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("RecipientCustomerCode")
                        .HasColumnType("bigint");

                    b.Property<string>("RecipientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientZoneAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientZoneName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("RecordLock")
                        .HasColumnType("bit");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("RoundingAmount")
                        .HasColumnType("bigint");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("SenderAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderNationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderZoneAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderZoneCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderZoneName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ServiceCode")
                        .HasColumnType("bigint");

                    b.Property<string>("ServiceInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShamsiDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StampFee")
                        .HasColumnType("bigint");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToDestination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToTransitDestination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TotalBillOfLadingAmount")
                        .HasColumnType("bigint");

                    b.Property<long?>("TotalServiceFee")
                        .HasColumnType("bigint");

                    b.Property<long?>("TransitCargoFare")
                        .HasColumnType("bigint");

                    b.Property<long?>("TransitMiscellaneousFee")
                        .HasColumnType("bigint");

                    b.Property<string>("TransitRepresentative")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TransitSeparationFee")
                        .HasColumnType("bigint");

                    b.Property<long?>("VAT")
                        .HasColumnType("bigint");

                    b.Property<float?>("VolumetricWeight")
                        .HasColumnType("real");

                    b.Property<long>("WarehousingCost")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DistributerBranchId");

                    b.ToTable("KPOldSystemSales");
                });

            modelBuilder.Entity("ParcelPro.Areas.Geolocation.Models.Entities.Geo_City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsCapital")
                        .HasColumnType("bit");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int>("UniqueCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Geo_Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EnglishName = "Tabriz",
                            IsCapital = true,
                            PersianName = "تبریز",
                            ProvinceId = 1,
                            UniqueCode = 2101
                        },
                        new
                        {
                            Id = 2,
                            EnglishName = "Maragheh",
                            IsCapital = false,
                            PersianName = "مراغه",
                            ProvinceId = 1,
                            UniqueCode = 2102
                        },
                        new
                        {
                            Id = 3,
                            EnglishName = "Mianeh",
                            IsCapital = false,
                            PersianName = "میانه",
                            ProvinceId = 1,
                            UniqueCode = 2103
                        },
                        new
                        {
                            Id = 4,
                            EnglishName = "Marand",
                            IsCapital = false,
                            PersianName = "مرند",
                            ProvinceId = 1,
                            UniqueCode = 2104
                        },
                        new
                        {
                            Id = 5,
                            EnglishName = "Azarshahr",
                            IsCapital = false,
                            PersianName = "آذرشهر",
                            ProvinceId = 1,
                            UniqueCode = 2105
                        },
                        new
                        {
                            Id = 6,
                            EnglishName = "Urmia",
                            IsCapital = true,
                            PersianName = "ارومیه",
                            ProvinceId = 2,
                            UniqueCode = 2201
                        },
                        new
                        {
                            Id = 7,
                            EnglishName = "Khoy",
                            IsCapital = false,
                            PersianName = "خوی",
                            ProvinceId = 2,
                            UniqueCode = 2202
                        },
                        new
                        {
                            Id = 8,
                            EnglishName = "Salmas",
                            IsCapital = false,
                            PersianName = "سلماس",
                            ProvinceId = 2,
                            UniqueCode = 2203
                        },
                        new
                        {
                            Id = 9,
                            EnglishName = "Mahabad",
                            IsCapital = false,
                            PersianName = "مهاباد",
                            ProvinceId = 2,
                            UniqueCode = 2204
                        },
                        new
                        {
                            Id = 10,
                            EnglishName = "Piranshahr",
                            IsCapital = false,
                            PersianName = "پیرانشهر",
                            ProvinceId = 2,
                            UniqueCode = 2205
                        },
                        new
                        {
                            Id = 11,
                            EnglishName = "Ardabil",
                            IsCapital = true,
                            PersianName = "اردبیل",
                            ProvinceId = 3,
                            UniqueCode = 2301
                        },
                        new
                        {
                            Id = 12,
                            EnglishName = "Meshginshahr",
                            IsCapital = false,
                            PersianName = "مشگین‌شهر",
                            ProvinceId = 3,
                            UniqueCode = 2302
                        },
                        new
                        {
                            Id = 13,
                            EnglishName = "Parsabad",
                            IsCapital = false,
                            PersianName = "پارس‌آباد",
                            ProvinceId = 3,
                            UniqueCode = 2303
                        },
                        new
                        {
                            Id = 14,
                            EnglishName = "Khalkhal",
                            IsCapital = false,
                            PersianName = "خلخال",
                            ProvinceId = 3,
                            UniqueCode = 2304
                        },
                        new
                        {
                            Id = 15,
                            EnglishName = "Bileh Savar",
                            IsCapital = false,
                            PersianName = "بیله‌سوار",
                            ProvinceId = 3,
                            UniqueCode = 2305
                        },
                        new
                        {
                            Id = 16,
                            EnglishName = "Isfahan",
                            IsCapital = true,
                            PersianName = "اصفهان",
                            ProvinceId = 4,
                            UniqueCode = 2401
                        },
                        new
                        {
                            Id = 17,
                            EnglishName = "Kashan",
                            IsCapital = false,
                            PersianName = "کاشان",
                            ProvinceId = 4,
                            UniqueCode = 2402
                        },
                        new
                        {
                            Id = 18,
                            EnglishName = "Khomeinishahr",
                            IsCapital = false,
                            PersianName = "خمینی‌شهر",
                            ProvinceId = 4,
                            UniqueCode = 2403
                        },
                        new
                        {
                            Id = 19,
                            EnglishName = "Falavarjan",
                            IsCapital = false,
                            PersianName = "فلاورجان",
                            ProvinceId = 4,
                            UniqueCode = 2404
                        },
                        new
                        {
                            Id = 20,
                            EnglishName = "Na'in",
                            IsCapital = false,
                            PersianName = "نائین",
                            ProvinceId = 4,
                            UniqueCode = 2405
                        },
                        new
                        {
                            Id = 21,
                            EnglishName = "Karaj",
                            IsCapital = true,
                            PersianName = "کرج",
                            ProvinceId = 5,
                            UniqueCode = 2501
                        },
                        new
                        {
                            Id = 22,
                            EnglishName = "Nazarabad",
                            IsCapital = false,
                            PersianName = "نظرآباد",
                            ProvinceId = 5,
                            UniqueCode = 2502
                        },
                        new
                        {
                            Id = 23,
                            EnglishName = "Fardis",
                            IsCapital = false,
                            PersianName = "فردیس",
                            ProvinceId = 5,
                            UniqueCode = 2503
                        },
                        new
                        {
                            Id = 24,
                            EnglishName = "Savojbolagh",
                            IsCapital = false,
                            PersianName = "ساوجبلاغ",
                            ProvinceId = 5,
                            UniqueCode = 2504
                        },
                        new
                        {
                            Id = 25,
                            EnglishName = "Eshtehard",
                            IsCapital = false,
                            PersianName = "اشتهارد",
                            ProvinceId = 5,
                            UniqueCode = 2505
                        },
                        new
                        {
                            Id = 26,
                            EnglishName = "Ilam",
                            IsCapital = true,
                            PersianName = "ایلام",
                            ProvinceId = 6,
                            UniqueCode = 2601
                        },
                        new
                        {
                            Id = 27,
                            EnglishName = "Dehloran",
                            IsCapital = false,
                            PersianName = "دهلران",
                            ProvinceId = 6,
                            UniqueCode = 2602
                        },
                        new
                        {
                            Id = 28,
                            EnglishName = "Ivan",
                            IsCapital = false,
                            PersianName = "ایوان",
                            ProvinceId = 6,
                            UniqueCode = 2603
                        },
                        new
                        {
                            Id = 29,
                            EnglishName = "Abdanan",
                            IsCapital = false,
                            PersianName = "آبدانان",
                            ProvinceId = 6,
                            UniqueCode = 2604
                        },
                        new
                        {
                            Id = 30,
                            EnglishName = "Mehran",
                            IsCapital = false,
                            PersianName = "مهران",
                            ProvinceId = 6,
                            UniqueCode = 2605
                        },
                        new
                        {
                            Id = 31,
                            EnglishName = "Bushehr",
                            IsCapital = true,
                            PersianName = "بوشهر",
                            ProvinceId = 7,
                            UniqueCode = 2701
                        },
                        new
                        {
                            Id = 32,
                            EnglishName = "Borazjan",
                            IsCapital = false,
                            PersianName = "برازجان",
                            ProvinceId = 7,
                            UniqueCode = 2702
                        },
                        new
                        {
                            Id = 33,
                            EnglishName = "Genaveh",
                            IsCapital = false,
                            PersianName = "گناوه",
                            ProvinceId = 7,
                            UniqueCode = 2703
                        },
                        new
                        {
                            Id = 34,
                            EnglishName = "Khormoj",
                            IsCapital = false,
                            PersianName = "خورموج",
                            ProvinceId = 7,
                            UniqueCode = 2704
                        },
                        new
                        {
                            Id = 35,
                            EnglishName = "Dashti",
                            IsCapital = false,
                            PersianName = "دشتی",
                            ProvinceId = 7,
                            UniqueCode = 2705
                        },
                        new
                        {
                            Id = 36,
                            EnglishName = "Tehran",
                            IsCapital = true,
                            PersianName = "تهران",
                            ProvinceId = 8,
                            UniqueCode = 2801
                        },
                        new
                        {
                            Id = 37,
                            EnglishName = "Rey",
                            IsCapital = false,
                            PersianName = "ری",
                            ProvinceId = 8,
                            UniqueCode = 2802
                        },
                        new
                        {
                            Id = 38,
                            EnglishName = "Eslamshahr",
                            IsCapital = false,
                            PersianName = "اسلام‌شهر",
                            ProvinceId = 8,
                            UniqueCode = 2803
                        },
                        new
                        {
                            Id = 39,
                            EnglishName = "Shahriar",
                            IsCapital = false,
                            PersianName = "شهریار",
                            ProvinceId = 8,
                            UniqueCode = 2804
                        },
                        new
                        {
                            Id = 40,
                            EnglishName = "Varamin",
                            IsCapital = false,
                            PersianName = "ورامین",
                            ProvinceId = 8,
                            UniqueCode = 2805
                        },
                        new
                        {
                            Id = 41,
                            EnglishName = "Shahrekord",
                            IsCapital = true,
                            PersianName = "شهرکرد",
                            ProvinceId = 9,
                            UniqueCode = 2901
                        },
                        new
                        {
                            Id = 42,
                            EnglishName = "Borujen",
                            IsCapital = false,
                            PersianName = "بروجن",
                            ProvinceId = 9,
                            UniqueCode = 2902
                        },
                        new
                        {
                            Id = 43,
                            EnglishName = "Farsan",
                            IsCapital = false,
                            PersianName = "فارسان",
                            ProvinceId = 9,
                            UniqueCode = 2903
                        },
                        new
                        {
                            Id = 44,
                            EnglishName = "Lordegan",
                            IsCapital = false,
                            PersianName = "لردگان",
                            ProvinceId = 9,
                            UniqueCode = 2904
                        },
                        new
                        {
                            Id = 45,
                            EnglishName = "Fereydunshahr",
                            IsCapital = false,
                            PersianName = "فرخ‌شهر",
                            ProvinceId = 9,
                            UniqueCode = 2905
                        },
                        new
                        {
                            Id = 46,
                            EnglishName = "Birjand",
                            IsCapital = true,
                            PersianName = "بیرجند",
                            ProvinceId = 10,
                            UniqueCode = 3001
                        },
                        new
                        {
                            Id = 47,
                            EnglishName = "Qaen",
                            IsCapital = false,
                            PersianName = "قائن",
                            ProvinceId = 10,
                            UniqueCode = 3002
                        },
                        new
                        {
                            Id = 48,
                            EnglishName = "Tabas",
                            IsCapital = false,
                            PersianName = "طبس",
                            ProvinceId = 10,
                            UniqueCode = 3003
                        },
                        new
                        {
                            Id = 49,
                            EnglishName = "Ferdows",
                            IsCapital = false,
                            PersianName = "فردوس",
                            ProvinceId = 10,
                            UniqueCode = 3004
                        },
                        new
                        {
                            Id = 50,
                            EnglishName = "Nehbandan",
                            IsCapital = false,
                            PersianName = "نهبندان",
                            ProvinceId = 10,
                            UniqueCode = 3005
                        },
                        new
                        {
                            Id = 51,
                            EnglishName = "Mashhad",
                            IsCapital = true,
                            PersianName = "مشهد",
                            ProvinceId = 11,
                            UniqueCode = 3101
                        },
                        new
                        {
                            Id = 52,
                            EnglishName = "Neyshabur",
                            IsCapital = false,
                            PersianName = "نیشابور",
                            ProvinceId = 11,
                            UniqueCode = 3102
                        },
                        new
                        {
                            Id = 53,
                            EnglishName = "Sabzevar",
                            IsCapital = false,
                            PersianName = "سبزوار",
                            ProvinceId = 11,
                            UniqueCode = 3103
                        },
                        new
                        {
                            Id = 54,
                            EnglishName = "Torbate Heydarieh",
                            IsCapital = false,
                            PersianName = "تربت‌حیدریه",
                            ProvinceId = 11,
                            UniqueCode = 3104
                        },
                        new
                        {
                            Id = 55,
                            EnglishName = "Quchan",
                            IsCapital = false,
                            PersianName = "قوچان",
                            ProvinceId = 11,
                            UniqueCode = 3105
                        },
                        new
                        {
                            Id = 56,
                            EnglishName = "Bojnord",
                            IsCapital = true,
                            PersianName = "بجنورد",
                            ProvinceId = 12,
                            UniqueCode = 3201
                        },
                        new
                        {
                            Id = 57,
                            EnglishName = "Shirvan",
                            IsCapital = false,
                            PersianName = "شیروان",
                            ProvinceId = 12,
                            UniqueCode = 3202
                        },
                        new
                        {
                            Id = 58,
                            EnglishName = "Esfarayen",
                            IsCapital = false,
                            PersianName = "اسفراین",
                            ProvinceId = 12,
                            UniqueCode = 3203
                        },
                        new
                        {
                            Id = 59,
                            EnglishName = "Ashkhaneh",
                            IsCapital = false,
                            PersianName = "آشخانه",
                            ProvinceId = 12,
                            UniqueCode = 3204
                        },
                        new
                        {
                            Id = 60,
                            EnglishName = "Jajarm",
                            IsCapital = false,
                            PersianName = "جاجرم",
                            ProvinceId = 12,
                            UniqueCode = 3205
                        },
                        new
                        {
                            Id = 61,
                            EnglishName = "Ahvaz",
                            IsCapital = true,
                            PersianName = "اهواز",
                            ProvinceId = 13,
                            UniqueCode = 3301
                        },
                        new
                        {
                            Id = 62,
                            EnglishName = "Abadan",
                            IsCapital = false,
                            PersianName = "آبادان",
                            ProvinceId = 13,
                            UniqueCode = 3302
                        },
                        new
                        {
                            Id = 63,
                            EnglishName = "Khorramshahr",
                            IsCapital = false,
                            PersianName = "خرمشهر",
                            ProvinceId = 13,
                            UniqueCode = 3303
                        },
                        new
                        {
                            Id = 64,
                            EnglishName = "Dezful",
                            IsCapital = false,
                            PersianName = "دزفول",
                            ProvinceId = 13,
                            UniqueCode = 3304
                        },
                        new
                        {
                            Id = 65,
                            EnglishName = "Shooshtar",
                            IsCapital = false,
                            PersianName = "شوشتر",
                            ProvinceId = 13,
                            UniqueCode = 3305
                        },
                        new
                        {
                            Id = 66,
                            EnglishName = "Zanjan",
                            IsCapital = true,
                            PersianName = "زنجان",
                            ProvinceId = 14,
                            UniqueCode = 3401
                        },
                        new
                        {
                            Id = 67,
                            EnglishName = "Abhar",
                            IsCapital = false,
                            PersianName = "ابهر",
                            ProvinceId = 14,
                            UniqueCode = 3402
                        },
                        new
                        {
                            Id = 68,
                            EnglishName = "Khoda Bandeh",
                            IsCapital = false,
                            PersianName = "خدابنده",
                            ProvinceId = 14,
                            UniqueCode = 3403
                        },
                        new
                        {
                            Id = 69,
                            EnglishName = "Khoramdareh",
                            IsCapital = false,
                            PersianName = "خرمدره",
                            ProvinceId = 14,
                            UniqueCode = 3404
                        },
                        new
                        {
                            Id = 70,
                            EnglishName = "Mahnashan",
                            IsCapital = false,
                            PersianName = "ماه‌نشان",
                            ProvinceId = 14,
                            UniqueCode = 3405
                        },
                        new
                        {
                            Id = 71,
                            EnglishName = "Semnan",
                            IsCapital = true,
                            PersianName = "سمنان",
                            ProvinceId = 15,
                            UniqueCode = 3501
                        },
                        new
                        {
                            Id = 72,
                            EnglishName = "Shahrood",
                            IsCapital = false,
                            PersianName = "شاهرود",
                            ProvinceId = 15,
                            UniqueCode = 3502
                        },
                        new
                        {
                            Id = 73,
                            EnglishName = "Damghan",
                            IsCapital = false,
                            PersianName = "دامغان",
                            ProvinceId = 15,
                            UniqueCode = 3503
                        },
                        new
                        {
                            Id = 74,
                            EnglishName = "Garmsar",
                            IsCapital = false,
                            PersianName = "گرمسار",
                            ProvinceId = 15,
                            UniqueCode = 3504
                        },
                        new
                        {
                            Id = 75,
                            EnglishName = "Mahdishahr",
                            IsCapital = false,
                            PersianName = "مهدیشهر",
                            ProvinceId = 15,
                            UniqueCode = 3505
                        },
                        new
                        {
                            Id = 76,
                            EnglishName = "Zahedan",
                            IsCapital = true,
                            PersianName = "زاهدان",
                            ProvinceId = 16,
                            UniqueCode = 3601
                        },
                        new
                        {
                            Id = 77,
                            EnglishName = "Chabahar",
                            IsCapital = false,
                            PersianName = "چابهار",
                            ProvinceId = 16,
                            UniqueCode = 3602
                        },
                        new
                        {
                            Id = 78,
                            EnglishName = "Iranshahr",
                            IsCapital = false,
                            PersianName = "ایرانشهر",
                            ProvinceId = 16,
                            UniqueCode = 3603
                        },
                        new
                        {
                            Id = 79,
                            EnglishName = "Zabol",
                            IsCapital = false,
                            PersianName = "زابل",
                            ProvinceId = 16,
                            UniqueCode = 3604
                        },
                        new
                        {
                            Id = 80,
                            EnglishName = "Khash",
                            IsCapital = false,
                            PersianName = "خاش",
                            ProvinceId = 16,
                            UniqueCode = 3605
                        },
                        new
                        {
                            Id = 81,
                            EnglishName = "Shiraz",
                            IsCapital = true,
                            PersianName = "شیراز",
                            ProvinceId = 17,
                            UniqueCode = 3701
                        },
                        new
                        {
                            Id = 82,
                            EnglishName = "Marvdasht",
                            IsCapital = false,
                            PersianName = "مرودشت",
                            ProvinceId = 17,
                            UniqueCode = 3702
                        },
                        new
                        {
                            Id = 83,
                            EnglishName = "Jahrom",
                            IsCapital = false,
                            PersianName = "جهرم",
                            ProvinceId = 17,
                            UniqueCode = 3703
                        },
                        new
                        {
                            Id = 84,
                            EnglishName = "Lar",
                            IsCapital = false,
                            PersianName = "لار",
                            ProvinceId = 17,
                            UniqueCode = 3704
                        },
                        new
                        {
                            Id = 85,
                            EnglishName = "Fasa",
                            IsCapital = false,
                            PersianName = "فسا",
                            ProvinceId = 17,
                            UniqueCode = 3705
                        },
                        new
                        {
                            Id = 86,
                            EnglishName = "Qazvin",
                            IsCapital = true,
                            PersianName = "قزوین",
                            ProvinceId = 18,
                            UniqueCode = 3801
                        },
                        new
                        {
                            Id = 87,
                            EnglishName = "Takestan",
                            IsCapital = false,
                            PersianName = "تاکستان",
                            ProvinceId = 18,
                            UniqueCode = 3802
                        },
                        new
                        {
                            Id = 88,
                            EnglishName = "Abyek",
                            IsCapital = false,
                            PersianName = "آبیک",
                            ProvinceId = 18,
                            UniqueCode = 3803
                        },
                        new
                        {
                            Id = 89,
                            EnglishName = "Alvand",
                            IsCapital = false,
                            PersianName = "الوند",
                            ProvinceId = 18,
                            UniqueCode = 3804
                        },
                        new
                        {
                            Id = 90,
                            EnglishName = "Bu’in Zahra",
                            IsCapital = false,
                            PersianName = "بوئین‌زهرا",
                            ProvinceId = 18,
                            UniqueCode = 3805
                        },
                        new
                        {
                            Id = 91,
                            EnglishName = "Qom",
                            IsCapital = true,
                            PersianName = "قم",
                            ProvinceId = 19,
                            UniqueCode = 3901
                        },
                        new
                        {
                            Id = 92,
                            EnglishName = "Kahak",
                            IsCapital = false,
                            PersianName = "کهک",
                            ProvinceId = 19,
                            UniqueCode = 3902
                        },
                        new
                        {
                            Id = 93,
                            EnglishName = "Salafchegan",
                            IsCapital = false,
                            PersianName = "سلفچگان",
                            ProvinceId = 19,
                            UniqueCode = 3903
                        },
                        new
                        {
                            Id = 94,
                            EnglishName = "Jafariyeh",
                            IsCapital = false,
                            PersianName = "جعفریه",
                            ProvinceId = 19,
                            UniqueCode = 3904
                        },
                        new
                        {
                            Id = 95,
                            EnglishName = "Dastjerd",
                            IsCapital = false,
                            PersianName = "دستجرد",
                            ProvinceId = 19,
                            UniqueCode = 3905
                        },
                        new
                        {
                            Id = 96,
                            EnglishName = "Sanandaj",
                            IsCapital = true,
                            PersianName = "سنندج",
                            ProvinceId = 20,
                            UniqueCode = 4001
                        },
                        new
                        {
                            Id = 97,
                            EnglishName = "Marivan",
                            IsCapital = false,
                            PersianName = "مریوان",
                            ProvinceId = 20,
                            UniqueCode = 4002
                        },
                        new
                        {
                            Id = 98,
                            EnglishName = "Saqez",
                            IsCapital = false,
                            PersianName = "سقز",
                            ProvinceId = 20,
                            UniqueCode = 4003
                        },
                        new
                        {
                            Id = 99,
                            EnglishName = "Baneh",
                            IsCapital = false,
                            PersianName = "بانه",
                            ProvinceId = 20,
                            UniqueCode = 4004
                        },
                        new
                        {
                            Id = 100,
                            EnglishName = "Bijar",
                            IsCapital = false,
                            PersianName = "بیجار",
                            ProvinceId = 20,
                            UniqueCode = 4005
                        },
                        new
                        {
                            Id = 101,
                            EnglishName = "Kerman",
                            IsCapital = true,
                            PersianName = "کرمان",
                            ProvinceId = 21,
                            UniqueCode = 4101
                        },
                        new
                        {
                            Id = 102,
                            EnglishName = "Sirjan",
                            IsCapital = false,
                            PersianName = "سیرجان",
                            ProvinceId = 21,
                            UniqueCode = 4102
                        },
                        new
                        {
                            Id = 103,
                            EnglishName = "Rafsanjan",
                            IsCapital = false,
                            PersianName = "رفسنجان",
                            ProvinceId = 21,
                            UniqueCode = 4103
                        },
                        new
                        {
                            Id = 104,
                            EnglishName = "Jiroft",
                            IsCapital = false,
                            PersianName = "جیرفت",
                            ProvinceId = 21,
                            UniqueCode = 4104
                        },
                        new
                        {
                            Id = 105,
                            EnglishName = "Zarand",
                            IsCapital = false,
                            PersianName = "زرند",
                            ProvinceId = 21,
                            UniqueCode = 4105
                        },
                        new
                        {
                            Id = 106,
                            EnglishName = "Kermanshah",
                            IsCapital = true,
                            PersianName = "کرمانشاه",
                            ProvinceId = 22,
                            UniqueCode = 4201
                        },
                        new
                        {
                            Id = 107,
                            EnglishName = "Eslamabad Gharb",
                            IsCapital = false,
                            PersianName = "اسلام‌آباد غرب",
                            ProvinceId = 22,
                            UniqueCode = 4202
                        },
                        new
                        {
                            Id = 108,
                            EnglishName = "Harsin",
                            IsCapital = false,
                            PersianName = "هرسین",
                            ProvinceId = 22,
                            UniqueCode = 4203
                        },
                        new
                        {
                            Id = 109,
                            EnglishName = "Sonqor",
                            IsCapital = false,
                            PersianName = "سنقر",
                            ProvinceId = 22,
                            UniqueCode = 4204
                        },
                        new
                        {
                            Id = 110,
                            EnglishName = "Sarpol-e Zahab",
                            IsCapital = false,
                            PersianName = "سرپل ذهاب",
                            ProvinceId = 22,
                            UniqueCode = 4205
                        },
                        new
                        {
                            Id = 111,
                            EnglishName = "Yasuj",
                            IsCapital = true,
                            PersianName = "یاسوج",
                            ProvinceId = 23,
                            UniqueCode = 4301
                        },
                        new
                        {
                            Id = 112,
                            EnglishName = "Gachsaran",
                            IsCapital = false,
                            PersianName = "گچساران",
                            ProvinceId = 23,
                            UniqueCode = 4302
                        },
                        new
                        {
                            Id = 113,
                            EnglishName = "Dehdasht",
                            IsCapital = false,
                            PersianName = "دهدشت",
                            ProvinceId = 23,
                            UniqueCode = 4303
                        },
                        new
                        {
                            Id = 114,
                            EnglishName = "Likak",
                            IsCapital = false,
                            PersianName = "لیکک",
                            ProvinceId = 23,
                            UniqueCode = 4304
                        },
                        new
                        {
                            Id = 115,
                            EnglishName = "Sisakht",
                            IsCapital = false,
                            PersianName = "سی‌سخت",
                            ProvinceId = 23,
                            UniqueCode = 4305
                        },
                        new
                        {
                            Id = 116,
                            EnglishName = "Gorgan",
                            IsCapital = true,
                            PersianName = "گرگان",
                            ProvinceId = 24,
                            UniqueCode = 4401
                        },
                        new
                        {
                            Id = 117,
                            EnglishName = "Gonbad-e Kavus",
                            IsCapital = false,
                            PersianName = "گنبد کاووس",
                            ProvinceId = 24,
                            UniqueCode = 4402
                        },
                        new
                        {
                            Id = 118,
                            EnglishName = "Aliabad",
                            IsCapital = false,
                            PersianName = "علی‌آباد",
                            ProvinceId = 24,
                            UniqueCode = 4403
                        },
                        new
                        {
                            Id = 119,
                            EnglishName = "Aqqala",
                            IsCapital = false,
                            PersianName = "آق‌قلا",
                            ProvinceId = 24,
                            UniqueCode = 4404
                        },
                        new
                        {
                            Id = 120,
                            EnglishName = "Minoodasht",
                            IsCapital = false,
                            PersianName = "مینودشت",
                            ProvinceId = 24,
                            UniqueCode = 4405
                        },
                        new
                        {
                            Id = 121,
                            EnglishName = "Rasht",
                            IsCapital = true,
                            PersianName = "رشت",
                            ProvinceId = 25,
                            UniqueCode = 4501
                        },
                        new
                        {
                            Id = 122,
                            EnglishName = "Bandar-e Anzali",
                            IsCapital = false,
                            PersianName = "بندر انزلی",
                            ProvinceId = 25,
                            UniqueCode = 4502
                        },
                        new
                        {
                            Id = 123,
                            EnglishName = "Lahijan",
                            IsCapital = false,
                            PersianName = "لاهیجان",
                            ProvinceId = 25,
                            UniqueCode = 4503
                        },
                        new
                        {
                            Id = 124,
                            EnglishName = "Talesh",
                            IsCapital = false,
                            PersianName = "تالش",
                            ProvinceId = 25,
                            UniqueCode = 4504
                        },
                        new
                        {
                            Id = 125,
                            EnglishName = "Astara",
                            IsCapital = false,
                            PersianName = "آستارا",
                            ProvinceId = 25,
                            UniqueCode = 4505
                        },
                        new
                        {
                            Id = 126,
                            EnglishName = "Khorramabad",
                            IsCapital = true,
                            PersianName = "خرم‌آباد",
                            ProvinceId = 26,
                            UniqueCode = 4601
                        },
                        new
                        {
                            Id = 127,
                            EnglishName = "Borujerd",
                            IsCapital = false,
                            PersianName = "بروجرد",
                            ProvinceId = 26,
                            UniqueCode = 4602
                        },
                        new
                        {
                            Id = 128,
                            EnglishName = "Dorud",
                            IsCapital = false,
                            PersianName = "دورود",
                            ProvinceId = 26,
                            UniqueCode = 4603
                        },
                        new
                        {
                            Id = 129,
                            EnglishName = "Kuhdasht",
                            IsCapital = false,
                            PersianName = "کوهدشت",
                            ProvinceId = 26,
                            UniqueCode = 4604
                        },
                        new
                        {
                            Id = 130,
                            EnglishName = "Aligudarz",
                            IsCapital = false,
                            PersianName = "الیگودرز",
                            ProvinceId = 26,
                            UniqueCode = 4605
                        },
                        new
                        {
                            Id = 131,
                            EnglishName = "Sari",
                            IsCapital = true,
                            PersianName = "ساری",
                            ProvinceId = 27,
                            UniqueCode = 4701
                        },
                        new
                        {
                            Id = 132,
                            EnglishName = "Amol",
                            IsCapital = false,
                            PersianName = "آمل",
                            ProvinceId = 27,
                            UniqueCode = 4702
                        },
                        new
                        {
                            Id = 133,
                            EnglishName = "Babol",
                            IsCapital = false,
                            PersianName = "بابل",
                            ProvinceId = 27,
                            UniqueCode = 4703
                        },
                        new
                        {
                            Id = 134,
                            EnglishName = "Qaem Shahr",
                            IsCapital = false,
                            PersianName = "قائم‌شهر",
                            ProvinceId = 27,
                            UniqueCode = 4704
                        },
                        new
                        {
                            Id = 135,
                            EnglishName = "Chalus",
                            IsCapital = false,
                            PersianName = "چالوس",
                            ProvinceId = 27,
                            UniqueCode = 4705
                        },
                        new
                        {
                            Id = 136,
                            EnglishName = "Arak",
                            IsCapital = true,
                            PersianName = "اراک",
                            ProvinceId = 28,
                            UniqueCode = 4801
                        },
                        new
                        {
                            Id = 137,
                            EnglishName = "Saveh",
                            IsCapital = false,
                            PersianName = "ساوه",
                            ProvinceId = 28,
                            UniqueCode = 4802
                        },
                        new
                        {
                            Id = 138,
                            EnglishName = "Khomein",
                            IsCapital = false,
                            PersianName = "خمین",
                            ProvinceId = 28,
                            UniqueCode = 4803
                        },
                        new
                        {
                            Id = 139,
                            EnglishName = "Delijan",
                            IsCapital = false,
                            PersianName = "دلیجان",
                            ProvinceId = 28,
                            UniqueCode = 4804
                        },
                        new
                        {
                            Id = 140,
                            EnglishName = "Mahallat",
                            IsCapital = false,
                            PersianName = "محلات",
                            ProvinceId = 28,
                            UniqueCode = 4805
                        },
                        new
                        {
                            Id = 141,
                            EnglishName = "Bandar Abbas",
                            IsCapital = true,
                            PersianName = "بندرعباس",
                            ProvinceId = 29,
                            UniqueCode = 4901
                        },
                        new
                        {
                            Id = 142,
                            EnglishName = "Minab",
                            IsCapital = false,
                            PersianName = "میناب",
                            ProvinceId = 29,
                            UniqueCode = 4902
                        },
                        new
                        {
                            Id = 143,
                            EnglishName = "Qeshm",
                            IsCapital = false,
                            PersianName = "قشم",
                            ProvinceId = 29,
                            UniqueCode = 4903
                        },
                        new
                        {
                            Id = 144,
                            EnglishName = "Bandar Lengeh",
                            IsCapital = false,
                            PersianName = "بندر لنگه",
                            ProvinceId = 29,
                            UniqueCode = 4904
                        },
                        new
                        {
                            Id = 145,
                            EnglishName = "Roodan",
                            IsCapital = false,
                            PersianName = "رودان",
                            ProvinceId = 29,
                            UniqueCode = 4905
                        },
                        new
                        {
                            Id = 146,
                            EnglishName = "Hamedan",
                            IsCapital = true,
                            PersianName = "همدان",
                            ProvinceId = 30,
                            UniqueCode = 5001
                        },
                        new
                        {
                            Id = 147,
                            EnglishName = "Malayer",
                            IsCapital = false,
                            PersianName = "ملایر",
                            ProvinceId = 30,
                            UniqueCode = 5002
                        },
                        new
                        {
                            Id = 148,
                            EnglishName = "Nahavand",
                            IsCapital = false,
                            PersianName = "نهاوند",
                            ProvinceId = 30,
                            UniqueCode = 5003
                        },
                        new
                        {
                            Id = 149,
                            EnglishName = "Tuyserkan",
                            IsCapital = false,
                            PersianName = "تویسرکان",
                            ProvinceId = 30,
                            UniqueCode = 5004
                        },
                        new
                        {
                            Id = 150,
                            EnglishName = "Kabudarahang",
                            IsCapital = false,
                            PersianName = "کبودرآهنگ",
                            ProvinceId = 30,
                            UniqueCode = 5005
                        },
                        new
                        {
                            Id = 151,
                            EnglishName = "Yazd",
                            IsCapital = true,
                            PersianName = "یزد",
                            ProvinceId = 31,
                            UniqueCode = 5101
                        },
                        new
                        {
                            Id = 152,
                            EnglishName = "Meybod",
                            IsCapital = false,
                            PersianName = "میبد",
                            ProvinceId = 31,
                            UniqueCode = 5102
                        },
                        new
                        {
                            Id = 153,
                            EnglishName = "Ardakan",
                            IsCapital = false,
                            PersianName = "اردکان",
                            ProvinceId = 31,
                            UniqueCode = 5103
                        },
                        new
                        {
                            Id = 154,
                            EnglishName = "Bafq",
                            IsCapital = false,
                            PersianName = "بافق",
                            ProvinceId = 31,
                            UniqueCode = 5104
                        },
                        new
                        {
                            Id = 155,
                            EnglishName = "Mehriz",
                            IsCapital = false,
                            PersianName = "مهریز",
                            ProvinceId = 31,
                            UniqueCode = 5105
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Geolocation.Models.Entities.Geo_Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NumericCode")
                        .HasColumnType("int");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Geo_Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "IR",
                            EnglishName = "Iran",
                            NumericCode = 364,
                            PersianName = "ایران"
                        },
                        new
                        {
                            Id = 2,
                            Code = "KW",
                            EnglishName = "Kuwait",
                            NumericCode = 414,
                            PersianName = "کویت"
                        },
                        new
                        {
                            Id = 3,
                            Code = "CA",
                            EnglishName = "Canada",
                            NumericCode = 124,
                            PersianName = "کانادا"
                        },
                        new
                        {
                            Id = 4,
                            Code = "GB",
                            EnglishName = "United Kingdom",
                            NumericCode = 826,
                            PersianName = "انگلیس"
                        },
                        new
                        {
                            Id = 5,
                            Code = "DE",
                            EnglishName = "Germany",
                            NumericCode = 276,
                            PersianName = "آلمان"
                        },
                        new
                        {
                            Id = 6,
                            Code = "SE",
                            EnglishName = "Sweden",
                            NumericCode = 752,
                            PersianName = "سوئد"
                        },
                        new
                        {
                            Id = 7,
                            Code = "CH",
                            EnglishName = "Switzerland",
                            NumericCode = 756,
                            PersianName = "سوئیس"
                        },
                        new
                        {
                            Id = 8,
                            Code = "FR",
                            EnglishName = "France",
                            NumericCode = 250,
                            PersianName = "فرانسه"
                        },
                        new
                        {
                            Id = 9,
                            Code = "AE",
                            EnglishName = "United Arab Emirates",
                            NumericCode = 784,
                            PersianName = "امارات"
                        },
                        new
                        {
                            Id = 10,
                            Code = "OM",
                            EnglishName = "Oman",
                            NumericCode = 512,
                            PersianName = "عمان"
                        },
                        new
                        {
                            Id = 11,
                            Code = "AU",
                            EnglishName = "Australia",
                            NumericCode = 36,
                            PersianName = "استرالیا"
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Geolocation.Models.Entities.Geo_Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UniqueCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Geo_Provinces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            EnglishName = "East Azerbaijan",
                            PersianName = "آذربایجان شرقی",
                            UniqueCode = 1101
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            EnglishName = "West Azerbaijan",
                            PersianName = "آذربایجان غربی",
                            UniqueCode = 1102
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            EnglishName = "Ardabil",
                            PersianName = "اردبیل",
                            UniqueCode = 1103
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 1,
                            EnglishName = "Isfahan",
                            PersianName = "اصفهان",
                            UniqueCode = 1104
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 1,
                            EnglishName = "Alborz",
                            PersianName = "البرز",
                            UniqueCode = 1105
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 1,
                            EnglishName = "Ilam",
                            PersianName = "ایلام",
                            UniqueCode = 1106
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 1,
                            EnglishName = "Bushehr",
                            PersianName = "بوشهر",
                            UniqueCode = 1107
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 1,
                            EnglishName = "Tehran",
                            PersianName = "تهران",
                            UniqueCode = 1108
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 1,
                            EnglishName = "Chaharmahal and Bakhtiari",
                            PersianName = "چهارمحال و بختیاری",
                            UniqueCode = 1109
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 1,
                            EnglishName = "South Khorasan",
                            PersianName = "خراسان جنوبی",
                            UniqueCode = 1110
                        },
                        new
                        {
                            Id = 11,
                            CountryId = 1,
                            EnglishName = "Razavi Khorasan",
                            PersianName = "خراسان رضوی",
                            UniqueCode = 1111
                        },
                        new
                        {
                            Id = 12,
                            CountryId = 1,
                            EnglishName = "North Khorasan",
                            PersianName = "خراسان شمالی",
                            UniqueCode = 1112
                        },
                        new
                        {
                            Id = 13,
                            CountryId = 1,
                            EnglishName = "Khuzestan",
                            PersianName = "خوزستان",
                            UniqueCode = 1113
                        },
                        new
                        {
                            Id = 14,
                            CountryId = 1,
                            EnglishName = "Zanjan",
                            PersianName = "زنجان",
                            UniqueCode = 1114
                        },
                        new
                        {
                            Id = 15,
                            CountryId = 1,
                            EnglishName = "Semnan",
                            PersianName = "سمنان",
                            UniqueCode = 1115
                        },
                        new
                        {
                            Id = 16,
                            CountryId = 1,
                            EnglishName = "Sistan and Baluchestan",
                            PersianName = "سیستان و بلوچستان",
                            UniqueCode = 1116
                        },
                        new
                        {
                            Id = 17,
                            CountryId = 1,
                            EnglishName = "Fars",
                            PersianName = "فارس",
                            UniqueCode = 1117
                        },
                        new
                        {
                            Id = 18,
                            CountryId = 1,
                            EnglishName = "Qazvin",
                            PersianName = "قزوین",
                            UniqueCode = 1118
                        },
                        new
                        {
                            Id = 19,
                            CountryId = 1,
                            EnglishName = "Qom",
                            PersianName = "قم",
                            UniqueCode = 1119
                        },
                        new
                        {
                            Id = 20,
                            CountryId = 1,
                            EnglishName = "Kurdistan",
                            PersianName = "کردستان",
                            UniqueCode = 1120
                        },
                        new
                        {
                            Id = 21,
                            CountryId = 1,
                            EnglishName = "Kerman",
                            PersianName = "کرمان",
                            UniqueCode = 1121
                        },
                        new
                        {
                            Id = 22,
                            CountryId = 1,
                            EnglishName = "Kermanshah",
                            PersianName = "کرمانشاه",
                            UniqueCode = 1122
                        },
                        new
                        {
                            Id = 23,
                            CountryId = 1,
                            EnglishName = "Kohgiluyeh and Boyer-Ahmad",
                            PersianName = "کهگیلویه و بویراحمد",
                            UniqueCode = 1123
                        },
                        new
                        {
                            Id = 24,
                            CountryId = 1,
                            EnglishName = "Golestan",
                            PersianName = "گلستان",
                            UniqueCode = 1124
                        },
                        new
                        {
                            Id = 25,
                            CountryId = 1,
                            EnglishName = "Gilan",
                            PersianName = "گیلان",
                            UniqueCode = 1125
                        },
                        new
                        {
                            Id = 26,
                            CountryId = 1,
                            EnglishName = "Lorestan",
                            PersianName = "لرستان",
                            UniqueCode = 1126
                        },
                        new
                        {
                            Id = 27,
                            CountryId = 1,
                            EnglishName = "Mazandaran",
                            PersianName = "مازندران",
                            UniqueCode = 1127
                        },
                        new
                        {
                            Id = 28,
                            CountryId = 1,
                            EnglishName = "Markazi",
                            PersianName = "مرکزی",
                            UniqueCode = 1128
                        },
                        new
                        {
                            Id = 29,
                            CountryId = 1,
                            EnglishName = "Hormozgan",
                            PersianName = "هرمزگان",
                            UniqueCode = 1129
                        },
                        new
                        {
                            Id = 30,
                            CountryId = 1,
                            EnglishName = "Hamedan",
                            PersianName = "همدان",
                            UniqueCode = 1130
                        },
                        new
                        {
                            Id = 31,
                            CountryId = 1,
                            EnglishName = "Yazd",
                            PersianName = "یزد",
                            UniqueCode = 1131
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Organization.Models.Entities.OrgDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentDepartmentId")
                        .HasColumnType("int");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParentDepartmentId");

                    b.ToTable("OrgDepartments");
                });

            modelBuilder.Entity("ParcelPro.Areas.Organization.Models.Entities.OrgEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<int>("RelationshipType")
                        .HasColumnType("int");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SupervisorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("OrgEmployees");
                });

            modelBuilder.Entity("ParcelPro.Areas.Organization.Models.Entities.OrgPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("OrgPositions");
                });

            modelBuilder.Entity("ParcelPro.Areas.Treasury.Models.Entities.TreCarrency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ExchangeRateToRial")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TreCarrencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExchangeRateToRial = 1m,
                            FullName = "ریال ایران",
                            SellerId = 120L,
                            ShortName = "IRR"
                        },
                        new
                        {
                            Id = 2,
                            ExchangeRateToRial = 770000m,
                            FullName = "دلار آمریکا",
                            SellerId = 120L,
                            ShortName = "USD"
                        },
                        new
                        {
                            Id = 3,
                            ExchangeRateToRial = 810000m,
                            FullName = "یورو",
                            SellerId = 120L,
                            ShortName = "EUR"
                        },
                        new
                        {
                            Id = 4,
                            ExchangeRateToRial = 920000m,
                            FullName = "پوند انگلیس",
                            SellerId = 120L,
                            ShortName = "GBP"
                        },
                        new
                        {
                            Id = 5,
                            ExchangeRateToRial = 6500m,
                            FullName = "یوآن چین",
                            SellerId = 120L,
                            ShortName = "CNY"
                        },
                        new
                        {
                            Id = 6,
                            ExchangeRateToRial = 11400m,
                            FullName = "درهم امارات",
                            SellerId = 120L,
                            ShortName = "AED"
                        },
                        new
                        {
                            Id = 7,
                            ExchangeRateToRial = 6000m,
                            FullName = "لیره ترکیه",
                            SellerId = 120L,
                            ShortName = "TRY"
                        },
                        new
                        {
                            Id = 8,
                            ExchangeRateToRial = 35m,
                            FullName = "دینار عراق",
                            SellerId = 120L,
                            ShortName = "IQD"
                        },
                        new
                        {
                            Id = 9,
                            ExchangeRateToRial = 11500m,
                            FullName = "ریال قطر",
                            SellerId = 120L,
                            ShortName = "QAR"
                        },
                        new
                        {
                            Id = 10,
                            ExchangeRateToRial = 11200m,
                            FullName = "ریال سعودی",
                            SellerId = 120L,
                            ShortName = "SAR"
                        },
                        new
                        {
                            Id = 11,
                            ExchangeRateToRial = 140000m,
                            FullName = "دینار کویت",
                            SellerId = 120L,
                            ShortName = "KWD"
                        },
                        new
                        {
                            Id = 12,
                            ExchangeRateToRial = 380m,
                            FullName = "ین ژاپن",
                            SellerId = 120L,
                            ShortName = "JPY"
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Treasury.Models.Entities.kh_Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TafsilCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TafsilId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Banks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "بانک ملی ایران"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ملت"
                        },
                        new
                        {
                            Id = 3,
                            Name = "تجارت"
                        },
                        new
                        {
                            Id = 4,
                            Name = "صادرات ایران"
                        },
                        new
                        {
                            Id = 5,
                            Name = "سامان"
                        },
                        new
                        {
                            Id = 6,
                            Name = "سپه"
                        },
                        new
                        {
                            Id = 7,
                            Name = "پارسیان"
                        },
                        new
                        {
                            Id = 8,
                            Name = "پاسارگاد"
                        },
                        new
                        {
                            Id = 9,
                            Name = "مهر اقتصاد"
                        },
                        new
                        {
                            Id = 10,
                            Name = "رفاه کارگران"
                        },
                        new
                        {
                            Id = 11,
                            Name = "آینده"
                        },
                        new
                        {
                            Id = 12,
                            Name = "شهر"
                        },
                        new
                        {
                            Id = 13,
                            Name = "رسالت"
                        },
                        new
                        {
                            Id = 14,
                            Name = "سینا"
                        },
                        new
                        {
                            Id = 15,
                            Name = "ایران زمین"
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Treasury.Models.Entities.kh_BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BankId")
                        .HasColumnType("int");

                    b.Property<string>("BranchCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SHABA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("TafsilCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TafsilId")
                        .HasColumnType("bigint");

                    b.Property<string>("cvvt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Inventory", b =>
                {
                    b.Property<Guid>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("MaximumQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinimumQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("QuantityOnHand")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<long>("WarehouseId")
                        .HasColumnType("bigint");

                    b.HasKey("InventoryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Wh_Inventories");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_InventoryTransaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BaseUnitQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("DestinationWarehouseId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PakageQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("QuantityInUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<long>("SourceWarehouseId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TotalQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("TransactionType")
                        .HasColumnType("smallint");

                    b.Property<int>("UnitOfMeasureId")
                        .HasColumnType("int");

                    b.Property<Guid>("WarehouseDocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TransactionId");

                    b.HasIndex("DestinationWarehouseId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SourceWarehouseId");

                    b.HasIndex("UnitOfMeasureId");

                    b.HasIndex("WarehouseDocumentId");

                    b.ToTable("Wh_InventoryTransactions");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Product", b =>
                {
                    b.Property<long>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProductId"));

                    b.Property<int>("BaseUnitId")
                        .HasColumnType("int");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ForeignCurrencyValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("HasInventory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsService")
                        .HasColumnType("bit");

                    b.Property<decimal?>("LocalCurrencyValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<float?>("NetWeight")
                        .HasColumnType("real");

                    b.Property<decimal?>("OtherLegalChargesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<float?>("OtherLegalChargesRate")
                        .HasColumnType("real");

                    b.Property<string>("OtherLegalChargesSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("OtherTaxesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<float?>("OtherTaxesRate")
                        .HasColumnType("real");

                    b.Property<string>("OtherTaxesSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PakageCountId")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("ProductType")
                        .HasColumnType("smallint");

                    b.Property<int>("QuantityInPakage")
                        .HasColumnType("int");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("UniqueId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<float>("VATRate")
                        .HasColumnType("real");

                    b.HasKey("ProductId");

                    b.HasIndex("BaseUnitId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PakageCountId");

                    b.ToTable("Wh_Products");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_ProductCategory", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("ParentCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.HasKey("CategoryId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Wh_ProductCategories");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_ProductUnit", b =>
                {
                    b.Property<long>("ProductUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProductUnitId"));

                    b.Property<decimal>("ConversionFactor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("UnitOfMeasureId")
                        .HasColumnType("int");

                    b.Property<short>("UnitType")
                        .HasColumnType("smallint");

                    b.HasKey("ProductUnitId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("Wh_ProductUnits");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_UnitOfMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("UnitCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitSymbol")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Wh_UnitOfMeasures");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Warehouse", b =>
                {
                    b.Property<long>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("WarehouseId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("WarehouseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WarehouseId");

                    b.ToTable("Wh_Warehouses");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseDocument", b =>
                {
                    b.Property<Guid>("WarehouseDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DestinationWarehouseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("DocumentStatus")
                        .HasColumnType("smallint");

                    b.Property<short>("DocumentType")
                        .HasColumnType("smallint");

                    b.Property<string>("EditorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SourceWarehouseId")
                        .HasColumnType("bigint");

                    b.HasKey("WarehouseDocumentId");

                    b.HasIndex("DestinationWarehouseId");

                    b.HasIndex("SourceWarehouseId");

                    b.ToTable("Wh_WarehouseDocuments");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseDocumentItem", b =>
                {
                    b.Property<Guid>("DocumentLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InvoiceItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("QuantityInBaseUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QuantityInUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitOfMeasureId")
                        .HasColumnType("int");

                    b.Property<Guid>("WarehouseDocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DocumentLineId");

                    b.HasIndex("InvoiceItemId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseDocumentId");

                    b.ToTable("Wh_WarehouseDocumentItems");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseLocation", b =>
                {
                    b.Property<long>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LocationId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LocationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentLocationId")
                        .HasColumnType("bigint");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<long>("WarehouseId")
                        .HasColumnType("bigint");

                    b.HasKey("LocationId");

                    b.HasIndex("ParentLocationId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Wh_WarehouseLocations");
                });

            modelBuilder.Entity("ParcelPro.Models.AppSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpierDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoginMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LunchDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppName = "نرم افزار حسابداری گارنِت ",
                            CompanyName = "آوا اندیش رستـا",
                            LoginMessage = "آوای تکنولوژی، آواز موفقیت",
                            LogoUrl = "../../img/aar.png",
                            OwnerName = "سیامک آهی",
                            Version = "0.1"
                        });
                });

            modelBuilder.Entity("ParcelPro.Models.AppSubsystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_En")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_fa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppSubsystems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name_En = "Accounting",
                            Name_fa = "حسابداری"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name_En = "Buy",
                            Name_fa = "خرید"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Name_En = "Sale",
                            Name_fa = "فروش"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            Name_En = "Warehouse",
                            Name_fa = "انبار"
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            Name_En = "Khazane",
                            Name_fa = "خزانه داری"
                        },
                        new
                        {
                            Id = 6,
                            Description = "",
                            Name_En = "Asset",
                            Name_fa = "اموال"
                        },
                        new
                        {
                            Id = 7,
                            Description = "",
                            Name_En = "Contract",
                            Name_fa = "قراردادها"
                        },
                        new
                        {
                            Id = 8,
                            Description = "",
                            Name_En = "Hoghoogh",
                            Name_fa = "حقوق و دستمزد"
                        });
                });

            modelBuilder.Entity("ParcelPro.Models.AppTheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CssClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDark")
                        .HasColumnType("bit");

                    b.Property<string>("StyleFileName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppThemes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CssClass = "morph",
                            IsDark = false,
                            StyleFileName = "bootstrap.morph.rtl.min.css"
                        },
                        new
                        {
                            Id = 2,
                            CssClass = "solar",
                            IsDark = true,
                            StyleFileName = "bootstrap.solar.rtl.min.css"
                        });
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActivationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("City")
                        .HasColumnType("int");

                    b.Property<string>("EconomicNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceCountLimit")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("Ishoghooghi")
                        .HasColumnType("bit");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LicenseCount")
                        .HasColumnType("int");

                    b.Property<string>("LogoAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("State")
                        .HasColumnType("int");

                    b.Property<string>("TafsilCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TafsilId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VersionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("licenseExpierDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.PartyRepresentative", b =>
                {
                    b.Property<long>("PartyId")
                        .HasColumnType("bigint");

                    b.Property<long>("RepresentativeId")
                        .HasColumnType("bigint");

                    b.HasKey("PartyId", "RepresentativeId");

                    b.HasIndex("RepresentativeId");

                    b.ToTable("PartyRepresentatives");
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.PartyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PartyTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "1",
                            Name = "حقیقی"
                        },
                        new
                        {
                            Id = 2,
                            Code = "2",
                            Name = "حقوقی"
                        },
                        new
                        {
                            Id = 3,
                            Code = "3",
                            Name = "مشارکت مدنی"
                        },
                        new
                        {
                            Id = 4,
                            Code = "4",
                            Name = "اتباع غیرایرانی"
                        },
                        new
                        {
                            Id = 5,
                            Code = "5",
                            Name = "مصرف کننده نهایی"
                        });
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.TaxPayerType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TaxPayerTypes");
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.UserSeller", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserSellers");
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.UserSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActiveFinancePeriodId")
                        .HasColumnType("int");

                    b.Property<long?>("ActiveSellerId")
                        .HasColumnType("bigint");

                    b.Property<bool>("AllowBuyerManagement")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowSaleManagement")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowSellerManagement")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowStuffManagement")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowUserManagement")
                        .HasColumnType("bit");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrentTheme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<short?>("DepartmentCode")
                        .HasColumnType("smallint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("ParcelPro.Models.Identity.AppIdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<short>("DepartmentCode")
                        .HasColumnType("smallint");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Gender")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastVisitDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasFilter("[PersonId] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ParcelPro.Models.Identity.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Party", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountingSystemId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CEOContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CEOName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("EconomicCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCustomer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLogoDisplayedOnInvoice")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVendor")
                        .HasColumnType("bit");

                    b.Property<short>("LegalStatus")
                        .HasColumnType("smallint");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Role")
                        .HasColumnType("smallint");

                    b.Property<string>("SellerCSRKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellerCSRKeyAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellerPrivateAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellerPrivateKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellerPublicKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellerPublicKeyAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TafsilCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TafsilId")
                        .HasColumnType("bigint");

                    b.Property<string>("TaxAuditor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxFileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxMemoryId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxPanelPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("TaxPayerType")
                        .HasColumnType("smallint");

                    b.Property<string>("TaxTrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxUnitAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxUnitCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fullNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("uyer_SellerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TaxPayerType");

                    b.ToTable("parties");
                });

            modelBuilder.Entity("AppIdentityUserAppRole", b =>
                {
                    b.HasOne("ParcelPro.Models.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Models.Identity.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Article", b =>
                {
                    b.HasOne("ParcelPro.Areas.Accounting.Models.Entities.Acc_Document", "Doc")
                        .WithMany("DocArticles")
                        .HasForeignKey("DocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Moein", "Moein")
                        .WithMany("Articles")
                        .HasForeignKey("MoeinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doc");

                    b.Navigation("Moein");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Kol", b =>
                {
                    b.HasOne("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Group", "KolGroup")
                        .WithMany("Kols")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KolGroup");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Moein", b =>
                {
                    b.HasOne("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Kol", "MoeinKol")
                        .WithMany("Moeins")
                        .HasForeignKey("KolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MoeinKol");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_TafsilToGroup", b =>
                {
                    b.HasOne("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_TafsilGroup", "Group")
                        .WithMany("TafsilToGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Tafsil", "TafsilAccount")
                        .WithMany("TafsilToGroups")
                        .HasForeignKey("TafsilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("TafsilAccount");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Document", b =>
                {
                    b.HasOne("ParcelPro.Areas.Accounting.Models.Entities.Acc_FinancialPeriod", "DocPeriod")
                        .WithMany("Documents")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocPeriod");
                });

            modelBuilder.Entity("ParcelPro.Areas.AvaRasta.Models.Entities.License", b =>
                {
                    b.HasOne("ParcelPro.Models.Commercial.Customer", "Customer")
                        .WithMany("Licenses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.AvaRasta.Models.Entities.Module", "Module")
                        .WithMany("Licenses")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("ParcelPro.Areas.Commercial.Models.Entities.com_Invoice", b =>
                {
                    b.HasOne("Party", "InvoiceParty")
                        .WithMany("Invoices")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvoiceParty");
                });

            modelBuilder.Entity("ParcelPro.Areas.Commercial.Models.Entities.com_InvoiceItem", b =>
                {
                    b.HasOne("ParcelPro.Areas.Commercial.Models.Entities.com_Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Product", "Product")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Branch", b =>
                {
                    b.HasOne("ParcelPro.Areas.Geolocation.Models.Entities.Geo_City", "BranchCity")
                        .WithMany("CityBranches")
                        .HasForeignKey("CityId");

                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_Representative", null)
                        .WithMany("RepresentativeBranches")
                        .HasForeignKey("Cu_RepresentativeId");

                    b.HasOne("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Tafsil", "TafsilAccount")
                        .WithMany("Branches")
                        .HasForeignKey("TafsilId");

                    b.Navigation("BranchCity");

                    b.Navigation("TafsilAccount");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_BranchUser", b =>
                {
                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_Branch", "Branch")
                        .WithMany("BranchUsers")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Models.Identity.AppIdentityUser", "IdentityUser")
                        .WithOne("BranchUser")
                        .HasForeignKey("ParcelPro.Areas.Courier.Models.Entities.Cu_BranchUser", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Representative", b =>
                {
                    b.HasOne("Party", "Person")
                        .WithOne("Representative")
                        .HasForeignKey("ParcelPro.Areas.Courier.Models.Entities.Cu_Representative", "PartyId");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ParcelPro.Areas.DataTransfer.Models.KPOldSystemSaleReport", b =>
                {
                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_BranchUser", "DistributerBranch")
                        .WithMany("Distributers")
                        .HasForeignKey("DistributerBranchId");

                    b.Navigation("DistributerBranch");
                });

            modelBuilder.Entity("ParcelPro.Areas.Geolocation.Models.Entities.Geo_City", b =>
                {
                    b.HasOne("ParcelPro.Areas.Geolocation.Models.Entities.Geo_Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("ParcelPro.Areas.Geolocation.Models.Entities.Geo_Province", b =>
                {
                    b.HasOne("ParcelPro.Areas.Geolocation.Models.Entities.Geo_Country", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ParcelPro.Areas.Organization.Models.Entities.OrgDepartment", b =>
                {
                    b.HasOne("ParcelPro.Areas.Organization.Models.Entities.OrgDepartment", "ParentDepartment")
                        .WithMany("ChildDepartments")
                        .HasForeignKey("ParentDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentDepartment");
                });

            modelBuilder.Entity("ParcelPro.Areas.Organization.Models.Entities.OrgEmployee", b =>
                {
                    b.HasOne("ParcelPro.Areas.Organization.Models.Entities.OrgPosition", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Organization.Models.Entities.OrgEmployee", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Position");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("ParcelPro.Areas.Organization.Models.Entities.OrgPosition", b =>
                {
                    b.HasOne("ParcelPro.Areas.Organization.Models.Entities.OrgDepartment", "Department")
                        .WithMany("Positions")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ParcelPro.Areas.Treasury.Models.Entities.kh_BankAccount", b =>
                {
                    b.HasOne("ParcelPro.Areas.Treasury.Models.Entities.kh_Bank", "Bank")
                        .WithMany("BankAccounts")
                        .HasForeignKey("BankId");

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Inventory", b =>
                {
                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_InventoryTransaction", b =>
                {
                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Warehouse", "DestinationWarehouse")
                        .WithMany()
                        .HasForeignKey("DestinationWarehouseId");

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Warehouse", "SourceWarehouse")
                        .WithMany()
                        .HasForeignKey("SourceWarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseDocument", "WarehouseDocument")
                        .WithMany()
                        .HasForeignKey("WarehouseDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationWarehouse");

                    b.Navigation("Product");

                    b.Navigation("SourceWarehouse");

                    b.Navigation("UnitOfMeasure");

                    b.Navigation("WarehouseDocument");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Product", b =>
                {
                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_UnitOfMeasure", "BaseUnit")
                        .WithMany("Products")
                        .HasForeignKey("BaseUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_UnitOfMeasure", "PakageUnit")
                        .WithMany("PakageProducts")
                        .HasForeignKey("PakageCountId");

                    b.Navigation("BaseUnit");

                    b.Navigation("PakageUnit");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_ProductCategory", b =>
                {
                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_ProductCategory", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_ProductUnit", b =>
                {
                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Product", "Product")
                        .WithMany("ProductUnits")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_UnitOfMeasure", "UnitOfMeasure")
                        .WithMany("ProductUnits")
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("UnitOfMeasure");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseDocument", b =>
                {
                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Warehouse", "DestinationWarehouse")
                        .WithMany()
                        .HasForeignKey("DestinationWarehouseId");

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Warehouse", "SourceWarehouse")
                        .WithMany("WarehouseDocuments")
                        .HasForeignKey("SourceWarehouseId");

                    b.Navigation("DestinationWarehouse");

                    b.Navigation("SourceWarehouse");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseDocumentItem", b =>
                {
                    b.HasOne("ParcelPro.Areas.Commercial.Models.Entities.com_InvoiceItem", "InvoiceItem")
                        .WithMany()
                        .HasForeignKey("InvoiceItemId");

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Product", "Product")
                        .WithMany("WarehouseDocumentItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseDocument", "WarehouseDocument")
                        .WithMany("DocumentItems")
                        .HasForeignKey("WarehouseDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvoiceItem");

                    b.Navigation("Location");

                    b.Navigation("Product");

                    b.Navigation("WarehouseDocument");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseLocation", b =>
                {
                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseLocation", "ParentLocation")
                        .WithMany("SubLocations")
                        .HasForeignKey("ParentLocationId");

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Warehouse", "Warehouse")
                        .WithMany("WarehouseLocations")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentLocation");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.PartyRepresentative", b =>
                {
                    b.HasOne("Party", "Party")
                        .WithMany("PartyRepresentatives")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Party", "Representative")
                        .WithMany()
                        .HasForeignKey("RepresentativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");

                    b.Navigation("Representative");
                });

            modelBuilder.Entity("ParcelPro.Models.Identity.AppIdentityUser", b =>
                {
                    b.HasOne("ParcelPro.Models.Commercial.Customer", "Customer")
                        .WithMany("CustomerUsers")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Party", "Person")
                        .WithOne("User")
                        .HasForeignKey("ParcelPro.Models.Identity.AppIdentityUser", "PersonId");

                    b.Navigation("Customer");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ParcelPro.Models.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ParcelPro.Models.Identity.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ParcelPro.Models.Identity.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ParcelPro.Models.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Models.Identity.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ParcelPro.Models.Identity.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Party", b =>
                {
                    b.HasOne("ParcelPro.Models.Commercial.Customer", "PartyCustomer")
                        .WithMany("CustomerParties")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Models.Commercial.TaxPayerType", "PayerType")
                        .WithMany("Parties")
                        .HasForeignKey("TaxPayerType");

                    b.Navigation("PartyCustomer");

                    b.Navigation("PayerType");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Group", b =>
                {
                    b.Navigation("Kols");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Kol", b =>
                {
                    b.Navigation("Moeins");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Moein", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Tafsil", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("TafsilToGroups");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_TafsilGroup", b =>
                {
                    b.Navigation("TafsilToGroups");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Document", b =>
                {
                    b.Navigation("DocArticles");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_FinancialPeriod", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("ParcelPro.Areas.AvaRasta.Models.Entities.Module", b =>
                {
                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("ParcelPro.Areas.Commercial.Models.Entities.com_Invoice", b =>
                {
                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Branch", b =>
                {
                    b.Navigation("BranchUsers");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_BranchUser", b =>
                {
                    b.Navigation("Distributers");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Representative", b =>
                {
                    b.Navigation("RepresentativeBranches");
                });

            modelBuilder.Entity("ParcelPro.Areas.Geolocation.Models.Entities.Geo_City", b =>
                {
                    b.Navigation("CityBranches");
                });

            modelBuilder.Entity("ParcelPro.Areas.Geolocation.Models.Entities.Geo_Country", b =>
                {
                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("ParcelPro.Areas.Geolocation.Models.Entities.Geo_Province", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("ParcelPro.Areas.Organization.Models.Entities.OrgDepartment", b =>
                {
                    b.Navigation("ChildDepartments");

                    b.Navigation("Positions");
                });

            modelBuilder.Entity("ParcelPro.Areas.Treasury.Models.Entities.kh_Bank", b =>
                {
                    b.Navigation("BankAccounts");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Product", b =>
                {
                    b.Navigation("InvoiceItems");

                    b.Navigation("ProductUnits");

                    b.Navigation("WarehouseDocumentItems");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_ProductCategory", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_UnitOfMeasure", b =>
                {
                    b.Navigation("PakageProducts");

                    b.Navigation("ProductUnits");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Warehouse", b =>
                {
                    b.Navigation("WarehouseDocuments");

                    b.Navigation("WarehouseLocations");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseDocument", b =>
                {
                    b.Navigation("DocumentItems");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseLocation", b =>
                {
                    b.Navigation("SubLocations");
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.Customer", b =>
                {
                    b.Navigation("CustomerParties");

                    b.Navigation("CustomerUsers");

                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.TaxPayerType", b =>
                {
                    b.Navigation("Parties");
                });

            modelBuilder.Entity("ParcelPro.Models.Identity.AppIdentityUser", b =>
                {
                    b.Navigation("BranchUser");
                });

            modelBuilder.Entity("Party", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("PartyRepresentatives");

                    b.Navigation("Representative");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
