// <auto-generated />
using System;
using ParcelPro.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ParcelPro.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241120174848_DropAddressModel")]
    partial class DropAddressModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppIdentityUserAppRole", b =>
                {
                    b.Property<string>("RolesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("AppIdentityUserAppRole");
                });

            modelBuilder.Entity("Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "1",
                            Name = "دلار آمریکا"
                        },
                        new
                        {
                            Id = 2,
                            Code = "2",
                            Name = "یورو"
                        },
                        new
                        {
                            Id = 3,
                            Code = "3",
                            Name = "درهم امارات"
                        },
                        new
                        {
                            Id = 4,
                            Code = "4",
                            Name = "ریال عمان"
                        },
                        new
                        {
                            Id = 5,
                            Code = "5",
                            Name = "دینار کویت"
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("ArchiveCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Bed")
                        .HasColumnType("bigint");

                    b.Property<long>("Bes")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DocId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EditorUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("KolId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MoeinId")
                        .HasColumnType("int");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int");

                    b.Property<int>("RowNumber")
                        .HasColumnType("int");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Tafsil4Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Tafsil4Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Tafsil5Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Tafsil5Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Tafsil6Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Tafsil6Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Tafsil7Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Tafsil7Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Tafsil8Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Tafsil8Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocId");

                    b.HasIndex("MoeinId");

                    b.ToTable("Acc_Articles");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Group", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("AltGroupCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("GroupType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("bit");

                    b.Property<short>("Order")
                        .HasColumnType("smallint");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<short>("TypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Acc_Coding_Groups");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Kol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("GroupId")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("bit");

                    b.Property<string>("KolCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Nature")
                        .HasColumnType("smallint");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<short>("TypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Acc_Coding_Kols");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Moein", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCurrencyAccount")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("bit");

                    b.Property<int>("KolId")
                        .HasColumnType("int");

                    b.Property<string>("MoeinCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MoeinContraryNatureId")
                        .HasColumnType("int");

                    b.Property<string>("MoeinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Nature")
                        .HasColumnType("smallint");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Tafsil4_GroupIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tafsil5_GroupIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tafsil6_GroupIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tafsil7_GroupIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tafsil8_GroupIds")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KolId");

                    b.ToTable("Acc_Coding_Moeins");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Tafsil", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupsId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPerson")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Acc_Coding_Tafsils");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_TafsilGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPerson")
                        .HasColumnType("bit");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Acc_Coding_TafsilGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "مشتریان، تأمین کنندگان، کارمندان، شرکت های طرف قرارداد و ...",
                            GroupName = "اشخاص و شرکت ها",
                            IsEditable = false,
                            IsPerson = true
                        },
                        new
                        {
                            Id = 2,
                            GroupName = "بانک ها",
                            IsEditable = false,
                            IsPerson = false
                        },
                        new
                        {
                            Id = 3,
                            GroupName = "صندوق ها",
                            IsEditable = false,
                            IsPerson = false
                        },
                        new
                        {
                            Id = 4,
                            GroupName = "حساب های بانکی",
                            IsEditable = false,
                            IsPerson = false
                        },
                        new
                        {
                            Id = 5,
                            GroupName = "شعب",
                            IsEditable = false,
                            IsPerson = false
                        },
                        new
                        {
                            Id = 6,
                            GroupName = "نمایندگی ها",
                            IsEditable = false,
                            IsPerson = false
                        },
                        new
                        {
                            Id = 7,
                            GroupName = "همه",
                            IsEditable = false,
                            IsPerson = false
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_TafsilToGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<long>("TafsilId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("TafsilId");

                    b.ToTable("Acc_Coding_TafsilToGroups");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_CostCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("TafsilCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TafsilId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Acc_CostCenters");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_DocStatus", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Acc_DocStatuses");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Name = "یادداشت"
                        },
                        new
                        {
                            Id = (short)2,
                            Name = "ثبت موقت"
                        },
                        new
                        {
                            Id = (short)3,
                            Name = "ثبت دائم"
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_DocType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("DocTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Acc_DocTypes");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            DocTypeName = "سند روزانه"
                        },
                        new
                        {
                            Id = (short)2,
                            DocTypeName = "سند افتتاحیه"
                        },
                        new
                        {
                            Id = (short)3,
                            DocTypeName = "سند اختتامیه"
                        },
                        new
                        {
                            Id = (short)4,
                            DocTypeName = "سند بستن حسابهای موقت"
                        },
                        new
                        {
                            Id = (short)5,
                            DocTypeName = "سند بستن حسابهای دائم"
                        },
                        new
                        {
                            Id = (short)6,
                            DocTypeName = "سند طبقه بندی حسابها"
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AtfNumber")
                        .HasColumnType("int");

                    b.Property<int>("AutoDocNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DocDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocNumber")
                        .HasColumnType("int");

                    b.Property<string>("EditorUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<short>("StatusId")
                        .HasColumnType("smallint");

                    b.Property<int?>("SubsystemId")
                        .HasColumnType("int");

                    b.Property<long?>("SubsystemRef")
                        .HasColumnType("bigint");

                    b.Property<short>("TypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("PeriodId");

                    b.ToTable("Acc_Documents");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_FinancialPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("DefualtVatRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Acc_FinancialPeriods");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<short?>("AccLevel")
                        .HasColumnType("smallint");

                    b.Property<string>("Approver1Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Approver1Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Approver2Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Approver2Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("DocPrintDefault")
                        .HasColumnType("smallint");

                    b.Property<bool>("MandatoryTafsil")
                        .HasColumnType("bit");

                    b.Property<bool>("PrintCreator")
                        .HasColumnType("bit");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ShowAllTafsil")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Acc_Settings");
                });

            modelBuilder.Entity("ParcelPro.Areas.AvaRasta.Models.Entities.License", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Licenses");
                });

            modelBuilder.Entity("ParcelPro.Areas.AvaRasta.Models.Entities.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("ParcelPro.Areas.Commercial.Models.Entities.com_Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ArchiveRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditorUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FinancePeriodId")
                        .HasColumnType("int");

                    b.Property<long>("InvoiceAutoNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InvoiceSubject")
                        .HasColumnType("int");

                    b.Property<short>("InvoiceType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PartyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("int");

                    b.Property<int>("SettlementTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TaxInvoiceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Visitor")
                        .HasColumnType("bigint");

                    b.Property<short?>("VisitorPercent")
                        .HasColumnType("smallint");

                    b.Property<short>("status")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("ParcelPro.Areas.Commercial.Models.Entities.com_InvoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EditorUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PriceAfterDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceBeForDescount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("QuantityInBaseUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QuantityInPakageUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QuantityInPerPakage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VatPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VatRate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchManager")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchManagerPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("BranchTypeId")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("CommissionPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("HubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBillOfLadingIssuer")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHub")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIntercityFleet")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOwnership")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUrbanFleet")
                        .HasColumnType("bit");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<DateTime?>("OpeningDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RenewalDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RepresentativeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("TafsilId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RepresentativeId");

                    b.ToTable("Cu_Branch");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Representative", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDistributor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIssuer")
                        .HasColumnType("bit");

                    b.Property<long?>("PartyId")
                        .HasColumnType("bigint");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TafsilId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PartyId")
                        .IsUnique()
                        .HasFilter("[PartyId] IS NOT NULL");

                    b.ToTable("Representatives");
                });

            modelBuilder.Entity("ParcelPro.Areas.DataTransfer.Models.KPOldSystemSaleReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<float?>("ActualCargoWeight")
                        .HasColumnType("real");

                    b.Property<long?>("AddedValue")
                        .HasColumnType("bigint");

                    b.Property<string>("AgencyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AgentConfirmationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("AgentDetailedCode")
                        .HasColumnType("bigint");

                    b.Property<long?>("BaseFare")
                        .HasColumnType("bigint");

                    b.Property<string>("BillOfLadingGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("BillOfLadingGroupCode")
                        .HasColumnType("bigint");

                    b.Property<long?>("BillOfLadingNumber")
                        .HasColumnType("bigint");

                    b.Property<bool?>("BranchManagerApprove")
                        .HasColumnType("bit");

                    b.Property<bool?>("Cancellation")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CancellationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CancellationPenalty")
                        .HasColumnType("bigint");

                    b.Property<string>("CancellationUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CargoFare")
                        .HasColumnType("bigint");

                    b.Property<float?>("ChargeableWeight")
                        .HasColumnType("real");

                    b.Property<long?>("CollectionOrSeparationFee")
                        .HasColumnType("bigint");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ConfirmedByAgent")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConfirmedByIssuingBranch")
                        .HasColumnType("bit");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreditCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CustomerCode")
                        .HasColumnType("bigint");

                    b.Property<string>("DataEntryDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DataEntryUserCode")
                        .HasColumnType("bigint");

                    b.Property<string>("DataEntryUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DeclaredGoodsValue")
                        .HasColumnType("bigint");

                    b.Property<string>("DeliveryConfirmation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DestinationMiscellaneousFee")
                        .HasColumnType("bigint");

                    b.Property<string>("DestinationRepresentative")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Discount")
                        .HasColumnType("bigint");

                    b.Property<string>("DistributionCostDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DistributionOrSeparationFee")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DistributorApprove")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DocId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DocNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinancialInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrigin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("GoodsCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("InsuranceFee")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("IssuingBranchConfirmationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("IssuingBranchDetailedCode")
                        .HasColumnType("bigint");

                    b.Property<long?>("MachineCode")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("MiladiDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("MiscellaneousFee")
                        .HasColumnType("bigint");

                    b.Property<long?>("NonSystemicBillOfLadingNumber")
                        .HasColumnType("bigint");

                    b.Property<long?>("OldSeparationFee")
                        .HasColumnType("bigint");

                    b.Property<long>("OtherDistributionCosts")
                        .HasColumnType("bigint");

                    b.Property<long?>("OtherOriginFees")
                        .HasColumnType("bigint");

                    b.Property<string>("POSReceiptNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PackagingFee")
                        .HasColumnType("bigint");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RateType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("RecipientCustomerCode")
                        .HasColumnType("bigint");

                    b.Property<string>("RecipientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientZoneAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientZoneName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("RecordLock")
                        .HasColumnType("bit");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("RoundingAmount")
                        .HasColumnType("bigint");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("SenderAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderNationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderZoneAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderZoneCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderZoneName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ServiceCode")
                        .HasColumnType("bigint");

                    b.Property<string>("ServiceInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShamsiDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StampFee")
                        .HasColumnType("bigint");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToDestination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToTransitDestination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TotalBillOfLadingAmount")
                        .HasColumnType("bigint");

                    b.Property<long?>("TotalServiceFee")
                        .HasColumnType("bigint");

                    b.Property<long?>("TransitCargoFare")
                        .HasColumnType("bigint");

                    b.Property<long?>("TransitMiscellaneousFee")
                        .HasColumnType("bigint");

                    b.Property<string>("TransitRepresentative")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TransitSeparationFee")
                        .HasColumnType("bigint");

                    b.Property<long?>("VAT")
                        .HasColumnType("bigint");

                    b.Property<float?>("VolumetricWeight")
                        .HasColumnType("real");

                    b.Property<long>("WarehousingCost")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("KPOldSystemSales");
                });

            modelBuilder.Entity("ParcelPro.Areas.Treasury.Models.Entities.kh_Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TafsilCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TafsilId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Banks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "بانک ملی ایران"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ملت"
                        },
                        new
                        {
                            Id = 3,
                            Name = "تجارت"
                        },
                        new
                        {
                            Id = 4,
                            Name = "صادرات ایران"
                        },
                        new
                        {
                            Id = 5,
                            Name = "سامان"
                        },
                        new
                        {
                            Id = 6,
                            Name = "سپه"
                        },
                        new
                        {
                            Id = 7,
                            Name = "پارسیان"
                        },
                        new
                        {
                            Id = 8,
                            Name = "پاسارگاد"
                        },
                        new
                        {
                            Id = 9,
                            Name = "مهر اقتصاد"
                        },
                        new
                        {
                            Id = 10,
                            Name = "رفاه کارگران"
                        },
                        new
                        {
                            Id = 11,
                            Name = "آینده"
                        },
                        new
                        {
                            Id = 12,
                            Name = "شهر"
                        },
                        new
                        {
                            Id = 13,
                            Name = "رسالت"
                        },
                        new
                        {
                            Id = 14,
                            Name = "سینا"
                        },
                        new
                        {
                            Id = 15,
                            Name = "ایران زمین"
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Treasury.Models.Entities.kh_BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BankId")
                        .HasColumnType("int");

                    b.Property<string>("BranchCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SHABA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("TafsilCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TafsilId")
                        .HasColumnType("bigint");

                    b.Property<string>("cvvt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Inventory", b =>
                {
                    b.Property<Guid>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("MaximumQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinimumQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("QuantityOnHand")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<long>("WarehouseId")
                        .HasColumnType("bigint");

                    b.HasKey("InventoryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Wh_Inventories");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_InventoryTransaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BaseUnitQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("DestinationWarehouseId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PakageQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("QuantityInUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<long>("SourceWarehouseId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TotalQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("TransactionType")
                        .HasColumnType("smallint");

                    b.Property<int>("UnitOfMeasureId")
                        .HasColumnType("int");

                    b.Property<Guid>("WarehouseDocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TransactionId");

                    b.HasIndex("DestinationWarehouseId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SourceWarehouseId");

                    b.HasIndex("UnitOfMeasureId");

                    b.HasIndex("WarehouseDocumentId");

                    b.ToTable("Wh_InventoryTransactions");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Product", b =>
                {
                    b.Property<long>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProductId"));

                    b.Property<int>("BaseUnitId")
                        .HasColumnType("int");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ForeignCurrencyValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("HasInventory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsService")
                        .HasColumnType("bit");

                    b.Property<decimal?>("LocalCurrencyValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<float?>("NetWeight")
                        .HasColumnType("real");

                    b.Property<decimal?>("OtherLegalChargesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<float?>("OtherLegalChargesRate")
                        .HasColumnType("real");

                    b.Property<string>("OtherLegalChargesSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("OtherTaxesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<float?>("OtherTaxesRate")
                        .HasColumnType("real");

                    b.Property<string>("OtherTaxesSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PakageCountId")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("ProductType")
                        .HasColumnType("smallint");

                    b.Property<int>("QuantityInPakage")
                        .HasColumnType("int");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("UniqueId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<float>("VATRate")
                        .HasColumnType("real");

                    b.HasKey("ProductId");

                    b.HasIndex("BaseUnitId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PakageCountId");

                    b.ToTable("Wh_Products");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_ProductCategory", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("ParentCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.HasKey("CategoryId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Wh_ProductCategories");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_ProductUnit", b =>
                {
                    b.Property<long>("ProductUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProductUnitId"));

                    b.Property<decimal>("ConversionFactor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("UnitOfMeasureId")
                        .HasColumnType("int");

                    b.Property<short>("UnitType")
                        .HasColumnType("smallint");

                    b.HasKey("ProductUnitId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("Wh_ProductUnits");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_UnitOfMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("UnitCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitSymbol")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Wh_UnitOfMeasures");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Warehouse", b =>
                {
                    b.Property<long>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("WarehouseId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("WarehouseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WarehouseId");

                    b.ToTable("Wh_Warehouses");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseDocument", b =>
                {
                    b.Property<Guid>("WarehouseDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DestinationWarehouseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("DocumentStatus")
                        .HasColumnType("smallint");

                    b.Property<short>("DocumentType")
                        .HasColumnType("smallint");

                    b.Property<string>("EditorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SourceWarehouseId")
                        .HasColumnType("bigint");

                    b.HasKey("WarehouseDocumentId");

                    b.HasIndex("DestinationWarehouseId");

                    b.HasIndex("SourceWarehouseId");

                    b.ToTable("Wh_WarehouseDocuments");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseDocumentItem", b =>
                {
                    b.Property<Guid>("DocumentLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InvoiceItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("QuantityInBaseUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QuantityInUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitOfMeasureId")
                        .HasColumnType("int");

                    b.Property<Guid>("WarehouseDocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DocumentLineId");

                    b.HasIndex("InvoiceItemId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseDocumentId");

                    b.ToTable("Wh_WarehouseDocumentItems");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseLocation", b =>
                {
                    b.Property<long>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LocationId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LocationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentLocationId")
                        .HasColumnType("bigint");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<long>("WarehouseId")
                        .HasColumnType("bigint");

                    b.HasKey("LocationId");

                    b.HasIndex("ParentLocationId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Wh_WarehouseLocations");
                });

            modelBuilder.Entity("ParcelPro.Models.AppSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpierDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoginMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LunchDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppName = "نرم افزار حسابداری گارنِت ",
                            CompanyName = "آوا اندیش رستـا",
                            LoginMessage = "آوای تکنولوژی، آواز موفقیت",
                            LogoUrl = "../../img/aar.png",
                            OwnerName = "سیامک آهی",
                            Version = "0.1"
                        });
                });

            modelBuilder.Entity("ParcelPro.Models.AppSubsystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_En")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_fa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppSubsystems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name_En = "Accounting",
                            Name_fa = "حسابداری"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name_En = "Buy",
                            Name_fa = "خرید"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Name_En = "Sale",
                            Name_fa = "فروش"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            Name_En = "Warehouse",
                            Name_fa = "انبار"
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            Name_En = "Khazane",
                            Name_fa = "خزانه داری"
                        },
                        new
                        {
                            Id = 6,
                            Description = "",
                            Name_En = "Asset",
                            Name_fa = "اموال"
                        },
                        new
                        {
                            Id = 7,
                            Description = "",
                            Name_En = "Contract",
                            Name_fa = "قراردادها"
                        },
                        new
                        {
                            Id = 8,
                            Description = "",
                            Name_En = "Hoghoogh",
                            Name_fa = "حقوق و دستمزد"
                        });
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActivationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("City")
                        .HasColumnType("int");

                    b.Property<string>("EconomicNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceCountLimit")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("Ishoghooghi")
                        .HasColumnType("bit");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LicenseCount")
                        .HasColumnType("int");

                    b.Property<string>("LogoAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("State")
                        .HasColumnType("int");

                    b.Property<string>("TafsilCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TafsilId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VersionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("licenseExpierDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.PartyRepresentative", b =>
                {
                    b.Property<long>("PartyId")
                        .HasColumnType("bigint");

                    b.Property<long>("RepresentativeId")
                        .HasColumnType("bigint");

                    b.HasKey("PartyId", "RepresentativeId");

                    b.HasIndex("RepresentativeId");

                    b.ToTable("PartyRepresentatives");
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.PartyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PartyTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "1",
                            Name = "حقیقی"
                        },
                        new
                        {
                            Id = 2,
                            Code = "2",
                            Name = "حقوقی"
                        },
                        new
                        {
                            Id = 3,
                            Code = "3",
                            Name = "مشارکت مدنی"
                        },
                        new
                        {
                            Id = 4,
                            Code = "4",
                            Name = "اتباع غیرایرانی"
                        },
                        new
                        {
                            Id = 5,
                            Code = "5",
                            Name = "مصرف کننده نهایی"
                        });
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.TaxPayerType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TaxPayerTypes");
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.UserSeller", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserSellers");
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.UserSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActiveFinancePeriodId")
                        .HasColumnType("int");

                    b.Property<long?>("ActiveSellerId")
                        .HasColumnType("bigint");

                    b.Property<bool>("AllowBuyerManagement")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowSaleManagement")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowSellerManagement")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowStuffManagement")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowUserManagement")
                        .HasColumnType("bit");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("ParcelPro.Models.Identity.AppIdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Gender")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastVisitDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ParcelPro.Models.Identity.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Party", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountingSystemId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CEOContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CEOName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("EconomicCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCustomer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLogoDisplayedOnInvoice")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVendor")
                        .HasColumnType("bit");

                    b.Property<short>("LegalStatus")
                        .HasColumnType("smallint");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Role")
                        .HasColumnType("smallint");

                    b.Property<string>("SellerCSRKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellerCSRKeyAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellerPrivateAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellerPrivateKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellerPublicKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellerPublicKeyAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TafsilCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TafsilId")
                        .HasColumnType("bigint");

                    b.Property<string>("TaxAuditor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxFileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxMemoryId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxPanelPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("TaxPayerType")
                        .HasColumnType("smallint");

                    b.Property<string>("TaxTrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxUnitAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxUnitCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fullNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("uyer_SellerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TaxPayerType");

                    b.ToTable("parties");
                });

            modelBuilder.Entity("AppIdentityUserAppRole", b =>
                {
                    b.HasOne("ParcelPro.Models.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Models.Identity.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Article", b =>
                {
                    b.HasOne("ParcelPro.Areas.Accounting.Models.Entities.Acc_Document", "Doc")
                        .WithMany("DocArticles")
                        .HasForeignKey("DocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Moein", "Moein")
                        .WithMany("Articles")
                        .HasForeignKey("MoeinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doc");

                    b.Navigation("Moein");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Kol", b =>
                {
                    b.HasOne("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Group", "KolGroup")
                        .WithMany("Kols")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KolGroup");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Moein", b =>
                {
                    b.HasOne("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Kol", "MoeinKol")
                        .WithMany("Moeins")
                        .HasForeignKey("KolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MoeinKol");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_TafsilToGroup", b =>
                {
                    b.HasOne("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_TafsilGroup", "Group")
                        .WithMany("TafsilToGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Tafsil", "TafsilAccount")
                        .WithMany("TafsilToGroups")
                        .HasForeignKey("TafsilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("TafsilAccount");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Document", b =>
                {
                    b.HasOne("ParcelPro.Areas.Accounting.Models.Entities.Acc_FinancialPeriod", "DocPeriod")
                        .WithMany("Documents")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocPeriod");
                });

            modelBuilder.Entity("ParcelPro.Areas.AvaRasta.Models.Entities.License", b =>
                {
                    b.HasOne("ParcelPro.Models.Commercial.Customer", "Customer")
                        .WithMany("Licenses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.AvaRasta.Models.Entities.Module", "Module")
                        .WithMany("Licenses")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("ParcelPro.Areas.Commercial.Models.Entities.com_Invoice", b =>
                {
                    b.HasOne("Party", "InvoiceParty")
                        .WithMany("Invoices")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvoiceParty");
                });

            modelBuilder.Entity("ParcelPro.Areas.Commercial.Models.Entities.com_InvoiceItem", b =>
                {
                    b.HasOne("ParcelPro.Areas.Commercial.Models.Entities.com_Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Product", "Product")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Branch", b =>
                {
                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_Representative", "BranchRepresentative")
                        .WithMany("RepresentativeBranches")
                        .HasForeignKey("RepresentativeId");

                    b.Navigation("BranchRepresentative");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Representative", b =>
                {
                    b.HasOne("Party", "Person")
                        .WithOne("Representative")
                        .HasForeignKey("ParcelPro.Areas.Courier.Models.Entities.Cu_Representative", "PartyId");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ParcelPro.Areas.Treasury.Models.Entities.kh_BankAccount", b =>
                {
                    b.HasOne("ParcelPro.Areas.Treasury.Models.Entities.kh_Bank", "Bank")
                        .WithMany("BankAccounts")
                        .HasForeignKey("BankId");

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Inventory", b =>
                {
                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_InventoryTransaction", b =>
                {
                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Warehouse", "DestinationWarehouse")
                        .WithMany()
                        .HasForeignKey("DestinationWarehouseId");

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Warehouse", "SourceWarehouse")
                        .WithMany()
                        .HasForeignKey("SourceWarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseDocument", "WarehouseDocument")
                        .WithMany()
                        .HasForeignKey("WarehouseDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationWarehouse");

                    b.Navigation("Product");

                    b.Navigation("SourceWarehouse");

                    b.Navigation("UnitOfMeasure");

                    b.Navigation("WarehouseDocument");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Product", b =>
                {
                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_UnitOfMeasure", "BaseUnit")
                        .WithMany("Products")
                        .HasForeignKey("BaseUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_UnitOfMeasure", "PakageUnit")
                        .WithMany("PakageProducts")
                        .HasForeignKey("PakageCountId");

                    b.Navigation("BaseUnit");

                    b.Navigation("PakageUnit");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_ProductCategory", b =>
                {
                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_ProductCategory", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_ProductUnit", b =>
                {
                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Product", "Product")
                        .WithMany("ProductUnits")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_UnitOfMeasure", "UnitOfMeasure")
                        .WithMany("ProductUnits")
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("UnitOfMeasure");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseDocument", b =>
                {
                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Warehouse", "DestinationWarehouse")
                        .WithMany()
                        .HasForeignKey("DestinationWarehouseId");

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Warehouse", "SourceWarehouse")
                        .WithMany("WarehouseDocuments")
                        .HasForeignKey("SourceWarehouseId");

                    b.Navigation("DestinationWarehouse");

                    b.Navigation("SourceWarehouse");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseDocumentItem", b =>
                {
                    b.HasOne("ParcelPro.Areas.Commercial.Models.Entities.com_InvoiceItem", "InvoiceItem")
                        .WithMany()
                        .HasForeignKey("InvoiceItemId");

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Product", "Product")
                        .WithMany("WarehouseDocumentItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseDocument", "WarehouseDocument")
                        .WithMany("DocumentItems")
                        .HasForeignKey("WarehouseDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvoiceItem");

                    b.Navigation("Location");

                    b.Navigation("Product");

                    b.Navigation("WarehouseDocument");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseLocation", b =>
                {
                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseLocation", "ParentLocation")
                        .WithMany("SubLocations")
                        .HasForeignKey("ParentLocationId");

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Warehouse", "Warehouse")
                        .WithMany("WarehouseLocations")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentLocation");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.PartyRepresentative", b =>
                {
                    b.HasOne("Party", "Party")
                        .WithMany("PartyRepresentatives")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Party", "Representative")
                        .WithMany()
                        .HasForeignKey("RepresentativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");

                    b.Navigation("Representative");
                });

            modelBuilder.Entity("ParcelPro.Models.Identity.AppIdentityUser", b =>
                {
                    b.HasOne("ParcelPro.Models.Commercial.Customer", "Customer")
                        .WithMany("CustomerUsers")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ParcelPro.Models.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ParcelPro.Models.Identity.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ParcelPro.Models.Identity.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ParcelPro.Models.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Models.Identity.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ParcelPro.Models.Identity.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Party", b =>
                {
                    b.HasOne("ParcelPro.Models.Commercial.Customer", "PartyCustomer")
                        .WithMany("CustomerParties")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Models.Commercial.TaxPayerType", "PayerType")
                        .WithMany("Parties")
                        .HasForeignKey("TaxPayerType");

                    b.Navigation("PartyCustomer");

                    b.Navigation("PayerType");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Group", b =>
                {
                    b.Navigation("Kols");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Kol", b =>
                {
                    b.Navigation("Moeins");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Moein", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Tafsil", b =>
                {
                    b.Navigation("TafsilToGroups");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_TafsilGroup", b =>
                {
                    b.Navigation("TafsilToGroups");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Document", b =>
                {
                    b.Navigation("DocArticles");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_FinancialPeriod", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("ParcelPro.Areas.AvaRasta.Models.Entities.Module", b =>
                {
                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("ParcelPro.Areas.Commercial.Models.Entities.com_Invoice", b =>
                {
                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Representative", b =>
                {
                    b.Navigation("RepresentativeBranches");
                });

            modelBuilder.Entity("ParcelPro.Areas.Treasury.Models.Entities.kh_Bank", b =>
                {
                    b.Navigation("BankAccounts");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Product", b =>
                {
                    b.Navigation("InvoiceItems");

                    b.Navigation("ProductUnits");

                    b.Navigation("WarehouseDocumentItems");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_ProductCategory", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_UnitOfMeasure", b =>
                {
                    b.Navigation("PakageProducts");

                    b.Navigation("ProductUnits");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Warehouse", b =>
                {
                    b.Navigation("WarehouseDocuments");

                    b.Navigation("WarehouseLocations");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseDocument", b =>
                {
                    b.Navigation("DocumentItems");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseLocation", b =>
                {
                    b.Navigation("SubLocations");
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.Customer", b =>
                {
                    b.Navigation("CustomerParties");

                    b.Navigation("CustomerUsers");

                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.TaxPayerType", b =>
                {
                    b.Navigation("Parties");
                });

            modelBuilder.Entity("Party", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("PartyRepresentatives");

                    b.Navigation("Representative");
                });
#pragma warning restore 612, 618
        }
    }
}
