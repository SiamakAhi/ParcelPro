// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParcelPro.Models;

#nullable disable

namespace ParcelPro.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250310122136_AddFinancialModel")]
    partial class AddFinancialModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppIdentityUserAppRole", b =>
                {
                    b.Property<string>("RolesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("AppIdentityUserAppRole");
                });

            modelBuilder.Entity("Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "1",
                            Name = "دلار آمریکا"
                        },
                        new
                        {
                            Id = 2,
                            Code = "2",
                            Name = "یورو"
                        },
                        new
                        {
                            Id = 3,
                            Code = "3",
                            Name = "درهم امارات"
                        },
                        new
                        {
                            Id = 4,
                            Code = "4",
                            Name = "ریال عمان"
                        },
                        new
                        {
                            Id = 5,
                            Code = "5",
                            Name = "دینار کویت"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountantRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("ArchiveCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Bed")
                        .HasColumnType("bigint");

                    b.Property<long>("Bes")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DocId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EditorUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInternalTransaction")
                        .HasColumnType("bit");

                    b.Property<int?>("KolId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MoeinId")
                        .HasColumnType("int");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RowNumber")
                        .HasColumnType("int");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Tafsil4Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Tafsil4Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Tafsil5Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Tafsil5Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Tafsil6Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Tafsil6Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Tafsil7Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Tafsil7Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Tafsil8Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Tafsil8Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocId");

                    b.HasIndex("MoeinId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Acc_Articles");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Group", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("AltGroupCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("GroupType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("bit");

                    b.Property<short>("Order")
                        .HasColumnType("smallint");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<short>("TypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Acc_Coding_Groups");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Kol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("GroupId")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("bit");

                    b.Property<string>("KolCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Nature")
                        .HasColumnType("smallint");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<short>("TypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Acc_Coding_Kols");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Moein", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCurrencyAccount")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("bit");

                    b.Property<int>("KolId")
                        .HasColumnType("int");

                    b.Property<string>("MoeinCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MoeinContraryNatureId")
                        .HasColumnType("int");

                    b.Property<string>("MoeinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Nature")
                        .HasColumnType("smallint");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Tafsil4_GroupIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tafsil5_GroupIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tafsil6_GroupIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tafsil7_GroupIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tafsil8_GroupIds")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KolId");

                    b.ToTable("Acc_Coding_Moeins");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Tafsil", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupsId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPerson")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Acc_Coding_Tafsils");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_TafsilGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPerson")
                        .HasColumnType("bit");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Acc_Coding_TafsilGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "مشتریان، تأمین کنندگان، کارمندان، شرکت های طرف قرارداد و ...",
                            GroupName = "اشخاص و شرکت ها",
                            IsEditable = false,
                            IsPerson = true
                        },
                        new
                        {
                            Id = 2,
                            GroupName = "بانک ها",
                            IsEditable = false,
                            IsPerson = false
                        },
                        new
                        {
                            Id = 3,
                            GroupName = "صندوق ها",
                            IsEditable = false,
                            IsPerson = false
                        },
                        new
                        {
                            Id = 4,
                            GroupName = "حساب های بانکی",
                            IsEditable = false,
                            IsPerson = false
                        },
                        new
                        {
                            Id = 5,
                            GroupName = "شعب",
                            IsEditable = false,
                            IsPerson = false
                        },
                        new
                        {
                            Id = 6,
                            GroupName = "نمایندگی ها",
                            IsEditable = false,
                            IsPerson = false
                        },
                        new
                        {
                            Id = 7,
                            GroupName = "همه",
                            IsEditable = false,
                            IsPerson = false
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_TafsilToGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<long>("TafsilId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("TafsilId");

                    b.ToTable("Acc_Coding_TafsilToGroups");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_CostCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("TafsilCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TafsilId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Acc_CostCenters");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_DocStatus", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Acc_DocStatuses");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Name = "یادداشت"
                        },
                        new
                        {
                            Id = (short)2,
                            Name = "ثبت موقت"
                        },
                        new
                        {
                            Id = (short)3,
                            Name = "ثبت دائم"
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_DocType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("DocTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Acc_DocTypes");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            DocTypeName = "سند روزانه"
                        },
                        new
                        {
                            Id = (short)2,
                            DocTypeName = "سند افتتاحیه"
                        },
                        new
                        {
                            Id = (short)3,
                            DocTypeName = "سند اختتامیه"
                        },
                        new
                        {
                            Id = (short)4,
                            DocTypeName = "سند بستن حسابهای موقت"
                        },
                        new
                        {
                            Id = (short)5,
                            DocTypeName = "سند بستن حسابهای دائم"
                        },
                        new
                        {
                            Id = (short)6,
                            DocTypeName = "سند طبقه بندی حسابها"
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AtfNumber")
                        .HasColumnType("int");

                    b.Property<int>("AutoDocNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DocDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocNumber")
                        .HasColumnType("int");

                    b.Property<string>("EditorUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<short>("StatusId")
                        .HasColumnType("smallint");

                    b.Property<int?>("SubsystemId")
                        .HasColumnType("int");

                    b.Property<long?>("SubsystemRef")
                        .HasColumnType("bigint");

                    b.Property<short>("TypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("PeriodId");

                    b.ToTable("Acc_Documents");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_FinancialPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("DefualtVatRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Acc_FinancialPeriods");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_MoadianReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountingStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuyerEconomicNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuyerIdentity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuyerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuyerPersonType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuyerTradeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractorContractNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlightType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FolderInsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasAccountingDoc")
                        .HasColumnType("bit");

                    b.Property<long>("InvoiceAmountWithoutVAT")
                        .HasColumnType("bigint");

                    b.Property<string>("InvoicePattern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("InvoiceSettlementBalance")
                        .HasColumnType("bigint");

                    b.Property<string>("InvoiceStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceSubject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSaleInvoice")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LimitStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NonAccountingStatusDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferenceInvoiceTaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReferringInvoiceIssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SellerBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellerContractNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("SettlementMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubscriptionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TotalInvoiceAmount")
                        .HasColumnType("bigint");

                    b.Property<long>("VAT")
                        .HasColumnType("bigint");

                    b.Property<string>("YearAndPeriod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Acc_ModianReports");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<short?>("AccLevel")
                        .HasColumnType("smallint");

                    b.Property<string>("Approver1Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Approver1Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Approver2Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Approver2Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BuyDiscountMoeinId")
                        .HasColumnType("int");

                    b.Property<bool>("BuyIsAutoGenerate")
                        .HasColumnType("bit");

                    b.Property<int?>("BuyMoeinId")
                        .HasColumnType("int");

                    b.Property<int?>("BuyPartyMoeinId")
                        .HasColumnType("int");

                    b.Property<int?>("BuyVatMoeinId")
                        .HasColumnType("int");

                    b.Property<short?>("DocPrintDefault")
                        .HasColumnType("smallint");

                    b.Property<bool>("MandatoryTafsil")
                        .HasColumnType("bit");

                    b.Property<bool>("PrintCreator")
                        .HasColumnType("bit");

                    b.Property<int?>("ReturnToBuyMoeinId")
                        .HasColumnType("int");

                    b.Property<int?>("ReturnToSaleMoeinId")
                        .HasColumnType("int");

                    b.Property<bool>("SaleIsAutoGenerate")
                        .HasColumnType("bit");

                    b.Property<int?>("SaleVatMoeinId")
                        .HasColumnType("int");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ShowAllTafsil")
                        .HasColumnType("bit");

                    b.Property<bool>("WarehouseIsAutoGenerate")
                        .HasColumnType("bit");

                    b.Property<int?>("WarehouseMoeinId")
                        .HasColumnType("int");

                    b.Property<int?>("saleDiscountMoeinId")
                        .HasColumnType("int");

                    b.Property<int?>("saleMoeinId")
                        .HasColumnType("int");

                    b.Property<int?>("salePartyMoeinId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Acc_Settings");
                });

            modelBuilder.Entity("ParcelPro.Areas.AvaRasta.Models.Entities.License", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Licenses");
                });

            modelBuilder.Entity("ParcelPro.Areas.AvaRasta.Models.Entities.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("ParcelPro.Areas.Commercial.Models.Entities.com_Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ArchiveRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditorUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FinancePeriodId")
                        .HasColumnType("int");

                    b.Property<long>("InvoiceAutoNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InvoiceSubject")
                        .HasColumnType("int");

                    b.Property<short>("InvoiceType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PartyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("int");

                    b.Property<int>("SettlementTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TaxInvoiceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Visitor")
                        .HasColumnType("bigint");

                    b.Property<short?>("VisitorPercent")
                        .HasColumnType("smallint");

                    b.Property<bool>("flag")
                        .HasColumnType("bit");

                    b.Property<int?>("projectId")
                        .HasColumnType("int");

                    b.Property<short>("status")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.HasIndex("projectId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("ParcelPro.Areas.Commercial.Models.Entities.com_InvoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EditorUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PriceAfterDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceBeForDescount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("QuantityInBaseUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QuantityInPakageUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QuantityInPerPakage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VatPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VatRate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_BillCost", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<Guid>("BillOfLadingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConsignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CostTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BillOfLadingId");

                    b.HasIndex("ConsignmentId");

                    b.HasIndex("CostTypeId");

                    b.ToTable("Cu_BillCosts");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_BillOfLading", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("BillOfLadingStatusId")
                        .HasColumnType("smallint");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeliveredCount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DestinationHubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuanceDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("IssuanceTime")
                        .HasColumnType("time");

                    b.Property<string>("LastStatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OriginBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OriginHubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReceiverAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ReceiverId")
                        .HasColumnType("bigint");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("SenderAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<short?>("SettelmentType")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WaybillNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BillOfLadingStatusId");

                    b.HasIndex("DestinationHubId");

                    b.HasIndex("OriginBranchId");

                    b.HasIndex("OriginHubId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("RouteId");

                    b.HasIndex("SenderId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Cu_BillOfLadings");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_BillOfLadingCostItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountMoeinId")
                        .HasColumnType("int");

                    b.Property<long?>("AccountTafsilId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CostCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForBillOfLading")
                        .HasColumnType("bit");

                    b.Property<bool>("ForConsignment")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAutoAdded")
                        .HasColumnType("bit");

                    b.Property<short>("RateImpactTypeCode")
                        .HasColumnType("smallint");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Cu_BillOfLadingCostItems");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_BillOfLadingStatus", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SendNotificationToCustomer")
                        .HasColumnType("bit");

                    b.Property<bool>("SendNotificationToOperations")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Cu_BillOfLadingStatuses");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Code = "1",
                            Name = "یادداشت",
                            SendNotificationToCustomer = true,
                            SendNotificationToOperations = true
                        },
                        new
                        {
                            Id = (short)2,
                            Code = "2",
                            Name = "جدید",
                            SendNotificationToCustomer = true,
                            SendNotificationToOperations = true
                        },
                        new
                        {
                            Id = (short)3,
                            Code = "3",
                            Name = "در حال جمع آوری",
                            SendNotificationToCustomer = true,
                            SendNotificationToOperations = true
                        },
                        new
                        {
                            Id = (short)4,
                            Code = "4",
                            Name = "ورود به هاب مبدأ",
                            SendNotificationToCustomer = true,
                            SendNotificationToOperations = true
                        },
                        new
                        {
                            Id = (short)5,
                            Code = "5",
                            Name = "آماده رهسپاری",
                            SendNotificationToCustomer = true,
                            SendNotificationToOperations = true
                        },
                        new
                        {
                            Id = (short)6,
                            Code = "6",
                            Name = "در حال ارسال به شهر مقصد",
                            SendNotificationToCustomer = true,
                            SendNotificationToOperations = true
                        },
                        new
                        {
                            Id = (short)7,
                            Code = "7",
                            Name = "ورودد به هاب مقصد",
                            SendNotificationToCustomer = true,
                            SendNotificationToOperations = true
                        },
                        new
                        {
                            Id = (short)8,
                            Code = "8",
                            Name = "در حال توزیع",
                            SendNotificationToCustomer = true,
                            SendNotificationToOperations = true
                        },
                        new
                        {
                            Id = (short)9,
                            Code = "9",
                            Name = "تحویل شد",
                            SendNotificationToCustomer = true,
                            SendNotificationToOperations = true
                        },
                        new
                        {
                            Id = (short)10,
                            Code = "10",
                            Name = "در حال برکشت به فرستنده",
                            SendNotificationToCustomer = true,
                            SendNotificationToOperations = true
                        },
                        new
                        {
                            Id = (short)11,
                            Code = "11",
                            Name = "برگشت شد",
                            SendNotificationToCustomer = true,
                            SendNotificationToOperations = true
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchManager")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchManagerPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("BranchTypeId")
                        .HasColumnType("smallint");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<decimal?>("CommissionPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("Cu_RepresentativeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBillOfLadingIssuer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExternalBLIssuer")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHub")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIntercityFleet")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInternalBLIssuer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOwnership")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUrbanFleet")
                        .HasColumnType("bit");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("OldBranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldDistRepName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OpeningDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RenewalDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RepresentativeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("TafsilId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Cu_RepresentativeId");

                    b.HasIndex("HubId");

                    b.HasIndex("TafsilId");

                    b.ToTable("Cu_Branch");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_BranchUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBLIssuerDistributor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDispatchVehicle")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDistCollectManager")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExternalBLIssuer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInternalBLIssuer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupervisor")
                        .HasColumnType("bit");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("sellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Cu_BranchUser");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Consignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BillOfLadingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CargoFare")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("CreatedAtTime")
                        .HasColumnType("time");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Discount")
                        .HasColumnType("bigint");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<float>("Length")
                        .HasColumnType("real");

                    b.Property<short>("NatureTypeId")
                        .HasColumnType("smallint");

                    b.Property<long?>("PackagetypeId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("ReceiverSignature")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RecipientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("ServiceInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TotalCostPrice")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalPrice")
                        .HasColumnType("bigint");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.Property<long>("VatPrice")
                        .HasColumnType("bigint");

                    b.Property<float>("VatRate")
                        .HasColumnType("real");

                    b.Property<float>("Volume")
                        .HasColumnType("real");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.Property<float>("Width")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("BillOfLadingId");

                    b.HasIndex("NatureTypeId");

                    b.ToTable("Cu_Consignments");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_ConsignmentNature", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAirTransportable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGroundTransportable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("RateImpactTypeId")
                        .HasColumnType("smallint");

                    b.Property<decimal>("RateImpactValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RateImpactTypeId");

                    b.ToTable("Cu_ConsignmentNatures");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_FinancialTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("AccountPartyId")
                        .HasColumnType("bigint");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<long>("Bed")
                        .HasColumnType("bigint");

                    b.Property<long>("Bes")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("BillOfLadingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<short>("OperationId")
                        .HasColumnType("smallint");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<int>("SettlementTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("TransactionTime")
                        .HasColumnType("time");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccountPartyId");

                    b.HasIndex("BillOfLadingId");

                    b.HasIndex("BranchId");

                    b.HasIndex("OperationId");

                    b.HasIndex("UserId");

                    b.ToTable("Cu_FinancialTransactions");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_FinancialTransactionOperation", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<short>("Code")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cu_FinancialTransactionOperations");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Code = (short)1,
                            Name = "فروش بار"
                        },
                        new
                        {
                            Id = (short)2,
                            Code = (short)2,
                            Name = "فروش خدمات توزیع بار"
                        },
                        new
                        {
                            Id = (short)3,
                            Code = (short)3,
                            Name = "پورسانت فروش"
                        },
                        new
                        {
                            Id = (short)4,
                            Code = (short)4,
                            Name = "دریافت خدمات توزیع و جمع آوری بار"
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Hub", b =>
                {
                    b.Property<Guid>("HubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("HubAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HubName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.HasKey("HubId");

                    b.HasIndex("CityId");

                    b.ToTable("Cu_Hubs");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_InsuranceSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BaseCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("IncrementPerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("ThresholdAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Cu_InsuranceSettings");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Packaging", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("ForExport")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WarehouseProductCategoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseProductCategoryId");

                    b.ToTable("Cu_Packagings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ForExport = false,
                            Name = "پاکت",
                            PackageCode = "80",
                            Price = 0L,
                            SellerId = 3L
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_ParcelStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("ForReciver")
                        .HasColumnType("bit");

                    b.Property<bool>("ForSender")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cu_ParcelStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ForReciver = false,
                            ForSender = false,
                            Message = "مرسوله در حال صدور است.",
                            Status = "در حال صدور",
                            StatusCode = "1"
                        },
                        new
                        {
                            Id = 2,
                            ForReciver = false,
                            ForSender = false,
                            Message = "مرسوله در انتظار پرداخت است.",
                            Status = "در انتظار پرداخت",
                            StatusCode = "2"
                        },
                        new
                        {
                            Id = 3,
                            ForReciver = false,
                            ForSender = false,
                            Message = "مرسوله در انتظار جمع آوری است.",
                            Status = "در انتظار جمع آوری",
                            StatusCode = "3"
                        },
                        new
                        {
                            Id = 4,
                            ForReciver = false,
                            ForSender = false,
                            Message = "مرسوله در حال جمع آوری است.",
                            Status = "در حال جمع آوری",
                            StatusCode = "4"
                        },
                        new
                        {
                            Id = 5,
                            ForReciver = false,
                            ForSender = false,
                            Message = "مرسوله به هاب مبدأ وارد شده است.",
                            Status = "تأیید ورود به هاب مبدأ",
                            StatusCode = "5"
                        },
                        new
                        {
                            Id = 6,
                            ForReciver = false,
                            ForSender = false,
                            Message = "مرسوله در حال ارسال به هاب شهر مقصد است.",
                            Status = "در حال ارسال به هاب شهر مقصد",
                            StatusCode = "6"
                        },
                        new
                        {
                            Id = 7,
                            ForReciver = false,
                            ForSender = false,
                            Message = "مرسوله به هاب شهر مقصد وارد شده است.",
                            Status = "تأیید ورود به هاب شهر مقصد",
                            StatusCode = "7"
                        },
                        new
                        {
                            Id = 8,
                            ForReciver = false,
                            ForSender = false,
                            Message = "مرسوله آماده توزیع است و منتظر تحویل به سفیر است.",
                            Status = "آماده توزیع (در انتظار تحویل به سفیر)",
                            StatusCode = "8"
                        },
                        new
                        {
                            Id = 9,
                            ForReciver = false,
                            ForSender = false,
                            Message = "مرسوله به سفیر تحویل شده است و در حال ارسال به گیرنده است.",
                            Status = "تحویل سفیر جهت تحویل به گیرنده",
                            StatusCode = "9"
                        },
                        new
                        {
                            Id = 10,
                            ForReciver = false,
                            ForSender = false,
                            Message = "مرسوله در انتظار پرداخت توسط گیرنده است.",
                            Status = "در انتظار پرداخت توسط گیرنده",
                            StatusCode = "10"
                        },
                        new
                        {
                            Id = 11,
                            ForReciver = false,
                            ForSender = false,
                            Message = "مرسوله با موفقیت به گیرنده تحویل داده شد.",
                            Status = "مرسوله تحویل گیرنده شد",
                            StatusCode = "11"
                        },
                        new
                        {
                            Id = 12,
                            ForReciver = false,
                            ForSender = false,
                            Message = "مرسوله به هاب مقصد برگشت داده شده است.",
                            Status = "برگشت به هاب مقصد",
                            StatusCode = "12"
                        },
                        new
                        {
                            Id = 13,
                            ForReciver = false,
                            ForSender = false,
                            Message = "مرسوله مفقود شده است.",
                            Status = "مفقود شده",
                            StatusCode = "13"
                        },
                        new
                        {
                            Id = 14,
                            ForReciver = false,
                            ForSender = false,
                            Message = "مرسوله فاسد شده است.",
                            Status = "فاسد شده",
                            StatusCode = "14"
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_ParcelTracking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("BillOfLadingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BillOfLadingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParcelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ShowInCustomerTracking")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInOperationsTracking")
                        .HasColumnType("bit");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Cu_ParcelTrackings");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_RateBaseKValue", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<long>("KValue")
                        .HasColumnType("bigint");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Cu_RateBaseKValues");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            KValue = 10000L,
                            SellerId = 3L
                        },
                        new
                        {
                            Id = (short)2,
                            KValue = 15000L,
                            SellerId = 120L
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_RateImpactType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("RateImpactTypeCode")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Cu_RateImpactTypes");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Name = "ثابت",
                            RateImpactTypeCode = (short)1
                        },
                        new
                        {
                            Id = (short)2,
                            Name = "درصداز کل بارنامه",
                            RateImpactTypeCode = (short)2
                        },
                        new
                        {
                            Id = (short)3,
                            Name = "درصد از مبلغ حمل بار",
                            RateImpactTypeCode = (short)3
                        },
                        new
                        {
                            Id = (short)4,
                            Name = "محاسبه توسط کاربر",
                            RateImpactTypeCode = (short)4
                        },
                        new
                        {
                            Id = (short)5,
                            Name = "محاسبه سیستمی",
                            RateImpactTypeCode = (short)4
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_RateWeightRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Courier_WeightFactorPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("EndWeight")
                        .HasColumnType("float");

                    b.Property<decimal>("IATA_WeightFactorPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("StartWeight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Cu_RateWeightRanges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Courier_WeightFactorPercent = 0m,
                            EndWeight = 0.5,
                            IATA_WeightFactorPercent = 0m,
                            StartWeight = 0.001
                        },
                        new
                        {
                            Id = 2,
                            Courier_WeightFactorPercent = 0m,
                            EndWeight = 1.0,
                            IATA_WeightFactorPercent = 0m,
                            StartWeight = 0.501
                        },
                        new
                        {
                            Id = 3,
                            Courier_WeightFactorPercent = 0m,
                            EndWeight = 1.5,
                            IATA_WeightFactorPercent = 0m,
                            StartWeight = 1.0009999999999999
                        },
                        new
                        {
                            Id = 4,
                            Courier_WeightFactorPercent = 0m,
                            EndWeight = 2.0,
                            IATA_WeightFactorPercent = 0m,
                            StartWeight = 1.5009999999999999
                        },
                        new
                        {
                            Id = 5,
                            Courier_WeightFactorPercent = 5m,
                            EndWeight = 2.5,
                            IATA_WeightFactorPercent = 5m,
                            StartWeight = 2.0009999999999999
                        },
                        new
                        {
                            Id = 6,
                            Courier_WeightFactorPercent = 10m,
                            EndWeight = 3.0,
                            IATA_WeightFactorPercent = 10m,
                            StartWeight = 2.5009999999999999
                        },
                        new
                        {
                            Id = 7,
                            Courier_WeightFactorPercent = 15m,
                            EndWeight = 3.5,
                            IATA_WeightFactorPercent = 15m,
                            StartWeight = 3.0009999999999999
                        },
                        new
                        {
                            Id = 8,
                            Courier_WeightFactorPercent = 20m,
                            EndWeight = 4.0,
                            IATA_WeightFactorPercent = 20m,
                            StartWeight = 3.5009999999999999
                        },
                        new
                        {
                            Id = 9,
                            Courier_WeightFactorPercent = 25m,
                            EndWeight = 4.5,
                            IATA_WeightFactorPercent = 25m,
                            StartWeight = 4.0010000000000003
                        },
                        new
                        {
                            Id = 10,
                            Courier_WeightFactorPercent = 30m,
                            EndWeight = 5.0,
                            IATA_WeightFactorPercent = 30m,
                            StartWeight = 4.5010000000000003
                        },
                        new
                        {
                            Id = 11,
                            Courier_WeightFactorPercent = 35m,
                            EndWeight = 5.5,
                            IATA_WeightFactorPercent = 35m,
                            StartWeight = 5.0010000000000003
                        },
                        new
                        {
                            Id = 12,
                            Courier_WeightFactorPercent = 40m,
                            EndWeight = 6.0,
                            IATA_WeightFactorPercent = 40m,
                            StartWeight = 5.5010000000000003
                        },
                        new
                        {
                            Id = 13,
                            Courier_WeightFactorPercent = 45m,
                            EndWeight = 6.5,
                            IATA_WeightFactorPercent = 45m,
                            StartWeight = 6.0010000000000003
                        },
                        new
                        {
                            Id = 14,
                            Courier_WeightFactorPercent = 50m,
                            EndWeight = 7.0,
                            IATA_WeightFactorPercent = 50m,
                            StartWeight = 6.5010000000000003
                        },
                        new
                        {
                            Id = 15,
                            Courier_WeightFactorPercent = 55m,
                            EndWeight = 7.5,
                            IATA_WeightFactorPercent = 55m,
                            StartWeight = 7.0010000000000003
                        },
                        new
                        {
                            Id = 16,
                            Courier_WeightFactorPercent = 60m,
                            EndWeight = 8.0,
                            IATA_WeightFactorPercent = 60m,
                            StartWeight = 7.5010000000000003
                        },
                        new
                        {
                            Id = 17,
                            Courier_WeightFactorPercent = 65m,
                            EndWeight = 8.5,
                            IATA_WeightFactorPercent = 65m,
                            StartWeight = 8.0009999999999994
                        },
                        new
                        {
                            Id = 18,
                            Courier_WeightFactorPercent = 70m,
                            EndWeight = 9.0,
                            IATA_WeightFactorPercent = 70m,
                            StartWeight = 8.5009999999999994
                        },
                        new
                        {
                            Id = 19,
                            Courier_WeightFactorPercent = 75m,
                            EndWeight = 9.5,
                            IATA_WeightFactorPercent = 75m,
                            StartWeight = 9.0009999999999994
                        },
                        new
                        {
                            Id = 20,
                            Courier_WeightFactorPercent = 80m,
                            EndWeight = 10.0,
                            IATA_WeightFactorPercent = 80m,
                            StartWeight = 9.5009999999999994
                        },
                        new
                        {
                            Id = 21,
                            Courier_WeightFactorPercent = 85m,
                            EndWeight = 10.5,
                            IATA_WeightFactorPercent = 85m,
                            StartWeight = 10.000999999999999
                        },
                        new
                        {
                            Id = 22,
                            Courier_WeightFactorPercent = 90m,
                            EndWeight = 11.0,
                            IATA_WeightFactorPercent = 90m,
                            StartWeight = 10.500999999999999
                        },
                        new
                        {
                            Id = 23,
                            Courier_WeightFactorPercent = 95m,
                            EndWeight = 11.5,
                            IATA_WeightFactorPercent = 95m,
                            StartWeight = 11.000999999999999
                        },
                        new
                        {
                            Id = 24,
                            Courier_WeightFactorPercent = 100m,
                            EndWeight = 12.0,
                            IATA_WeightFactorPercent = 100m,
                            StartWeight = 11.500999999999999
                        },
                        new
                        {
                            Id = 25,
                            Courier_WeightFactorPercent = 105m,
                            EndWeight = 12.5,
                            IATA_WeightFactorPercent = 105m,
                            StartWeight = 12.000999999999999
                        },
                        new
                        {
                            Id = 26,
                            Courier_WeightFactorPercent = 110m,
                            EndWeight = 13.0,
                            IATA_WeightFactorPercent = 110m,
                            StartWeight = 12.500999999999999
                        },
                        new
                        {
                            Id = 27,
                            Courier_WeightFactorPercent = 115m,
                            EndWeight = 13.5,
                            IATA_WeightFactorPercent = 115m,
                            StartWeight = 13.000999999999999
                        },
                        new
                        {
                            Id = 28,
                            Courier_WeightFactorPercent = 120m,
                            EndWeight = 14.0,
                            IATA_WeightFactorPercent = 120m,
                            StartWeight = 13.500999999999999
                        },
                        new
                        {
                            Id = 29,
                            Courier_WeightFactorPercent = 125m,
                            EndWeight = 14.5,
                            IATA_WeightFactorPercent = 125m,
                            StartWeight = 14.000999999999999
                        },
                        new
                        {
                            Id = 30,
                            Courier_WeightFactorPercent = 130m,
                            EndWeight = 15.0,
                            IATA_WeightFactorPercent = 130m,
                            StartWeight = 14.500999999999999
                        },
                        new
                        {
                            Id = 31,
                            Courier_WeightFactorPercent = 135m,
                            EndWeight = 15.5,
                            IATA_WeightFactorPercent = 135m,
                            StartWeight = 15.000999999999999
                        },
                        new
                        {
                            Id = 32,
                            Courier_WeightFactorPercent = 140m,
                            EndWeight = 16.0,
                            IATA_WeightFactorPercent = 140m,
                            StartWeight = 15.500999999999999
                        },
                        new
                        {
                            Id = 33,
                            Courier_WeightFactorPercent = 145m,
                            EndWeight = 16.5,
                            IATA_WeightFactorPercent = 145m,
                            StartWeight = 16.001000000000001
                        },
                        new
                        {
                            Id = 34,
                            Courier_WeightFactorPercent = 150m,
                            EndWeight = 17.0,
                            IATA_WeightFactorPercent = 150m,
                            StartWeight = 16.501000000000001
                        },
                        new
                        {
                            Id = 35,
                            Courier_WeightFactorPercent = 155m,
                            EndWeight = 17.5,
                            IATA_WeightFactorPercent = 155m,
                            StartWeight = 17.001000000000001
                        },
                        new
                        {
                            Id = 36,
                            Courier_WeightFactorPercent = 160m,
                            EndWeight = 18.0,
                            IATA_WeightFactorPercent = 160m,
                            StartWeight = 17.501000000000001
                        },
                        new
                        {
                            Id = 37,
                            Courier_WeightFactorPercent = 165m,
                            EndWeight = 18.5,
                            IATA_WeightFactorPercent = 165m,
                            StartWeight = 18.001000000000001
                        },
                        new
                        {
                            Id = 38,
                            Courier_WeightFactorPercent = 170m,
                            EndWeight = 19.0,
                            IATA_WeightFactorPercent = 170m,
                            StartWeight = 18.501000000000001
                        },
                        new
                        {
                            Id = 39,
                            Courier_WeightFactorPercent = 175m,
                            EndWeight = 19.5,
                            IATA_WeightFactorPercent = 175m,
                            StartWeight = 19.001000000000001
                        },
                        new
                        {
                            Id = 40,
                            Courier_WeightFactorPercent = 180m,
                            EndWeight = 20.0,
                            IATA_WeightFactorPercent = 180m,
                            StartWeight = 19.501000000000001
                        },
                        new
                        {
                            Id = 41,
                            Courier_WeightFactorPercent = 185m,
                            EndWeight = 20.5,
                            IATA_WeightFactorPercent = 185m,
                            StartWeight = 20.001000000000001
                        },
                        new
                        {
                            Id = 42,
                            Courier_WeightFactorPercent = 190m,
                            EndWeight = 21.0,
                            IATA_WeightFactorPercent = 190m,
                            StartWeight = 20.501000000000001
                        },
                        new
                        {
                            Id = 43,
                            Courier_WeightFactorPercent = 195m,
                            EndWeight = 21.5,
                            IATA_WeightFactorPercent = 195m,
                            StartWeight = 21.001000000000001
                        },
                        new
                        {
                            Id = 44,
                            Courier_WeightFactorPercent = 200m,
                            EndWeight = 22.0,
                            IATA_WeightFactorPercent = 200m,
                            StartWeight = 21.501000000000001
                        },
                        new
                        {
                            Id = 45,
                            Courier_WeightFactorPercent = 205m,
                            EndWeight = 22.5,
                            IATA_WeightFactorPercent = 205m,
                            StartWeight = 22.001000000000001
                        },
                        new
                        {
                            Id = 46,
                            Courier_WeightFactorPercent = 210m,
                            EndWeight = 23.0,
                            IATA_WeightFactorPercent = 210m,
                            StartWeight = 22.501000000000001
                        },
                        new
                        {
                            Id = 47,
                            Courier_WeightFactorPercent = 215m,
                            EndWeight = 23.5,
                            IATA_WeightFactorPercent = 215m,
                            StartWeight = 23.001000000000001
                        },
                        new
                        {
                            Id = 48,
                            Courier_WeightFactorPercent = 220m,
                            EndWeight = 24.0,
                            IATA_WeightFactorPercent = 220m,
                            StartWeight = 23.501000000000001
                        },
                        new
                        {
                            Id = 49,
                            Courier_WeightFactorPercent = 225m,
                            EndWeight = 24.5,
                            IATA_WeightFactorPercent = 225m,
                            StartWeight = 24.001000000000001
                        },
                        new
                        {
                            Id = 50,
                            Courier_WeightFactorPercent = 230m,
                            EndWeight = 25.0,
                            IATA_WeightFactorPercent = 230m,
                            StartWeight = 24.501000000000001
                        },
                        new
                        {
                            Id = 51,
                            Courier_WeightFactorPercent = 235m,
                            EndWeight = 25.5,
                            IATA_WeightFactorPercent = 235m,
                            StartWeight = 25.001000000000001
                        },
                        new
                        {
                            Id = 52,
                            Courier_WeightFactorPercent = 240m,
                            EndWeight = 26.0,
                            IATA_WeightFactorPercent = 240m,
                            StartWeight = 25.501000000000001
                        },
                        new
                        {
                            Id = 53,
                            Courier_WeightFactorPercent = 245m,
                            EndWeight = 26.5,
                            IATA_WeightFactorPercent = 245m,
                            StartWeight = 26.001000000000001
                        },
                        new
                        {
                            Id = 54,
                            Courier_WeightFactorPercent = 250m,
                            EndWeight = 27.0,
                            IATA_WeightFactorPercent = 250m,
                            StartWeight = 26.501000000000001
                        },
                        new
                        {
                            Id = 55,
                            Courier_WeightFactorPercent = 255m,
                            EndWeight = 27.5,
                            IATA_WeightFactorPercent = 255m,
                            StartWeight = 27.001000000000001
                        },
                        new
                        {
                            Id = 56,
                            Courier_WeightFactorPercent = 260m,
                            EndWeight = 28.0,
                            IATA_WeightFactorPercent = 260m,
                            StartWeight = 27.501000000000001
                        },
                        new
                        {
                            Id = 57,
                            Courier_WeightFactorPercent = 265m,
                            EndWeight = 28.5,
                            IATA_WeightFactorPercent = 265m,
                            StartWeight = 28.001000000000001
                        },
                        new
                        {
                            Id = 58,
                            Courier_WeightFactorPercent = 270m,
                            EndWeight = 29.0,
                            IATA_WeightFactorPercent = 270m,
                            StartWeight = 28.501000000000001
                        },
                        new
                        {
                            Id = 59,
                            Courier_WeightFactorPercent = 275m,
                            EndWeight = 29.5,
                            IATA_WeightFactorPercent = 275m,
                            StartWeight = 29.001000000000001
                        },
                        new
                        {
                            Id = 60,
                            Courier_WeightFactorPercent = 280m,
                            EndWeight = 30.0,
                            IATA_WeightFactorPercent = 280m,
                            StartWeight = 29.501000000000001
                        },
                        new
                        {
                            Id = 61,
                            Courier_WeightFactorPercent = 285m,
                            EndWeight = 30.5,
                            IATA_WeightFactorPercent = 285m,
                            StartWeight = 30.001000000000001
                        },
                        new
                        {
                            Id = 62,
                            Courier_WeightFactorPercent = 290m,
                            EndWeight = 31.0,
                            IATA_WeightFactorPercent = 290m,
                            StartWeight = 30.501000000000001
                        },
                        new
                        {
                            Id = 63,
                            Courier_WeightFactorPercent = 295m,
                            EndWeight = 31.5,
                            IATA_WeightFactorPercent = 295m,
                            StartWeight = 31.001000000000001
                        },
                        new
                        {
                            Id = 64,
                            Courier_WeightFactorPercent = 300m,
                            EndWeight = 32.0,
                            IATA_WeightFactorPercent = 300m,
                            StartWeight = 31.501000000000001
                        },
                        new
                        {
                            Id = 65,
                            Courier_WeightFactorPercent = 305m,
                            EndWeight = 32.5,
                            IATA_WeightFactorPercent = 305m,
                            StartWeight = 32.000999999999998
                        },
                        new
                        {
                            Id = 66,
                            Courier_WeightFactorPercent = 310m,
                            EndWeight = 33.0,
                            IATA_WeightFactorPercent = 310m,
                            StartWeight = 32.500999999999998
                        },
                        new
                        {
                            Id = 67,
                            Courier_WeightFactorPercent = 315m,
                            EndWeight = 33.5,
                            IATA_WeightFactorPercent = 315m,
                            StartWeight = 33.000999999999998
                        },
                        new
                        {
                            Id = 68,
                            Courier_WeightFactorPercent = 320m,
                            EndWeight = 34.0,
                            IATA_WeightFactorPercent = 320m,
                            StartWeight = 33.500999999999998
                        },
                        new
                        {
                            Id = 69,
                            Courier_WeightFactorPercent = 325m,
                            EndWeight = 34.5,
                            IATA_WeightFactorPercent = 325m,
                            StartWeight = 34.000999999999998
                        },
                        new
                        {
                            Id = 70,
                            Courier_WeightFactorPercent = 330m,
                            EndWeight = 35.0,
                            IATA_WeightFactorPercent = 330m,
                            StartWeight = 34.500999999999998
                        },
                        new
                        {
                            Id = 71,
                            Courier_WeightFactorPercent = 335m,
                            EndWeight = 35.5,
                            IATA_WeightFactorPercent = 335m,
                            StartWeight = 35.000999999999998
                        },
                        new
                        {
                            Id = 72,
                            Courier_WeightFactorPercent = 340m,
                            EndWeight = 36.0,
                            IATA_WeightFactorPercent = 340m,
                            StartWeight = 35.500999999999998
                        },
                        new
                        {
                            Id = 73,
                            Courier_WeightFactorPercent = 345m,
                            EndWeight = 36.5,
                            IATA_WeightFactorPercent = 345m,
                            StartWeight = 36.000999999999998
                        },
                        new
                        {
                            Id = 74,
                            Courier_WeightFactorPercent = 350m,
                            EndWeight = 37.0,
                            IATA_WeightFactorPercent = 350m,
                            StartWeight = 36.500999999999998
                        },
                        new
                        {
                            Id = 75,
                            Courier_WeightFactorPercent = 355m,
                            EndWeight = 37.5,
                            IATA_WeightFactorPercent = 355m,
                            StartWeight = 37.000999999999998
                        },
                        new
                        {
                            Id = 76,
                            Courier_WeightFactorPercent = 360m,
                            EndWeight = 38.0,
                            IATA_WeightFactorPercent = 360m,
                            StartWeight = 37.500999999999998
                        },
                        new
                        {
                            Id = 77,
                            Courier_WeightFactorPercent = 365m,
                            EndWeight = 38.5,
                            IATA_WeightFactorPercent = 365m,
                            StartWeight = 38.000999999999998
                        },
                        new
                        {
                            Id = 78,
                            Courier_WeightFactorPercent = 370m,
                            EndWeight = 39.0,
                            IATA_WeightFactorPercent = 370m,
                            StartWeight = 38.500999999999998
                        },
                        new
                        {
                            Id = 79,
                            Courier_WeightFactorPercent = 375m,
                            EndWeight = 39.5,
                            IATA_WeightFactorPercent = 375m,
                            StartWeight = 39.000999999999998
                        },
                        new
                        {
                            Id = 80,
                            Courier_WeightFactorPercent = 380m,
                            EndWeight = 40.0,
                            IATA_WeightFactorPercent = 380m,
                            StartWeight = 39.500999999999998
                        },
                        new
                        {
                            Id = 81,
                            Courier_WeightFactorPercent = 385m,
                            EndWeight = 40.5,
                            IATA_WeightFactorPercent = 385m,
                            StartWeight = 40.000999999999998
                        },
                        new
                        {
                            Id = 82,
                            Courier_WeightFactorPercent = 390m,
                            EndWeight = 41.0,
                            IATA_WeightFactorPercent = 390m,
                            StartWeight = 40.500999999999998
                        },
                        new
                        {
                            Id = 83,
                            Courier_WeightFactorPercent = 395m,
                            EndWeight = 41.5,
                            IATA_WeightFactorPercent = 395m,
                            StartWeight = 41.000999999999998
                        },
                        new
                        {
                            Id = 84,
                            Courier_WeightFactorPercent = 400m,
                            EndWeight = 42.0,
                            IATA_WeightFactorPercent = 400m,
                            StartWeight = 41.500999999999998
                        },
                        new
                        {
                            Id = 85,
                            Courier_WeightFactorPercent = 405m,
                            EndWeight = 42.5,
                            IATA_WeightFactorPercent = 405m,
                            StartWeight = 42.000999999999998
                        },
                        new
                        {
                            Id = 86,
                            Courier_WeightFactorPercent = 410m,
                            EndWeight = 43.0,
                            IATA_WeightFactorPercent = 410m,
                            StartWeight = 42.500999999999998
                        },
                        new
                        {
                            Id = 87,
                            Courier_WeightFactorPercent = 415m,
                            EndWeight = 43.5,
                            IATA_WeightFactorPercent = 415m,
                            StartWeight = 43.000999999999998
                        },
                        new
                        {
                            Id = 88,
                            Courier_WeightFactorPercent = 420m,
                            EndWeight = 44.0,
                            IATA_WeightFactorPercent = 420m,
                            StartWeight = 43.500999999999998
                        },
                        new
                        {
                            Id = 89,
                            Courier_WeightFactorPercent = 425m,
                            EndWeight = 44.5,
                            IATA_WeightFactorPercent = 425m,
                            StartWeight = 44.000999999999998
                        },
                        new
                        {
                            Id = 90,
                            Courier_WeightFactorPercent = 430m,
                            EndWeight = 45.0,
                            IATA_WeightFactorPercent = 430m,
                            StartWeight = 44.500999999999998
                        },
                        new
                        {
                            Id = 91,
                            Courier_WeightFactorPercent = 435m,
                            EndWeight = 45.5,
                            IATA_WeightFactorPercent = 435m,
                            StartWeight = 45.000999999999998
                        },
                        new
                        {
                            Id = 92,
                            Courier_WeightFactorPercent = 440m,
                            EndWeight = 46.0,
                            IATA_WeightFactorPercent = 440m,
                            StartWeight = 45.500999999999998
                        },
                        new
                        {
                            Id = 93,
                            Courier_WeightFactorPercent = 445m,
                            EndWeight = 46.5,
                            IATA_WeightFactorPercent = 445m,
                            StartWeight = 46.000999999999998
                        },
                        new
                        {
                            Id = 94,
                            Courier_WeightFactorPercent = 450m,
                            EndWeight = 47.0,
                            IATA_WeightFactorPercent = 450m,
                            StartWeight = 46.500999999999998
                        },
                        new
                        {
                            Id = 95,
                            Courier_WeightFactorPercent = 455m,
                            EndWeight = 47.5,
                            IATA_WeightFactorPercent = 455m,
                            StartWeight = 47.000999999999998
                        },
                        new
                        {
                            Id = 96,
                            Courier_WeightFactorPercent = 460m,
                            EndWeight = 48.0,
                            IATA_WeightFactorPercent = 460m,
                            StartWeight = 47.500999999999998
                        },
                        new
                        {
                            Id = 97,
                            Courier_WeightFactorPercent = 465m,
                            EndWeight = 48.5,
                            IATA_WeightFactorPercent = 465m,
                            StartWeight = 48.000999999999998
                        },
                        new
                        {
                            Id = 98,
                            Courier_WeightFactorPercent = 470m,
                            EndWeight = 49.0,
                            IATA_WeightFactorPercent = 470m,
                            StartWeight = 48.500999999999998
                        },
                        new
                        {
                            Id = 99,
                            Courier_WeightFactorPercent = 475m,
                            EndWeight = 49.5,
                            IATA_WeightFactorPercent = 475m,
                            StartWeight = 49.000999999999998
                        },
                        new
                        {
                            Id = 100,
                            Courier_WeightFactorPercent = 480m,
                            EndWeight = 50.0,
                            IATA_WeightFactorPercent = 480m,
                            StartWeight = 49.500999999999998
                        },
                        new
                        {
                            Id = 101,
                            Courier_WeightFactorPercent = 485m,
                            EndWeight = 50.5,
                            IATA_WeightFactorPercent = 485m,
                            StartWeight = 50.000999999999998
                        },
                        new
                        {
                            Id = 102,
                            Courier_WeightFactorPercent = 490m,
                            EndWeight = 51.0,
                            IATA_WeightFactorPercent = 490m,
                            StartWeight = 50.500999999999998
                        },
                        new
                        {
                            Id = 103,
                            Courier_WeightFactorPercent = 495m,
                            EndWeight = 51.5,
                            IATA_WeightFactorPercent = 495m,
                            StartWeight = 51.000999999999998
                        },
                        new
                        {
                            Id = 104,
                            Courier_WeightFactorPercent = 500m,
                            EndWeight = 52.0,
                            IATA_WeightFactorPercent = 500m,
                            StartWeight = 51.500999999999998
                        },
                        new
                        {
                            Id = 105,
                            Courier_WeightFactorPercent = 505m,
                            EndWeight = 52.5,
                            IATA_WeightFactorPercent = 505m,
                            StartWeight = 52.000999999999998
                        },
                        new
                        {
                            Id = 106,
                            Courier_WeightFactorPercent = 510m,
                            EndWeight = 53.0,
                            IATA_WeightFactorPercent = 510m,
                            StartWeight = 52.500999999999998
                        },
                        new
                        {
                            Id = 107,
                            Courier_WeightFactorPercent = 515m,
                            EndWeight = 53.5,
                            IATA_WeightFactorPercent = 515m,
                            StartWeight = 53.000999999999998
                        },
                        new
                        {
                            Id = 108,
                            Courier_WeightFactorPercent = 520m,
                            EndWeight = 54.0,
                            IATA_WeightFactorPercent = 520m,
                            StartWeight = 53.500999999999998
                        },
                        new
                        {
                            Id = 109,
                            Courier_WeightFactorPercent = 525m,
                            EndWeight = 54.5,
                            IATA_WeightFactorPercent = 525m,
                            StartWeight = 54.000999999999998
                        },
                        new
                        {
                            Id = 110,
                            Courier_WeightFactorPercent = 530m,
                            EndWeight = 55.0,
                            IATA_WeightFactorPercent = 530m,
                            StartWeight = 54.500999999999998
                        },
                        new
                        {
                            Id = 111,
                            Courier_WeightFactorPercent = 535m,
                            EndWeight = 55.5,
                            IATA_WeightFactorPercent = 535m,
                            StartWeight = 55.000999999999998
                        },
                        new
                        {
                            Id = 112,
                            Courier_WeightFactorPercent = 540m,
                            EndWeight = 56.0,
                            IATA_WeightFactorPercent = 540m,
                            StartWeight = 55.500999999999998
                        },
                        new
                        {
                            Id = 113,
                            Courier_WeightFactorPercent = 545m,
                            EndWeight = 56.5,
                            IATA_WeightFactorPercent = 545m,
                            StartWeight = 56.000999999999998
                        },
                        new
                        {
                            Id = 114,
                            Courier_WeightFactorPercent = 550m,
                            EndWeight = 57.0,
                            IATA_WeightFactorPercent = 550m,
                            StartWeight = 56.500999999999998
                        },
                        new
                        {
                            Id = 115,
                            Courier_WeightFactorPercent = 555m,
                            EndWeight = 57.5,
                            IATA_WeightFactorPercent = 555m,
                            StartWeight = 57.000999999999998
                        },
                        new
                        {
                            Id = 116,
                            Courier_WeightFactorPercent = 560m,
                            EndWeight = 58.0,
                            IATA_WeightFactorPercent = 560m,
                            StartWeight = 57.500999999999998
                        },
                        new
                        {
                            Id = 117,
                            Courier_WeightFactorPercent = 565m,
                            EndWeight = 58.5,
                            IATA_WeightFactorPercent = 565m,
                            StartWeight = 58.000999999999998
                        },
                        new
                        {
                            Id = 118,
                            Courier_WeightFactorPercent = 570m,
                            EndWeight = 59.0,
                            IATA_WeightFactorPercent = 570m,
                            StartWeight = 58.500999999999998
                        },
                        new
                        {
                            Id = 119,
                            Courier_WeightFactorPercent = 575m,
                            EndWeight = 59.5,
                            IATA_WeightFactorPercent = 575m,
                            StartWeight = 59.000999999999998
                        },
                        new
                        {
                            Id = 120,
                            Courier_WeightFactorPercent = 580m,
                            EndWeight = 60.0,
                            IATA_WeightFactorPercent = 580m,
                            StartWeight = 59.500999999999998
                        },
                        new
                        {
                            Id = 121,
                            Courier_WeightFactorPercent = 585m,
                            EndWeight = 60.5,
                            IATA_WeightFactorPercent = 585m,
                            StartWeight = 60.000999999999998
                        },
                        new
                        {
                            Id = 122,
                            Courier_WeightFactorPercent = 590m,
                            EndWeight = 61.0,
                            IATA_WeightFactorPercent = 590m,
                            StartWeight = 60.500999999999998
                        },
                        new
                        {
                            Id = 123,
                            Courier_WeightFactorPercent = 595m,
                            EndWeight = 61.5,
                            IATA_WeightFactorPercent = 595m,
                            StartWeight = 61.000999999999998
                        },
                        new
                        {
                            Id = 124,
                            Courier_WeightFactorPercent = 600m,
                            EndWeight = 62.0,
                            IATA_WeightFactorPercent = 600m,
                            StartWeight = 61.500999999999998
                        },
                        new
                        {
                            Id = 125,
                            Courier_WeightFactorPercent = 605m,
                            EndWeight = 62.5,
                            IATA_WeightFactorPercent = 605m,
                            StartWeight = 62.000999999999998
                        },
                        new
                        {
                            Id = 126,
                            Courier_WeightFactorPercent = 610m,
                            EndWeight = 63.0,
                            IATA_WeightFactorPercent = 610m,
                            StartWeight = 62.500999999999998
                        },
                        new
                        {
                            Id = 127,
                            Courier_WeightFactorPercent = 615m,
                            EndWeight = 63.5,
                            IATA_WeightFactorPercent = 615m,
                            StartWeight = 63.000999999999998
                        },
                        new
                        {
                            Id = 128,
                            Courier_WeightFactorPercent = 620m,
                            EndWeight = 64.0,
                            IATA_WeightFactorPercent = 620m,
                            StartWeight = 63.500999999999998
                        },
                        new
                        {
                            Id = 129,
                            Courier_WeightFactorPercent = 625m,
                            EndWeight = 64.5,
                            IATA_WeightFactorPercent = 625m,
                            StartWeight = 64.001000000000005
                        },
                        new
                        {
                            Id = 130,
                            Courier_WeightFactorPercent = 630m,
                            EndWeight = 65.0,
                            IATA_WeightFactorPercent = 630m,
                            StartWeight = 64.501000000000005
                        },
                        new
                        {
                            Id = 131,
                            Courier_WeightFactorPercent = 635m,
                            EndWeight = 65.5,
                            IATA_WeightFactorPercent = 635m,
                            StartWeight = 65.001000000000005
                        },
                        new
                        {
                            Id = 132,
                            Courier_WeightFactorPercent = 640m,
                            EndWeight = 66.0,
                            IATA_WeightFactorPercent = 640m,
                            StartWeight = 65.501000000000005
                        },
                        new
                        {
                            Id = 133,
                            Courier_WeightFactorPercent = 645m,
                            EndWeight = 66.5,
                            IATA_WeightFactorPercent = 645m,
                            StartWeight = 66.001000000000005
                        },
                        new
                        {
                            Id = 134,
                            Courier_WeightFactorPercent = 650m,
                            EndWeight = 67.0,
                            IATA_WeightFactorPercent = 650m,
                            StartWeight = 66.501000000000005
                        },
                        new
                        {
                            Id = 135,
                            Courier_WeightFactorPercent = 655m,
                            EndWeight = 67.5,
                            IATA_WeightFactorPercent = 655m,
                            StartWeight = 67.001000000000005
                        },
                        new
                        {
                            Id = 136,
                            Courier_WeightFactorPercent = 660m,
                            EndWeight = 68.0,
                            IATA_WeightFactorPercent = 660m,
                            StartWeight = 67.501000000000005
                        },
                        new
                        {
                            Id = 137,
                            Courier_WeightFactorPercent = 665m,
                            EndWeight = 68.5,
                            IATA_WeightFactorPercent = 665m,
                            StartWeight = 68.001000000000005
                        },
                        new
                        {
                            Id = 138,
                            Courier_WeightFactorPercent = 670m,
                            EndWeight = 69.0,
                            IATA_WeightFactorPercent = 670m,
                            StartWeight = 68.501000000000005
                        },
                        new
                        {
                            Id = 139,
                            Courier_WeightFactorPercent = 675m,
                            EndWeight = 69.5,
                            IATA_WeightFactorPercent = 675m,
                            StartWeight = 69.001000000000005
                        },
                        new
                        {
                            Id = 140,
                            Courier_WeightFactorPercent = 680m,
                            EndWeight = 70.0,
                            IATA_WeightFactorPercent = 680m,
                            StartWeight = 69.501000000000005
                        },
                        new
                        {
                            Id = 141,
                            Courier_WeightFactorPercent = 685m,
                            EndWeight = 70.5,
                            IATA_WeightFactorPercent = 685m,
                            StartWeight = 70.001000000000005
                        },
                        new
                        {
                            Id = 142,
                            Courier_WeightFactorPercent = 690m,
                            EndWeight = 71.0,
                            IATA_WeightFactorPercent = 690m,
                            StartWeight = 70.501000000000005
                        },
                        new
                        {
                            Id = 143,
                            Courier_WeightFactorPercent = 695m,
                            EndWeight = 71.5,
                            IATA_WeightFactorPercent = 695m,
                            StartWeight = 71.001000000000005
                        },
                        new
                        {
                            Id = 144,
                            Courier_WeightFactorPercent = 700m,
                            EndWeight = 72.0,
                            IATA_WeightFactorPercent = 700m,
                            StartWeight = 71.501000000000005
                        },
                        new
                        {
                            Id = 145,
                            Courier_WeightFactorPercent = 705m,
                            EndWeight = 72.5,
                            IATA_WeightFactorPercent = 705m,
                            StartWeight = 72.001000000000005
                        },
                        new
                        {
                            Id = 146,
                            Courier_WeightFactorPercent = 710m,
                            EndWeight = 73.0,
                            IATA_WeightFactorPercent = 710m,
                            StartWeight = 72.501000000000005
                        },
                        new
                        {
                            Id = 147,
                            Courier_WeightFactorPercent = 715m,
                            EndWeight = 73.5,
                            IATA_WeightFactorPercent = 715m,
                            StartWeight = 73.001000000000005
                        },
                        new
                        {
                            Id = 148,
                            Courier_WeightFactorPercent = 720m,
                            EndWeight = 74.0,
                            IATA_WeightFactorPercent = 720m,
                            StartWeight = 73.501000000000005
                        },
                        new
                        {
                            Id = 149,
                            Courier_WeightFactorPercent = 725m,
                            EndWeight = 74.5,
                            IATA_WeightFactorPercent = 725m,
                            StartWeight = 74.001000000000005
                        },
                        new
                        {
                            Id = 150,
                            Courier_WeightFactorPercent = 730m,
                            EndWeight = 75.0,
                            IATA_WeightFactorPercent = 730m,
                            StartWeight = 74.501000000000005
                        },
                        new
                        {
                            Id = 151,
                            Courier_WeightFactorPercent = 735m,
                            EndWeight = 75.5,
                            IATA_WeightFactorPercent = 735m,
                            StartWeight = 75.001000000000005
                        },
                        new
                        {
                            Id = 152,
                            Courier_WeightFactorPercent = 740m,
                            EndWeight = 76.0,
                            IATA_WeightFactorPercent = 740m,
                            StartWeight = 75.501000000000005
                        },
                        new
                        {
                            Id = 153,
                            Courier_WeightFactorPercent = 745m,
                            EndWeight = 76.5,
                            IATA_WeightFactorPercent = 745m,
                            StartWeight = 76.001000000000005
                        },
                        new
                        {
                            Id = 154,
                            Courier_WeightFactorPercent = 750m,
                            EndWeight = 77.0,
                            IATA_WeightFactorPercent = 750m,
                            StartWeight = 76.501000000000005
                        },
                        new
                        {
                            Id = 155,
                            Courier_WeightFactorPercent = 755m,
                            EndWeight = 77.5,
                            IATA_WeightFactorPercent = 755m,
                            StartWeight = 77.001000000000005
                        },
                        new
                        {
                            Id = 156,
                            Courier_WeightFactorPercent = 760m,
                            EndWeight = 78.0,
                            IATA_WeightFactorPercent = 760m,
                            StartWeight = 77.501000000000005
                        },
                        new
                        {
                            Id = 157,
                            Courier_WeightFactorPercent = 765m,
                            EndWeight = 78.5,
                            IATA_WeightFactorPercent = 765m,
                            StartWeight = 78.001000000000005
                        },
                        new
                        {
                            Id = 158,
                            Courier_WeightFactorPercent = 770m,
                            EndWeight = 79.0,
                            IATA_WeightFactorPercent = 770m,
                            StartWeight = 78.501000000000005
                        },
                        new
                        {
                            Id = 159,
                            Courier_WeightFactorPercent = 775m,
                            EndWeight = 79.5,
                            IATA_WeightFactorPercent = 775m,
                            StartWeight = 79.001000000000005
                        },
                        new
                        {
                            Id = 160,
                            Courier_WeightFactorPercent = 780m,
                            EndWeight = 80.0,
                            IATA_WeightFactorPercent = 780m,
                            StartWeight = 79.501000000000005
                        },
                        new
                        {
                            Id = 161,
                            Courier_WeightFactorPercent = 785m,
                            EndWeight = 80.5,
                            IATA_WeightFactorPercent = 785m,
                            StartWeight = 80.001000000000005
                        },
                        new
                        {
                            Id = 162,
                            Courier_WeightFactorPercent = 790m,
                            EndWeight = 81.0,
                            IATA_WeightFactorPercent = 790m,
                            StartWeight = 80.501000000000005
                        },
                        new
                        {
                            Id = 163,
                            Courier_WeightFactorPercent = 795m,
                            EndWeight = 81.5,
                            IATA_WeightFactorPercent = 795m,
                            StartWeight = 81.001000000000005
                        },
                        new
                        {
                            Id = 164,
                            Courier_WeightFactorPercent = 800m,
                            EndWeight = 82.0,
                            IATA_WeightFactorPercent = 800m,
                            StartWeight = 81.501000000000005
                        },
                        new
                        {
                            Id = 165,
                            Courier_WeightFactorPercent = 805m,
                            EndWeight = 82.5,
                            IATA_WeightFactorPercent = 805m,
                            StartWeight = 82.001000000000005
                        },
                        new
                        {
                            Id = 166,
                            Courier_WeightFactorPercent = 810m,
                            EndWeight = 83.0,
                            IATA_WeightFactorPercent = 810m,
                            StartWeight = 82.501000000000005
                        },
                        new
                        {
                            Id = 167,
                            Courier_WeightFactorPercent = 815m,
                            EndWeight = 83.5,
                            IATA_WeightFactorPercent = 815m,
                            StartWeight = 83.001000000000005
                        },
                        new
                        {
                            Id = 168,
                            Courier_WeightFactorPercent = 820m,
                            EndWeight = 84.0,
                            IATA_WeightFactorPercent = 820m,
                            StartWeight = 83.501000000000005
                        },
                        new
                        {
                            Id = 169,
                            Courier_WeightFactorPercent = 825m,
                            EndWeight = 84.5,
                            IATA_WeightFactorPercent = 825m,
                            StartWeight = 84.001000000000005
                        },
                        new
                        {
                            Id = 170,
                            Courier_WeightFactorPercent = 830m,
                            EndWeight = 85.0,
                            IATA_WeightFactorPercent = 830m,
                            StartWeight = 84.501000000000005
                        },
                        new
                        {
                            Id = 171,
                            Courier_WeightFactorPercent = 835m,
                            EndWeight = 85.5,
                            IATA_WeightFactorPercent = 835m,
                            StartWeight = 85.001000000000005
                        },
                        new
                        {
                            Id = 172,
                            Courier_WeightFactorPercent = 840m,
                            EndWeight = 86.0,
                            IATA_WeightFactorPercent = 840m,
                            StartWeight = 85.501000000000005
                        },
                        new
                        {
                            Id = 173,
                            Courier_WeightFactorPercent = 845m,
                            EndWeight = 86.5,
                            IATA_WeightFactorPercent = 845m,
                            StartWeight = 86.001000000000005
                        },
                        new
                        {
                            Id = 174,
                            Courier_WeightFactorPercent = 850m,
                            EndWeight = 87.0,
                            IATA_WeightFactorPercent = 850m,
                            StartWeight = 86.501000000000005
                        },
                        new
                        {
                            Id = 175,
                            Courier_WeightFactorPercent = 855m,
                            EndWeight = 87.5,
                            IATA_WeightFactorPercent = 855m,
                            StartWeight = 87.001000000000005
                        },
                        new
                        {
                            Id = 176,
                            Courier_WeightFactorPercent = 860m,
                            EndWeight = 88.0,
                            IATA_WeightFactorPercent = 860m,
                            StartWeight = 87.501000000000005
                        },
                        new
                        {
                            Id = 177,
                            Courier_WeightFactorPercent = 865m,
                            EndWeight = 88.5,
                            IATA_WeightFactorPercent = 865m,
                            StartWeight = 88.001000000000005
                        },
                        new
                        {
                            Id = 178,
                            Courier_WeightFactorPercent = 870m,
                            EndWeight = 89.0,
                            IATA_WeightFactorPercent = 870m,
                            StartWeight = 88.501000000000005
                        },
                        new
                        {
                            Id = 179,
                            Courier_WeightFactorPercent = 875m,
                            EndWeight = 89.5,
                            IATA_WeightFactorPercent = 875m,
                            StartWeight = 89.001000000000005
                        },
                        new
                        {
                            Id = 180,
                            Courier_WeightFactorPercent = 880m,
                            EndWeight = 90.0,
                            IATA_WeightFactorPercent = 880m,
                            StartWeight = 89.501000000000005
                        },
                        new
                        {
                            Id = 181,
                            Courier_WeightFactorPercent = 885m,
                            EndWeight = 90.5,
                            IATA_WeightFactorPercent = 885m,
                            StartWeight = 90.001000000000005
                        },
                        new
                        {
                            Id = 182,
                            Courier_WeightFactorPercent = 890m,
                            EndWeight = 91.0,
                            IATA_WeightFactorPercent = 890m,
                            StartWeight = 90.501000000000005
                        },
                        new
                        {
                            Id = 183,
                            Courier_WeightFactorPercent = 895m,
                            EndWeight = 91.5,
                            IATA_WeightFactorPercent = 895m,
                            StartWeight = 91.001000000000005
                        },
                        new
                        {
                            Id = 184,
                            Courier_WeightFactorPercent = 900m,
                            EndWeight = 92.0,
                            IATA_WeightFactorPercent = 900m,
                            StartWeight = 91.501000000000005
                        },
                        new
                        {
                            Id = 185,
                            Courier_WeightFactorPercent = 905m,
                            EndWeight = 92.5,
                            IATA_WeightFactorPercent = 905m,
                            StartWeight = 92.001000000000005
                        },
                        new
                        {
                            Id = 186,
                            Courier_WeightFactorPercent = 910m,
                            EndWeight = 93.0,
                            IATA_WeightFactorPercent = 910m,
                            StartWeight = 92.501000000000005
                        },
                        new
                        {
                            Id = 187,
                            Courier_WeightFactorPercent = 915m,
                            EndWeight = 93.5,
                            IATA_WeightFactorPercent = 915m,
                            StartWeight = 93.001000000000005
                        },
                        new
                        {
                            Id = 188,
                            Courier_WeightFactorPercent = 920m,
                            EndWeight = 94.0,
                            IATA_WeightFactorPercent = 920m,
                            StartWeight = 93.501000000000005
                        },
                        new
                        {
                            Id = 189,
                            Courier_WeightFactorPercent = 925m,
                            EndWeight = 94.5,
                            IATA_WeightFactorPercent = 925m,
                            StartWeight = 94.001000000000005
                        },
                        new
                        {
                            Id = 190,
                            Courier_WeightFactorPercent = 930m,
                            EndWeight = 95.0,
                            IATA_WeightFactorPercent = 930m,
                            StartWeight = 94.501000000000005
                        },
                        new
                        {
                            Id = 191,
                            Courier_WeightFactorPercent = 935m,
                            EndWeight = 95.5,
                            IATA_WeightFactorPercent = 935m,
                            StartWeight = 95.001000000000005
                        },
                        new
                        {
                            Id = 192,
                            Courier_WeightFactorPercent = 940m,
                            EndWeight = 96.0,
                            IATA_WeightFactorPercent = 940m,
                            StartWeight = 95.501000000000005
                        },
                        new
                        {
                            Id = 193,
                            Courier_WeightFactorPercent = 945m,
                            EndWeight = 96.5,
                            IATA_WeightFactorPercent = 945m,
                            StartWeight = 96.001000000000005
                        },
                        new
                        {
                            Id = 194,
                            Courier_WeightFactorPercent = 950m,
                            EndWeight = 97.0,
                            IATA_WeightFactorPercent = 950m,
                            StartWeight = 96.501000000000005
                        },
                        new
                        {
                            Id = 195,
                            Courier_WeightFactorPercent = 955m,
                            EndWeight = 97.5,
                            IATA_WeightFactorPercent = 955m,
                            StartWeight = 97.001000000000005
                        },
                        new
                        {
                            Id = 196,
                            Courier_WeightFactorPercent = 960m,
                            EndWeight = 98.0,
                            IATA_WeightFactorPercent = 960m,
                            StartWeight = 97.501000000000005
                        },
                        new
                        {
                            Id = 197,
                            Courier_WeightFactorPercent = 965m,
                            EndWeight = 98.5,
                            IATA_WeightFactorPercent = 965m,
                            StartWeight = 98.001000000000005
                        },
                        new
                        {
                            Id = 198,
                            Courier_WeightFactorPercent = 970m,
                            EndWeight = 99.0,
                            IATA_WeightFactorPercent = 970m,
                            StartWeight = 98.501000000000005
                        },
                        new
                        {
                            Id = 199,
                            Courier_WeightFactorPercent = 975m,
                            EndWeight = 99.5,
                            IATA_WeightFactorPercent = 975m,
                            StartWeight = 99.001000000000005
                        },
                        new
                        {
                            Id = 200,
                            Courier_WeightFactorPercent = 980m,
                            EndWeight = 100.0,
                            IATA_WeightFactorPercent = 980m,
                            StartWeight = 99.501000000000005
                        },
                        new
                        {
                            Id = 201,
                            Courier_WeightFactorPercent = 985m,
                            EndWeight = 100.5,
                            IATA_WeightFactorPercent = 985m,
                            StartWeight = 100.001
                        },
                        new
                        {
                            Id = 202,
                            Courier_WeightFactorPercent = 990m,
                            EndWeight = 101.0,
                            IATA_WeightFactorPercent = 990m,
                            StartWeight = 100.501
                        },
                        new
                        {
                            Id = 203,
                            Courier_WeightFactorPercent = 995m,
                            EndWeight = 101.5,
                            IATA_WeightFactorPercent = 995m,
                            StartWeight = 101.001
                        },
                        new
                        {
                            Id = 204,
                            Courier_WeightFactorPercent = 1000m,
                            EndWeight = 102.0,
                            IATA_WeightFactorPercent = 1000m,
                            StartWeight = 101.501
                        },
                        new
                        {
                            Id = 205,
                            Courier_WeightFactorPercent = 1005m,
                            EndWeight = 102.5,
                            IATA_WeightFactorPercent = 1005m,
                            StartWeight = 102.001
                        },
                        new
                        {
                            Id = 206,
                            Courier_WeightFactorPercent = 1010m,
                            EndWeight = 103.0,
                            IATA_WeightFactorPercent = 1010m,
                            StartWeight = 102.501
                        },
                        new
                        {
                            Id = 207,
                            Courier_WeightFactorPercent = 1015m,
                            EndWeight = 103.5,
                            IATA_WeightFactorPercent = 1015m,
                            StartWeight = 103.001
                        },
                        new
                        {
                            Id = 208,
                            Courier_WeightFactorPercent = 1020m,
                            EndWeight = 104.0,
                            IATA_WeightFactorPercent = 1020m,
                            StartWeight = 103.501
                        },
                        new
                        {
                            Id = 209,
                            Courier_WeightFactorPercent = 1025m,
                            EndWeight = 104.5,
                            IATA_WeightFactorPercent = 1025m,
                            StartWeight = 104.001
                        },
                        new
                        {
                            Id = 210,
                            Courier_WeightFactorPercent = 1030m,
                            EndWeight = 105.0,
                            IATA_WeightFactorPercent = 1030m,
                            StartWeight = 104.501
                        },
                        new
                        {
                            Id = 211,
                            Courier_WeightFactorPercent = 1035m,
                            EndWeight = 105.5,
                            IATA_WeightFactorPercent = 1035m,
                            StartWeight = 105.001
                        },
                        new
                        {
                            Id = 212,
                            Courier_WeightFactorPercent = 1040m,
                            EndWeight = 106.0,
                            IATA_WeightFactorPercent = 1040m,
                            StartWeight = 105.501
                        },
                        new
                        {
                            Id = 213,
                            Courier_WeightFactorPercent = 1045m,
                            EndWeight = 106.5,
                            IATA_WeightFactorPercent = 1045m,
                            StartWeight = 106.001
                        },
                        new
                        {
                            Id = 214,
                            Courier_WeightFactorPercent = 1050m,
                            EndWeight = 107.0,
                            IATA_WeightFactorPercent = 1050m,
                            StartWeight = 106.501
                        },
                        new
                        {
                            Id = 215,
                            Courier_WeightFactorPercent = 1055m,
                            EndWeight = 107.5,
                            IATA_WeightFactorPercent = 1055m,
                            StartWeight = 107.001
                        },
                        new
                        {
                            Id = 216,
                            Courier_WeightFactorPercent = 1060m,
                            EndWeight = 108.0,
                            IATA_WeightFactorPercent = 1060m,
                            StartWeight = 107.501
                        },
                        new
                        {
                            Id = 217,
                            Courier_WeightFactorPercent = 1065m,
                            EndWeight = 108.5,
                            IATA_WeightFactorPercent = 1065m,
                            StartWeight = 108.001
                        },
                        new
                        {
                            Id = 218,
                            Courier_WeightFactorPercent = 1070m,
                            EndWeight = 109.0,
                            IATA_WeightFactorPercent = 1070m,
                            StartWeight = 108.501
                        },
                        new
                        {
                            Id = 219,
                            Courier_WeightFactorPercent = 1075m,
                            EndWeight = 109.5,
                            IATA_WeightFactorPercent = 1075m,
                            StartWeight = 109.001
                        },
                        new
                        {
                            Id = 220,
                            Courier_WeightFactorPercent = 1080m,
                            EndWeight = 110.0,
                            IATA_WeightFactorPercent = 1080m,
                            StartWeight = 109.501
                        },
                        new
                        {
                            Id = 221,
                            Courier_WeightFactorPercent = 1085m,
                            EndWeight = 110.5,
                            IATA_WeightFactorPercent = 1085m,
                            StartWeight = 110.001
                        },
                        new
                        {
                            Id = 222,
                            Courier_WeightFactorPercent = 1090m,
                            EndWeight = 111.0,
                            IATA_WeightFactorPercent = 1090m,
                            StartWeight = 110.501
                        },
                        new
                        {
                            Id = 223,
                            Courier_WeightFactorPercent = 1095m,
                            EndWeight = 111.5,
                            IATA_WeightFactorPercent = 1095m,
                            StartWeight = 111.001
                        },
                        new
                        {
                            Id = 224,
                            Courier_WeightFactorPercent = 1100m,
                            EndWeight = 112.0,
                            IATA_WeightFactorPercent = 1100m,
                            StartWeight = 111.501
                        },
                        new
                        {
                            Id = 225,
                            Courier_WeightFactorPercent = 1105m,
                            EndWeight = 112.5,
                            IATA_WeightFactorPercent = 1105m,
                            StartWeight = 112.001
                        },
                        new
                        {
                            Id = 226,
                            Courier_WeightFactorPercent = 1110m,
                            EndWeight = 113.0,
                            IATA_WeightFactorPercent = 1110m,
                            StartWeight = 112.501
                        },
                        new
                        {
                            Id = 227,
                            Courier_WeightFactorPercent = 1115m,
                            EndWeight = 113.5,
                            IATA_WeightFactorPercent = 1115m,
                            StartWeight = 113.001
                        },
                        new
                        {
                            Id = 228,
                            Courier_WeightFactorPercent = 1120m,
                            EndWeight = 114.0,
                            IATA_WeightFactorPercent = 1120m,
                            StartWeight = 113.501
                        },
                        new
                        {
                            Id = 229,
                            Courier_WeightFactorPercent = 1125m,
                            EndWeight = 114.5,
                            IATA_WeightFactorPercent = 1125m,
                            StartWeight = 114.001
                        },
                        new
                        {
                            Id = 230,
                            Courier_WeightFactorPercent = 1130m,
                            EndWeight = 115.0,
                            IATA_WeightFactorPercent = 1130m,
                            StartWeight = 114.501
                        },
                        new
                        {
                            Id = 231,
                            Courier_WeightFactorPercent = 1135m,
                            EndWeight = 115.5,
                            IATA_WeightFactorPercent = 1135m,
                            StartWeight = 115.001
                        },
                        new
                        {
                            Id = 232,
                            Courier_WeightFactorPercent = 1140m,
                            EndWeight = 116.0,
                            IATA_WeightFactorPercent = 1140m,
                            StartWeight = 115.501
                        },
                        new
                        {
                            Id = 233,
                            Courier_WeightFactorPercent = 1145m,
                            EndWeight = 116.5,
                            IATA_WeightFactorPercent = 1145m,
                            StartWeight = 116.001
                        },
                        new
                        {
                            Id = 234,
                            Courier_WeightFactorPercent = 1150m,
                            EndWeight = 117.0,
                            IATA_WeightFactorPercent = 1150m,
                            StartWeight = 116.501
                        },
                        new
                        {
                            Id = 235,
                            Courier_WeightFactorPercent = 1155m,
                            EndWeight = 117.5,
                            IATA_WeightFactorPercent = 1155m,
                            StartWeight = 117.001
                        },
                        new
                        {
                            Id = 236,
                            Courier_WeightFactorPercent = 1160m,
                            EndWeight = 118.0,
                            IATA_WeightFactorPercent = 1160m,
                            StartWeight = 117.501
                        },
                        new
                        {
                            Id = 237,
                            Courier_WeightFactorPercent = 1165m,
                            EndWeight = 118.5,
                            IATA_WeightFactorPercent = 1165m,
                            StartWeight = 118.001
                        },
                        new
                        {
                            Id = 238,
                            Courier_WeightFactorPercent = 1170m,
                            EndWeight = 119.0,
                            IATA_WeightFactorPercent = 1170m,
                            StartWeight = 118.501
                        },
                        new
                        {
                            Id = 239,
                            Courier_WeightFactorPercent = 1175m,
                            EndWeight = 119.5,
                            IATA_WeightFactorPercent = 1175m,
                            StartWeight = 119.001
                        },
                        new
                        {
                            Id = 240,
                            Courier_WeightFactorPercent = 1180m,
                            EndWeight = 120.0,
                            IATA_WeightFactorPercent = 1180m,
                            StartWeight = 119.501
                        },
                        new
                        {
                            Id = 241,
                            Courier_WeightFactorPercent = 1185m,
                            EndWeight = 120.5,
                            IATA_WeightFactorPercent = 1185m,
                            StartWeight = 120.001
                        },
                        new
                        {
                            Id = 242,
                            Courier_WeightFactorPercent = 1190m,
                            EndWeight = 121.0,
                            IATA_WeightFactorPercent = 1190m,
                            StartWeight = 120.501
                        },
                        new
                        {
                            Id = 243,
                            Courier_WeightFactorPercent = 1195m,
                            EndWeight = 121.5,
                            IATA_WeightFactorPercent = 1195m,
                            StartWeight = 121.001
                        },
                        new
                        {
                            Id = 244,
                            Courier_WeightFactorPercent = 1200m,
                            EndWeight = 122.0,
                            IATA_WeightFactorPercent = 1200m,
                            StartWeight = 121.501
                        },
                        new
                        {
                            Id = 245,
                            Courier_WeightFactorPercent = 1205m,
                            EndWeight = 122.5,
                            IATA_WeightFactorPercent = 1205m,
                            StartWeight = 122.001
                        },
                        new
                        {
                            Id = 246,
                            Courier_WeightFactorPercent = 1210m,
                            EndWeight = 123.0,
                            IATA_WeightFactorPercent = 1210m,
                            StartWeight = 122.501
                        },
                        new
                        {
                            Id = 247,
                            Courier_WeightFactorPercent = 1215m,
                            EndWeight = 123.5,
                            IATA_WeightFactorPercent = 1215m,
                            StartWeight = 123.001
                        },
                        new
                        {
                            Id = 248,
                            Courier_WeightFactorPercent = 1220m,
                            EndWeight = 124.0,
                            IATA_WeightFactorPercent = 1220m,
                            StartWeight = 123.501
                        },
                        new
                        {
                            Id = 249,
                            Courier_WeightFactorPercent = 1225m,
                            EndWeight = 124.5,
                            IATA_WeightFactorPercent = 1225m,
                            StartWeight = 124.001
                        },
                        new
                        {
                            Id = 250,
                            Courier_WeightFactorPercent = 1230m,
                            EndWeight = 125.0,
                            IATA_WeightFactorPercent = 1230m,
                            StartWeight = 124.501
                        },
                        new
                        {
                            Id = 251,
                            Courier_WeightFactorPercent = 1235m,
                            EndWeight = 125.5,
                            IATA_WeightFactorPercent = 1235m,
                            StartWeight = 125.001
                        },
                        new
                        {
                            Id = 252,
                            Courier_WeightFactorPercent = 1240m,
                            EndWeight = 126.0,
                            IATA_WeightFactorPercent = 1240m,
                            StartWeight = 125.501
                        },
                        new
                        {
                            Id = 253,
                            Courier_WeightFactorPercent = 1245m,
                            EndWeight = 126.5,
                            IATA_WeightFactorPercent = 1245m,
                            StartWeight = 126.001
                        },
                        new
                        {
                            Id = 254,
                            Courier_WeightFactorPercent = 1250m,
                            EndWeight = 127.0,
                            IATA_WeightFactorPercent = 1250m,
                            StartWeight = 126.501
                        },
                        new
                        {
                            Id = 255,
                            Courier_WeightFactorPercent = 1255m,
                            EndWeight = 127.5,
                            IATA_WeightFactorPercent = 1255m,
                            StartWeight = 127.001
                        },
                        new
                        {
                            Id = 256,
                            Courier_WeightFactorPercent = 1260m,
                            EndWeight = 128.0,
                            IATA_WeightFactorPercent = 1260m,
                            StartWeight = 127.501
                        },
                        new
                        {
                            Id = 257,
                            Courier_WeightFactorPercent = 1265m,
                            EndWeight = 128.5,
                            IATA_WeightFactorPercent = 1265m,
                            StartWeight = 128.001
                        },
                        new
                        {
                            Id = 258,
                            Courier_WeightFactorPercent = 1270m,
                            EndWeight = 129.0,
                            IATA_WeightFactorPercent = 1270m,
                            StartWeight = 128.501
                        },
                        new
                        {
                            Id = 259,
                            Courier_WeightFactorPercent = 1275m,
                            EndWeight = 129.5,
                            IATA_WeightFactorPercent = 1275m,
                            StartWeight = 129.001
                        },
                        new
                        {
                            Id = 260,
                            Courier_WeightFactorPercent = 1280m,
                            EndWeight = 130.0,
                            IATA_WeightFactorPercent = 1280m,
                            StartWeight = 129.501
                        },
                        new
                        {
                            Id = 261,
                            Courier_WeightFactorPercent = 1285m,
                            EndWeight = 130.5,
                            IATA_WeightFactorPercent = 1285m,
                            StartWeight = 130.001
                        },
                        new
                        {
                            Id = 262,
                            Courier_WeightFactorPercent = 1290m,
                            EndWeight = 131.0,
                            IATA_WeightFactorPercent = 1290m,
                            StartWeight = 130.501
                        },
                        new
                        {
                            Id = 263,
                            Courier_WeightFactorPercent = 1295m,
                            EndWeight = 131.5,
                            IATA_WeightFactorPercent = 1295m,
                            StartWeight = 131.001
                        },
                        new
                        {
                            Id = 264,
                            Courier_WeightFactorPercent = 1300m,
                            EndWeight = 132.0,
                            IATA_WeightFactorPercent = 1300m,
                            StartWeight = 131.501
                        },
                        new
                        {
                            Id = 265,
                            Courier_WeightFactorPercent = 1305m,
                            EndWeight = 132.5,
                            IATA_WeightFactorPercent = 1305m,
                            StartWeight = 132.001
                        },
                        new
                        {
                            Id = 266,
                            Courier_WeightFactorPercent = 1310m,
                            EndWeight = 133.0,
                            IATA_WeightFactorPercent = 1310m,
                            StartWeight = 132.501
                        },
                        new
                        {
                            Id = 267,
                            Courier_WeightFactorPercent = 1315m,
                            EndWeight = 133.5,
                            IATA_WeightFactorPercent = 1315m,
                            StartWeight = 133.001
                        },
                        new
                        {
                            Id = 268,
                            Courier_WeightFactorPercent = 1320m,
                            EndWeight = 134.0,
                            IATA_WeightFactorPercent = 1320m,
                            StartWeight = 133.501
                        },
                        new
                        {
                            Id = 269,
                            Courier_WeightFactorPercent = 1325m,
                            EndWeight = 134.5,
                            IATA_WeightFactorPercent = 1325m,
                            StartWeight = 134.001
                        },
                        new
                        {
                            Id = 270,
                            Courier_WeightFactorPercent = 1330m,
                            EndWeight = 135.0,
                            IATA_WeightFactorPercent = 1330m,
                            StartWeight = 134.501
                        },
                        new
                        {
                            Id = 271,
                            Courier_WeightFactorPercent = 1335m,
                            EndWeight = 135.5,
                            IATA_WeightFactorPercent = 1335m,
                            StartWeight = 135.001
                        },
                        new
                        {
                            Id = 272,
                            Courier_WeightFactorPercent = 1340m,
                            EndWeight = 136.0,
                            IATA_WeightFactorPercent = 1340m,
                            StartWeight = 135.501
                        },
                        new
                        {
                            Id = 273,
                            Courier_WeightFactorPercent = 1345m,
                            EndWeight = 136.5,
                            IATA_WeightFactorPercent = 1345m,
                            StartWeight = 136.001
                        },
                        new
                        {
                            Id = 274,
                            Courier_WeightFactorPercent = 1350m,
                            EndWeight = 137.0,
                            IATA_WeightFactorPercent = 1350m,
                            StartWeight = 136.501
                        },
                        new
                        {
                            Id = 275,
                            Courier_WeightFactorPercent = 1355m,
                            EndWeight = 137.5,
                            IATA_WeightFactorPercent = 1355m,
                            StartWeight = 137.001
                        },
                        new
                        {
                            Id = 276,
                            Courier_WeightFactorPercent = 1360m,
                            EndWeight = 138.0,
                            IATA_WeightFactorPercent = 1360m,
                            StartWeight = 137.501
                        },
                        new
                        {
                            Id = 277,
                            Courier_WeightFactorPercent = 1365m,
                            EndWeight = 138.5,
                            IATA_WeightFactorPercent = 1365m,
                            StartWeight = 138.001
                        },
                        new
                        {
                            Id = 278,
                            Courier_WeightFactorPercent = 1370m,
                            EndWeight = 139.0,
                            IATA_WeightFactorPercent = 1370m,
                            StartWeight = 138.501
                        },
                        new
                        {
                            Id = 279,
                            Courier_WeightFactorPercent = 1375m,
                            EndWeight = 139.5,
                            IATA_WeightFactorPercent = 1375m,
                            StartWeight = 139.001
                        },
                        new
                        {
                            Id = 280,
                            Courier_WeightFactorPercent = 1380m,
                            EndWeight = 140.0,
                            IATA_WeightFactorPercent = 1380m,
                            StartWeight = 139.501
                        },
                        new
                        {
                            Id = 281,
                            Courier_WeightFactorPercent = 1385m,
                            EndWeight = 140.5,
                            IATA_WeightFactorPercent = 1385m,
                            StartWeight = 140.001
                        },
                        new
                        {
                            Id = 282,
                            Courier_WeightFactorPercent = 1390m,
                            EndWeight = 141.0,
                            IATA_WeightFactorPercent = 1390m,
                            StartWeight = 140.501
                        },
                        new
                        {
                            Id = 283,
                            Courier_WeightFactorPercent = 1395m,
                            EndWeight = 141.5,
                            IATA_WeightFactorPercent = 1395m,
                            StartWeight = 141.001
                        },
                        new
                        {
                            Id = 284,
                            Courier_WeightFactorPercent = 1400m,
                            EndWeight = 142.0,
                            IATA_WeightFactorPercent = 1400m,
                            StartWeight = 141.501
                        },
                        new
                        {
                            Id = 285,
                            Courier_WeightFactorPercent = 1405m,
                            EndWeight = 142.5,
                            IATA_WeightFactorPercent = 1405m,
                            StartWeight = 142.001
                        },
                        new
                        {
                            Id = 286,
                            Courier_WeightFactorPercent = 1410m,
                            EndWeight = 143.0,
                            IATA_WeightFactorPercent = 1410m,
                            StartWeight = 142.501
                        },
                        new
                        {
                            Id = 287,
                            Courier_WeightFactorPercent = 1415m,
                            EndWeight = 143.5,
                            IATA_WeightFactorPercent = 1415m,
                            StartWeight = 143.001
                        },
                        new
                        {
                            Id = 288,
                            Courier_WeightFactorPercent = 1420m,
                            EndWeight = 144.0,
                            IATA_WeightFactorPercent = 1420m,
                            StartWeight = 143.501
                        },
                        new
                        {
                            Id = 289,
                            Courier_WeightFactorPercent = 1425m,
                            EndWeight = 144.5,
                            IATA_WeightFactorPercent = 1425m,
                            StartWeight = 144.001
                        },
                        new
                        {
                            Id = 290,
                            Courier_WeightFactorPercent = 1430m,
                            EndWeight = 145.0,
                            IATA_WeightFactorPercent = 1430m,
                            StartWeight = 144.501
                        },
                        new
                        {
                            Id = 291,
                            Courier_WeightFactorPercent = 1435m,
                            EndWeight = 145.5,
                            IATA_WeightFactorPercent = 1435m,
                            StartWeight = 145.001
                        },
                        new
                        {
                            Id = 292,
                            Courier_WeightFactorPercent = 1440m,
                            EndWeight = 146.0,
                            IATA_WeightFactorPercent = 1440m,
                            StartWeight = 145.501
                        },
                        new
                        {
                            Id = 293,
                            Courier_WeightFactorPercent = 1445m,
                            EndWeight = 146.5,
                            IATA_WeightFactorPercent = 1445m,
                            StartWeight = 146.001
                        },
                        new
                        {
                            Id = 294,
                            Courier_WeightFactorPercent = 1450m,
                            EndWeight = 147.0,
                            IATA_WeightFactorPercent = 1450m,
                            StartWeight = 146.501
                        },
                        new
                        {
                            Id = 295,
                            Courier_WeightFactorPercent = 1455m,
                            EndWeight = 147.5,
                            IATA_WeightFactorPercent = 1455m,
                            StartWeight = 147.001
                        },
                        new
                        {
                            Id = 296,
                            Courier_WeightFactorPercent = 1460m,
                            EndWeight = 148.0,
                            IATA_WeightFactorPercent = 1460m,
                            StartWeight = 147.501
                        },
                        new
                        {
                            Id = 297,
                            Courier_WeightFactorPercent = 1465m,
                            EndWeight = 148.5,
                            IATA_WeightFactorPercent = 1465m,
                            StartWeight = 148.001
                        },
                        new
                        {
                            Id = 298,
                            Courier_WeightFactorPercent = 1470m,
                            EndWeight = 149.0,
                            IATA_WeightFactorPercent = 1470m,
                            StartWeight = 148.501
                        },
                        new
                        {
                            Id = 299,
                            Courier_WeightFactorPercent = 1475m,
                            EndWeight = 149.5,
                            IATA_WeightFactorPercent = 1475m,
                            StartWeight = 149.001
                        },
                        new
                        {
                            Id = 300,
                            Courier_WeightFactorPercent = 1480m,
                            EndWeight = 150.0,
                            IATA_WeightFactorPercent = 1480m,
                            StartWeight = 149.501
                        },
                        new
                        {
                            Id = 301,
                            Courier_WeightFactorPercent = 1485m,
                            EndWeight = 150.5,
                            IATA_WeightFactorPercent = 1485m,
                            StartWeight = 150.001
                        },
                        new
                        {
                            Id = 302,
                            Courier_WeightFactorPercent = 1490m,
                            EndWeight = 151.0,
                            IATA_WeightFactorPercent = 1490m,
                            StartWeight = 150.501
                        },
                        new
                        {
                            Id = 303,
                            Courier_WeightFactorPercent = 1495m,
                            EndWeight = 151.5,
                            IATA_WeightFactorPercent = 1495m,
                            StartWeight = 151.001
                        },
                        new
                        {
                            Id = 304,
                            Courier_WeightFactorPercent = 1500m,
                            EndWeight = 152.0,
                            IATA_WeightFactorPercent = 1500m,
                            StartWeight = 151.501
                        },
                        new
                        {
                            Id = 305,
                            Courier_WeightFactorPercent = 1505m,
                            EndWeight = 152.5,
                            IATA_WeightFactorPercent = 1505m,
                            StartWeight = 152.001
                        },
                        new
                        {
                            Id = 306,
                            Courier_WeightFactorPercent = 1510m,
                            EndWeight = 153.0,
                            IATA_WeightFactorPercent = 1510m,
                            StartWeight = 152.501
                        },
                        new
                        {
                            Id = 307,
                            Courier_WeightFactorPercent = 1515m,
                            EndWeight = 153.5,
                            IATA_WeightFactorPercent = 1515m,
                            StartWeight = 153.001
                        },
                        new
                        {
                            Id = 308,
                            Courier_WeightFactorPercent = 1520m,
                            EndWeight = 154.0,
                            IATA_WeightFactorPercent = 1520m,
                            StartWeight = 153.501
                        },
                        new
                        {
                            Id = 309,
                            Courier_WeightFactorPercent = 1525m,
                            EndWeight = 154.5,
                            IATA_WeightFactorPercent = 1525m,
                            StartWeight = 154.001
                        },
                        new
                        {
                            Id = 310,
                            Courier_WeightFactorPercent = 1530m,
                            EndWeight = 155.0,
                            IATA_WeightFactorPercent = 1530m,
                            StartWeight = 154.501
                        },
                        new
                        {
                            Id = 311,
                            Courier_WeightFactorPercent = 1535m,
                            EndWeight = 155.5,
                            IATA_WeightFactorPercent = 1535m,
                            StartWeight = 155.001
                        },
                        new
                        {
                            Id = 312,
                            Courier_WeightFactorPercent = 1540m,
                            EndWeight = 156.0,
                            IATA_WeightFactorPercent = 1540m,
                            StartWeight = 155.501
                        },
                        new
                        {
                            Id = 313,
                            Courier_WeightFactorPercent = 1545m,
                            EndWeight = 156.5,
                            IATA_WeightFactorPercent = 1545m,
                            StartWeight = 156.001
                        },
                        new
                        {
                            Id = 314,
                            Courier_WeightFactorPercent = 1550m,
                            EndWeight = 157.0,
                            IATA_WeightFactorPercent = 1550m,
                            StartWeight = 156.501
                        },
                        new
                        {
                            Id = 315,
                            Courier_WeightFactorPercent = 1555m,
                            EndWeight = 157.5,
                            IATA_WeightFactorPercent = 1555m,
                            StartWeight = 157.001
                        },
                        new
                        {
                            Id = 316,
                            Courier_WeightFactorPercent = 1560m,
                            EndWeight = 158.0,
                            IATA_WeightFactorPercent = 1560m,
                            StartWeight = 157.501
                        },
                        new
                        {
                            Id = 317,
                            Courier_WeightFactorPercent = 1565m,
                            EndWeight = 158.5,
                            IATA_WeightFactorPercent = 1565m,
                            StartWeight = 158.001
                        },
                        new
                        {
                            Id = 318,
                            Courier_WeightFactorPercent = 1570m,
                            EndWeight = 159.0,
                            IATA_WeightFactorPercent = 1570m,
                            StartWeight = 158.501
                        },
                        new
                        {
                            Id = 319,
                            Courier_WeightFactorPercent = 1575m,
                            EndWeight = 159.5,
                            IATA_WeightFactorPercent = 1575m,
                            StartWeight = 159.001
                        },
                        new
                        {
                            Id = 320,
                            Courier_WeightFactorPercent = 1580m,
                            EndWeight = 160.0,
                            IATA_WeightFactorPercent = 1580m,
                            StartWeight = 159.501
                        },
                        new
                        {
                            Id = 321,
                            Courier_WeightFactorPercent = 1585m,
                            EndWeight = 160.5,
                            IATA_WeightFactorPercent = 1585m,
                            StartWeight = 160.001
                        },
                        new
                        {
                            Id = 322,
                            Courier_WeightFactorPercent = 1590m,
                            EndWeight = 161.0,
                            IATA_WeightFactorPercent = 1590m,
                            StartWeight = 160.501
                        },
                        new
                        {
                            Id = 323,
                            Courier_WeightFactorPercent = 1595m,
                            EndWeight = 161.5,
                            IATA_WeightFactorPercent = 1595m,
                            StartWeight = 161.001
                        },
                        new
                        {
                            Id = 324,
                            Courier_WeightFactorPercent = 1600m,
                            EndWeight = 162.0,
                            IATA_WeightFactorPercent = 1600m,
                            StartWeight = 161.501
                        },
                        new
                        {
                            Id = 325,
                            Courier_WeightFactorPercent = 1605m,
                            EndWeight = 162.5,
                            IATA_WeightFactorPercent = 1605m,
                            StartWeight = 162.001
                        },
                        new
                        {
                            Id = 326,
                            Courier_WeightFactorPercent = 1610m,
                            EndWeight = 163.0,
                            IATA_WeightFactorPercent = 1610m,
                            StartWeight = 162.501
                        },
                        new
                        {
                            Id = 327,
                            Courier_WeightFactorPercent = 1615m,
                            EndWeight = 163.5,
                            IATA_WeightFactorPercent = 1615m,
                            StartWeight = 163.001
                        },
                        new
                        {
                            Id = 328,
                            Courier_WeightFactorPercent = 1620m,
                            EndWeight = 164.0,
                            IATA_WeightFactorPercent = 1620m,
                            StartWeight = 163.501
                        },
                        new
                        {
                            Id = 329,
                            Courier_WeightFactorPercent = 1625m,
                            EndWeight = 164.5,
                            IATA_WeightFactorPercent = 1625m,
                            StartWeight = 164.001
                        },
                        new
                        {
                            Id = 330,
                            Courier_WeightFactorPercent = 1630m,
                            EndWeight = 165.0,
                            IATA_WeightFactorPercent = 1630m,
                            StartWeight = 164.501
                        },
                        new
                        {
                            Id = 331,
                            Courier_WeightFactorPercent = 1635m,
                            EndWeight = 165.5,
                            IATA_WeightFactorPercent = 1635m,
                            StartWeight = 165.001
                        },
                        new
                        {
                            Id = 332,
                            Courier_WeightFactorPercent = 1640m,
                            EndWeight = 166.0,
                            IATA_WeightFactorPercent = 1640m,
                            StartWeight = 165.501
                        },
                        new
                        {
                            Id = 333,
                            Courier_WeightFactorPercent = 1645m,
                            EndWeight = 166.5,
                            IATA_WeightFactorPercent = 1645m,
                            StartWeight = 166.001
                        },
                        new
                        {
                            Id = 334,
                            Courier_WeightFactorPercent = 1650m,
                            EndWeight = 167.0,
                            IATA_WeightFactorPercent = 1650m,
                            StartWeight = 166.501
                        },
                        new
                        {
                            Id = 335,
                            Courier_WeightFactorPercent = 1655m,
                            EndWeight = 167.5,
                            IATA_WeightFactorPercent = 1655m,
                            StartWeight = 167.001
                        },
                        new
                        {
                            Id = 336,
                            Courier_WeightFactorPercent = 1660m,
                            EndWeight = 168.0,
                            IATA_WeightFactorPercent = 1660m,
                            StartWeight = 167.501
                        },
                        new
                        {
                            Id = 337,
                            Courier_WeightFactorPercent = 1665m,
                            EndWeight = 168.5,
                            IATA_WeightFactorPercent = 1665m,
                            StartWeight = 168.001
                        },
                        new
                        {
                            Id = 338,
                            Courier_WeightFactorPercent = 1670m,
                            EndWeight = 169.0,
                            IATA_WeightFactorPercent = 1670m,
                            StartWeight = 168.501
                        },
                        new
                        {
                            Id = 339,
                            Courier_WeightFactorPercent = 1675m,
                            EndWeight = 169.5,
                            IATA_WeightFactorPercent = 1675m,
                            StartWeight = 169.001
                        },
                        new
                        {
                            Id = 340,
                            Courier_WeightFactorPercent = 1680m,
                            EndWeight = 170.0,
                            IATA_WeightFactorPercent = 1680m,
                            StartWeight = 169.501
                        },
                        new
                        {
                            Id = 341,
                            Courier_WeightFactorPercent = 1685m,
                            EndWeight = 170.5,
                            IATA_WeightFactorPercent = 1685m,
                            StartWeight = 170.001
                        },
                        new
                        {
                            Id = 342,
                            Courier_WeightFactorPercent = 1690m,
                            EndWeight = 171.0,
                            IATA_WeightFactorPercent = 1690m,
                            StartWeight = 170.501
                        },
                        new
                        {
                            Id = 343,
                            Courier_WeightFactorPercent = 1695m,
                            EndWeight = 171.5,
                            IATA_WeightFactorPercent = 1695m,
                            StartWeight = 171.001
                        },
                        new
                        {
                            Id = 344,
                            Courier_WeightFactorPercent = 1700m,
                            EndWeight = 172.0,
                            IATA_WeightFactorPercent = 1700m,
                            StartWeight = 171.501
                        },
                        new
                        {
                            Id = 345,
                            Courier_WeightFactorPercent = 1705m,
                            EndWeight = 172.5,
                            IATA_WeightFactorPercent = 1705m,
                            StartWeight = 172.001
                        },
                        new
                        {
                            Id = 346,
                            Courier_WeightFactorPercent = 1710m,
                            EndWeight = 173.0,
                            IATA_WeightFactorPercent = 1710m,
                            StartWeight = 172.501
                        },
                        new
                        {
                            Id = 347,
                            Courier_WeightFactorPercent = 1715m,
                            EndWeight = 173.5,
                            IATA_WeightFactorPercent = 1715m,
                            StartWeight = 173.001
                        },
                        new
                        {
                            Id = 348,
                            Courier_WeightFactorPercent = 1720m,
                            EndWeight = 174.0,
                            IATA_WeightFactorPercent = 1720m,
                            StartWeight = 173.501
                        },
                        new
                        {
                            Id = 349,
                            Courier_WeightFactorPercent = 1725m,
                            EndWeight = 174.5,
                            IATA_WeightFactorPercent = 1725m,
                            StartWeight = 174.001
                        },
                        new
                        {
                            Id = 350,
                            Courier_WeightFactorPercent = 1730m,
                            EndWeight = 175.0,
                            IATA_WeightFactorPercent = 1730m,
                            StartWeight = 174.501
                        },
                        new
                        {
                            Id = 351,
                            Courier_WeightFactorPercent = 1735m,
                            EndWeight = 175.5,
                            IATA_WeightFactorPercent = 1735m,
                            StartWeight = 175.001
                        },
                        new
                        {
                            Id = 352,
                            Courier_WeightFactorPercent = 1740m,
                            EndWeight = 176.0,
                            IATA_WeightFactorPercent = 1740m,
                            StartWeight = 175.501
                        },
                        new
                        {
                            Id = 353,
                            Courier_WeightFactorPercent = 1745m,
                            EndWeight = 176.5,
                            IATA_WeightFactorPercent = 1745m,
                            StartWeight = 176.001
                        },
                        new
                        {
                            Id = 354,
                            Courier_WeightFactorPercent = 1750m,
                            EndWeight = 177.0,
                            IATA_WeightFactorPercent = 1750m,
                            StartWeight = 176.501
                        },
                        new
                        {
                            Id = 355,
                            Courier_WeightFactorPercent = 1755m,
                            EndWeight = 177.5,
                            IATA_WeightFactorPercent = 1755m,
                            StartWeight = 177.001
                        },
                        new
                        {
                            Id = 356,
                            Courier_WeightFactorPercent = 1760m,
                            EndWeight = 178.0,
                            IATA_WeightFactorPercent = 1760m,
                            StartWeight = 177.501
                        },
                        new
                        {
                            Id = 357,
                            Courier_WeightFactorPercent = 1765m,
                            EndWeight = 178.5,
                            IATA_WeightFactorPercent = 1765m,
                            StartWeight = 178.001
                        },
                        new
                        {
                            Id = 358,
                            Courier_WeightFactorPercent = 1770m,
                            EndWeight = 179.0,
                            IATA_WeightFactorPercent = 1770m,
                            StartWeight = 178.501
                        },
                        new
                        {
                            Id = 359,
                            Courier_WeightFactorPercent = 1775m,
                            EndWeight = 179.5,
                            IATA_WeightFactorPercent = 1775m,
                            StartWeight = 179.001
                        },
                        new
                        {
                            Id = 360,
                            Courier_WeightFactorPercent = 1780m,
                            EndWeight = 180.0,
                            IATA_WeightFactorPercent = 1780m,
                            StartWeight = 179.501
                        },
                        new
                        {
                            Id = 361,
                            Courier_WeightFactorPercent = 1785m,
                            EndWeight = 180.5,
                            IATA_WeightFactorPercent = 1785m,
                            StartWeight = 180.001
                        },
                        new
                        {
                            Id = 362,
                            Courier_WeightFactorPercent = 1790m,
                            EndWeight = 181.0,
                            IATA_WeightFactorPercent = 1790m,
                            StartWeight = 180.501
                        },
                        new
                        {
                            Id = 363,
                            Courier_WeightFactorPercent = 1795m,
                            EndWeight = 181.5,
                            IATA_WeightFactorPercent = 1795m,
                            StartWeight = 181.001
                        },
                        new
                        {
                            Id = 364,
                            Courier_WeightFactorPercent = 1800m,
                            EndWeight = 182.0,
                            IATA_WeightFactorPercent = 1800m,
                            StartWeight = 181.501
                        },
                        new
                        {
                            Id = 365,
                            Courier_WeightFactorPercent = 1805m,
                            EndWeight = 182.5,
                            IATA_WeightFactorPercent = 1805m,
                            StartWeight = 182.001
                        },
                        new
                        {
                            Id = 366,
                            Courier_WeightFactorPercent = 1810m,
                            EndWeight = 183.0,
                            IATA_WeightFactorPercent = 1810m,
                            StartWeight = 182.501
                        },
                        new
                        {
                            Id = 367,
                            Courier_WeightFactorPercent = 1815m,
                            EndWeight = 183.5,
                            IATA_WeightFactorPercent = 1815m,
                            StartWeight = 183.001
                        },
                        new
                        {
                            Id = 368,
                            Courier_WeightFactorPercent = 1820m,
                            EndWeight = 184.0,
                            IATA_WeightFactorPercent = 1820m,
                            StartWeight = 183.501
                        },
                        new
                        {
                            Id = 369,
                            Courier_WeightFactorPercent = 1825m,
                            EndWeight = 184.5,
                            IATA_WeightFactorPercent = 1825m,
                            StartWeight = 184.001
                        },
                        new
                        {
                            Id = 370,
                            Courier_WeightFactorPercent = 1830m,
                            EndWeight = 185.0,
                            IATA_WeightFactorPercent = 1830m,
                            StartWeight = 184.501
                        },
                        new
                        {
                            Id = 371,
                            Courier_WeightFactorPercent = 1835m,
                            EndWeight = 185.5,
                            IATA_WeightFactorPercent = 1835m,
                            StartWeight = 185.001
                        },
                        new
                        {
                            Id = 372,
                            Courier_WeightFactorPercent = 1840m,
                            EndWeight = 186.0,
                            IATA_WeightFactorPercent = 1840m,
                            StartWeight = 185.501
                        },
                        new
                        {
                            Id = 373,
                            Courier_WeightFactorPercent = 1845m,
                            EndWeight = 186.5,
                            IATA_WeightFactorPercent = 1845m,
                            StartWeight = 186.001
                        },
                        new
                        {
                            Id = 374,
                            Courier_WeightFactorPercent = 1850m,
                            EndWeight = 187.0,
                            IATA_WeightFactorPercent = 1850m,
                            StartWeight = 186.501
                        },
                        new
                        {
                            Id = 375,
                            Courier_WeightFactorPercent = 1855m,
                            EndWeight = 187.5,
                            IATA_WeightFactorPercent = 1855m,
                            StartWeight = 187.001
                        },
                        new
                        {
                            Id = 376,
                            Courier_WeightFactorPercent = 1860m,
                            EndWeight = 188.0,
                            IATA_WeightFactorPercent = 1860m,
                            StartWeight = 187.501
                        },
                        new
                        {
                            Id = 377,
                            Courier_WeightFactorPercent = 1865m,
                            EndWeight = 188.5,
                            IATA_WeightFactorPercent = 1865m,
                            StartWeight = 188.001
                        },
                        new
                        {
                            Id = 378,
                            Courier_WeightFactorPercent = 1870m,
                            EndWeight = 189.0,
                            IATA_WeightFactorPercent = 1870m,
                            StartWeight = 188.501
                        },
                        new
                        {
                            Id = 379,
                            Courier_WeightFactorPercent = 1875m,
                            EndWeight = 189.5,
                            IATA_WeightFactorPercent = 1875m,
                            StartWeight = 189.001
                        },
                        new
                        {
                            Id = 380,
                            Courier_WeightFactorPercent = 1880m,
                            EndWeight = 190.0,
                            IATA_WeightFactorPercent = 1880m,
                            StartWeight = 189.501
                        },
                        new
                        {
                            Id = 381,
                            Courier_WeightFactorPercent = 1885m,
                            EndWeight = 190.5,
                            IATA_WeightFactorPercent = 1885m,
                            StartWeight = 190.001
                        },
                        new
                        {
                            Id = 382,
                            Courier_WeightFactorPercent = 1890m,
                            EndWeight = 191.0,
                            IATA_WeightFactorPercent = 1890m,
                            StartWeight = 190.501
                        },
                        new
                        {
                            Id = 383,
                            Courier_WeightFactorPercent = 1895m,
                            EndWeight = 191.5,
                            IATA_WeightFactorPercent = 1895m,
                            StartWeight = 191.001
                        },
                        new
                        {
                            Id = 384,
                            Courier_WeightFactorPercent = 1900m,
                            EndWeight = 192.0,
                            IATA_WeightFactorPercent = 1900m,
                            StartWeight = 191.501
                        },
                        new
                        {
                            Id = 385,
                            Courier_WeightFactorPercent = 1905m,
                            EndWeight = 192.5,
                            IATA_WeightFactorPercent = 1905m,
                            StartWeight = 192.001
                        },
                        new
                        {
                            Id = 386,
                            Courier_WeightFactorPercent = 1910m,
                            EndWeight = 193.0,
                            IATA_WeightFactorPercent = 1910m,
                            StartWeight = 192.501
                        },
                        new
                        {
                            Id = 387,
                            Courier_WeightFactorPercent = 1915m,
                            EndWeight = 193.5,
                            IATA_WeightFactorPercent = 1915m,
                            StartWeight = 193.001
                        },
                        new
                        {
                            Id = 388,
                            Courier_WeightFactorPercent = 1920m,
                            EndWeight = 194.0,
                            IATA_WeightFactorPercent = 1920m,
                            StartWeight = 193.501
                        },
                        new
                        {
                            Id = 389,
                            Courier_WeightFactorPercent = 1925m,
                            EndWeight = 194.5,
                            IATA_WeightFactorPercent = 1925m,
                            StartWeight = 194.001
                        },
                        new
                        {
                            Id = 390,
                            Courier_WeightFactorPercent = 1930m,
                            EndWeight = 195.0,
                            IATA_WeightFactorPercent = 1930m,
                            StartWeight = 194.501
                        },
                        new
                        {
                            Id = 391,
                            Courier_WeightFactorPercent = 1935m,
                            EndWeight = 195.5,
                            IATA_WeightFactorPercent = 1935m,
                            StartWeight = 195.001
                        },
                        new
                        {
                            Id = 392,
                            Courier_WeightFactorPercent = 1940m,
                            EndWeight = 196.0,
                            IATA_WeightFactorPercent = 1940m,
                            StartWeight = 195.501
                        },
                        new
                        {
                            Id = 393,
                            Courier_WeightFactorPercent = 1945m,
                            EndWeight = 196.5,
                            IATA_WeightFactorPercent = 1945m,
                            StartWeight = 196.001
                        },
                        new
                        {
                            Id = 394,
                            Courier_WeightFactorPercent = 1950m,
                            EndWeight = 197.0,
                            IATA_WeightFactorPercent = 1950m,
                            StartWeight = 196.501
                        },
                        new
                        {
                            Id = 395,
                            Courier_WeightFactorPercent = 1955m,
                            EndWeight = 197.5,
                            IATA_WeightFactorPercent = 1955m,
                            StartWeight = 197.001
                        },
                        new
                        {
                            Id = 396,
                            Courier_WeightFactorPercent = 1960m,
                            EndWeight = 198.0,
                            IATA_WeightFactorPercent = 1960m,
                            StartWeight = 197.501
                        },
                        new
                        {
                            Id = 397,
                            Courier_WeightFactorPercent = 1965m,
                            EndWeight = 198.5,
                            IATA_WeightFactorPercent = 1965m,
                            StartWeight = 198.001
                        },
                        new
                        {
                            Id = 398,
                            Courier_WeightFactorPercent = 1970m,
                            EndWeight = 199.0,
                            IATA_WeightFactorPercent = 1970m,
                            StartWeight = 198.501
                        },
                        new
                        {
                            Id = 399,
                            Courier_WeightFactorPercent = 1975m,
                            EndWeight = 199.5,
                            IATA_WeightFactorPercent = 1975m,
                            StartWeight = 199.001
                        },
                        new
                        {
                            Id = 400,
                            Courier_WeightFactorPercent = 1980m,
                            EndWeight = 200.0,
                            IATA_WeightFactorPercent = 1980m,
                            StartWeight = 199.501
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_RateZone", b =>
                {
                    b.Property<int>("ZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ZoneId"));

                    b.Property<bool>("IsSatellite")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PriceBaseFactor")
                        .HasColumnType("int");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.HasKey("ZoneId");

                    b.ToTable("Cu_RateZones");

                    b.HasData(
                        new
                        {
                            ZoneId = 1,
                            IsSatellite = false,
                            Name = "زون 1",
                            PriceBaseFactor = 1,
                            SellerId = 3L
                        },
                        new
                        {
                            ZoneId = 2,
                            IsSatellite = false,
                            Name = "زون 2",
                            PriceBaseFactor = 1,
                            SellerId = 3L
                        },
                        new
                        {
                            ZoneId = 3,
                            IsSatellite = false,
                            Name = "زون 3",
                            PriceBaseFactor = 1,
                            SellerId = 3L
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Representative", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDistributor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIssuer")
                        .HasColumnType("bit");

                    b.Property<long?>("PartyId")
                        .HasColumnType("bigint");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TafsilId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PartyId")
                        .IsUnique()
                        .HasFilter("[PartyId] IS NOT NULL");

                    b.ToTable("Representatives");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Route", b =>
                {
                    b.Property<int>("RouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RouteId"));

                    b.Property<int>("DestinationCityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTransit")
                        .HasColumnType("bit");

                    b.Property<int>("OriginCityId")
                        .HasColumnType("int");

                    b.Property<string>("RouteCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RouteName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RouteName_En")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("RouteId");

                    b.HasIndex("DestinationCityId");

                    b.HasIndex("OriginCityId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Cu_Routes");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RatingType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("ServiceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName_En")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ServicePercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<short>("ShipmentTypeCode")
                        .HasColumnType("smallint");

                    b.Property<float>("VatRate")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Cu_Services");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_ShipmentType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<short>("Code")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cu_Shipments");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Code = (short)1,
                            Name = "زمینی"
                        },
                        new
                        {
                            Id = (short)2,
                            Code = (short)2,
                            Name = "هوایی"
                        },
                        new
                        {
                            Id = (short)3,
                            Code = (short)3,
                            Name = "دریایی"
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.DataTransfer.Models.KPOldSystemSaleReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<float?>("ActualCargoWeight")
                        .HasColumnType("real");

                    b.Property<long?>("AddedValue")
                        .HasColumnType("bigint");

                    b.Property<string>("AgencyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AgentConfirmationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("AgentDetailedCode")
                        .HasColumnType("bigint");

                    b.Property<long?>("BaseFare")
                        .HasColumnType("bigint");

                    b.Property<string>("BillOfLadingGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("BillOfLadingGroupCode")
                        .HasColumnType("bigint");

                    b.Property<long?>("BillOfLadingNumber")
                        .HasColumnType("bigint");

                    b.Property<bool?>("BranchManagerApprove")
                        .HasColumnType("bit");

                    b.Property<bool?>("Cancellation")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CancellationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CancellationPenalty")
                        .HasColumnType("bigint");

                    b.Property<string>("CancellationUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CargoFare")
                        .HasColumnType("bigint");

                    b.Property<float?>("ChargeableWeight")
                        .HasColumnType("real");

                    b.Property<long?>("CollectionOrSeparationFee")
                        .HasColumnType("bigint");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ConfirmedByAgent")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConfirmedByIssuingBranch")
                        .HasColumnType("bit");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreditCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CustomerCode")
                        .HasColumnType("bigint");

                    b.Property<string>("DataEntryDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DataEntryUserCode")
                        .HasColumnType("bigint");

                    b.Property<string>("DataEntryUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DeclaredGoodsValue")
                        .HasColumnType("bigint");

                    b.Property<string>("DeliveryConfirmation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DestinationMiscellaneousFee")
                        .HasColumnType("bigint");

                    b.Property<string>("DestinationRepresentative")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Discount")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("DistributerBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DistributerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DistributionCostDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DistributionOrSeparationFee")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DistributorApprove")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DocId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DocNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinancialInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromOrigin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("GoodsCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("InsuranceFee")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("IssuingBranchConfirmationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("IssuingBranchDetailedCode")
                        .HasColumnType("bigint");

                    b.Property<long?>("MachineCode")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("MiladiDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("MiscellaneousFee")
                        .HasColumnType("bigint");

                    b.Property<long?>("NonSystemicBillOfLadingNumber")
                        .HasColumnType("bigint");

                    b.Property<long?>("OldSeparationFee")
                        .HasColumnType("bigint");

                    b.Property<long>("OtherDistributionCosts")
                        .HasColumnType("bigint");

                    b.Property<long?>("OtherOriginFees")
                        .HasColumnType("bigint");

                    b.Property<string>("POSReceiptNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PackagingFee")
                        .HasColumnType("bigint");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RateType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("RecipientCustomerCode")
                        .HasColumnType("bigint");

                    b.Property<string>("RecipientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientPersonCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientZoneAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientZoneName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("RecordLock")
                        .HasColumnType("bit");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("RoundingAmount")
                        .HasColumnType("bigint");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("SenderAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderNationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderPersonCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderZoneAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderZoneCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderZoneName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ServiceCode")
                        .HasColumnType("bigint");

                    b.Property<string>("ServiceInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShamsiDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StampFee")
                        .HasColumnType("bigint");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToDestination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToTransitDestination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TotalBillOfLadingAmount")
                        .HasColumnType("bigint");

                    b.Property<long?>("TotalServiceFee")
                        .HasColumnType("bigint");

                    b.Property<long?>("TransitCargoFare")
                        .HasColumnType("bigint");

                    b.Property<long?>("TransitMiscellaneousFee")
                        .HasColumnType("bigint");

                    b.Property<string>("TransitRepresentative")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TransitSeparationFee")
                        .HasColumnType("bigint");

                    b.Property<long?>("VAT")
                        .HasColumnType("bigint");

                    b.Property<float?>("VolumetricWeight")
                        .HasColumnType("real");

                    b.Property<long>("WarehousingCost")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DistributerBranchId");

                    b.ToTable("KPOldSystemSales");
                });

            modelBuilder.Entity("ParcelPro.Areas.Geolocation.Models.Entities.Geo_City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IATACode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCapital")
                        .HasColumnType("bit");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int>("UniqueCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Geo_Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EnglishName = "Tabriz",
                            IsCapital = true,
                            PersianName = "تبریز",
                            ProvinceId = 1,
                            UniqueCode = 2101
                        },
                        new
                        {
                            Id = 2,
                            EnglishName = "Maragheh",
                            IsCapital = false,
                            PersianName = "مراغه",
                            ProvinceId = 1,
                            UniqueCode = 2102
                        },
                        new
                        {
                            Id = 3,
                            EnglishName = "Mianeh",
                            IsCapital = false,
                            PersianName = "میانه",
                            ProvinceId = 1,
                            UniqueCode = 2103
                        },
                        new
                        {
                            Id = 4,
                            EnglishName = "Marand",
                            IsCapital = false,
                            PersianName = "مرند",
                            ProvinceId = 1,
                            UniqueCode = 2104
                        },
                        new
                        {
                            Id = 5,
                            EnglishName = "Azarshahr",
                            IsCapital = false,
                            PersianName = "آذرشهر",
                            ProvinceId = 1,
                            UniqueCode = 2105
                        },
                        new
                        {
                            Id = 6,
                            EnglishName = "Urmia",
                            IsCapital = true,
                            PersianName = "ارومیه",
                            ProvinceId = 2,
                            UniqueCode = 2201
                        },
                        new
                        {
                            Id = 7,
                            EnglishName = "Khoy",
                            IsCapital = false,
                            PersianName = "خوی",
                            ProvinceId = 2,
                            UniqueCode = 2202
                        },
                        new
                        {
                            Id = 8,
                            EnglishName = "Salmas",
                            IsCapital = false,
                            PersianName = "سلماس",
                            ProvinceId = 2,
                            UniqueCode = 2203
                        },
                        new
                        {
                            Id = 9,
                            EnglishName = "Mahabad",
                            IsCapital = false,
                            PersianName = "مهاباد",
                            ProvinceId = 2,
                            UniqueCode = 2204
                        },
                        new
                        {
                            Id = 10,
                            EnglishName = "Piranshahr",
                            IsCapital = false,
                            PersianName = "پیرانشهر",
                            ProvinceId = 2,
                            UniqueCode = 2205
                        },
                        new
                        {
                            Id = 11,
                            EnglishName = "Ardabil",
                            IsCapital = true,
                            PersianName = "اردبیل",
                            ProvinceId = 3,
                            UniqueCode = 2301
                        },
                        new
                        {
                            Id = 12,
                            EnglishName = "Meshginshahr",
                            IsCapital = false,
                            PersianName = "مشگین‌شهر",
                            ProvinceId = 3,
                            UniqueCode = 2302
                        },
                        new
                        {
                            Id = 13,
                            EnglishName = "Parsabad",
                            IsCapital = false,
                            PersianName = "پارس‌آباد",
                            ProvinceId = 3,
                            UniqueCode = 2303
                        },
                        new
                        {
                            Id = 14,
                            EnglishName = "Khalkhal",
                            IsCapital = false,
                            PersianName = "خلخال",
                            ProvinceId = 3,
                            UniqueCode = 2304
                        },
                        new
                        {
                            Id = 15,
                            EnglishName = "Bileh Savar",
                            IsCapital = false,
                            PersianName = "بیله‌سوار",
                            ProvinceId = 3,
                            UniqueCode = 2305
                        },
                        new
                        {
                            Id = 16,
                            EnglishName = "Isfahan",
                            IsCapital = true,
                            PersianName = "اصفهان",
                            ProvinceId = 4,
                            UniqueCode = 2401
                        },
                        new
                        {
                            Id = 17,
                            EnglishName = "Kashan",
                            IsCapital = false,
                            PersianName = "کاشان",
                            ProvinceId = 4,
                            UniqueCode = 2402
                        },
                        new
                        {
                            Id = 18,
                            EnglishName = "Khomeinishahr",
                            IsCapital = false,
                            PersianName = "خمینی‌شهر",
                            ProvinceId = 4,
                            UniqueCode = 2403
                        },
                        new
                        {
                            Id = 19,
                            EnglishName = "Falavarjan",
                            IsCapital = false,
                            PersianName = "فلاورجان",
                            ProvinceId = 4,
                            UniqueCode = 2404
                        },
                        new
                        {
                            Id = 20,
                            EnglishName = "Na'in",
                            IsCapital = false,
                            PersianName = "نائین",
                            ProvinceId = 4,
                            UniqueCode = 2405
                        },
                        new
                        {
                            Id = 21,
                            EnglishName = "Karaj",
                            IsCapital = true,
                            PersianName = "کرج",
                            ProvinceId = 5,
                            UniqueCode = 2501
                        },
                        new
                        {
                            Id = 22,
                            EnglishName = "Nazarabad",
                            IsCapital = false,
                            PersianName = "نظرآباد",
                            ProvinceId = 5,
                            UniqueCode = 2502
                        },
                        new
                        {
                            Id = 23,
                            EnglishName = "Fardis",
                            IsCapital = false,
                            PersianName = "فردیس",
                            ProvinceId = 5,
                            UniqueCode = 2503
                        },
                        new
                        {
                            Id = 24,
                            EnglishName = "Savojbolagh",
                            IsCapital = false,
                            PersianName = "ساوجبلاغ",
                            ProvinceId = 5,
                            UniqueCode = 2504
                        },
                        new
                        {
                            Id = 25,
                            EnglishName = "Eshtehard",
                            IsCapital = false,
                            PersianName = "اشتهارد",
                            ProvinceId = 5,
                            UniqueCode = 2505
                        },
                        new
                        {
                            Id = 26,
                            EnglishName = "Ilam",
                            IsCapital = true,
                            PersianName = "ایلام",
                            ProvinceId = 6,
                            UniqueCode = 2601
                        },
                        new
                        {
                            Id = 27,
                            EnglishName = "Dehloran",
                            IsCapital = false,
                            PersianName = "دهلران",
                            ProvinceId = 6,
                            UniqueCode = 2602
                        },
                        new
                        {
                            Id = 28,
                            EnglishName = "Ivan",
                            IsCapital = false,
                            PersianName = "ایوان",
                            ProvinceId = 6,
                            UniqueCode = 2603
                        },
                        new
                        {
                            Id = 29,
                            EnglishName = "Abdanan",
                            IsCapital = false,
                            PersianName = "آبدانان",
                            ProvinceId = 6,
                            UniqueCode = 2604
                        },
                        new
                        {
                            Id = 30,
                            EnglishName = "Mehran",
                            IsCapital = false,
                            PersianName = "مهران",
                            ProvinceId = 6,
                            UniqueCode = 2605
                        },
                        new
                        {
                            Id = 31,
                            EnglishName = "Bushehr",
                            IsCapital = true,
                            PersianName = "بوشهر",
                            ProvinceId = 7,
                            UniqueCode = 2701
                        },
                        new
                        {
                            Id = 32,
                            EnglishName = "Borazjan",
                            IsCapital = false,
                            PersianName = "برازجان",
                            ProvinceId = 7,
                            UniqueCode = 2702
                        },
                        new
                        {
                            Id = 33,
                            EnglishName = "Genaveh",
                            IsCapital = false,
                            PersianName = "گناوه",
                            ProvinceId = 7,
                            UniqueCode = 2703
                        },
                        new
                        {
                            Id = 34,
                            EnglishName = "Khormoj",
                            IsCapital = false,
                            PersianName = "خورموج",
                            ProvinceId = 7,
                            UniqueCode = 2704
                        },
                        new
                        {
                            Id = 35,
                            EnglishName = "Dashti",
                            IsCapital = false,
                            PersianName = "دشتی",
                            ProvinceId = 7,
                            UniqueCode = 2705
                        },
                        new
                        {
                            Id = 36,
                            EnglishName = "Tehran",
                            IsCapital = true,
                            PersianName = "تهران",
                            ProvinceId = 8,
                            UniqueCode = 2801
                        },
                        new
                        {
                            Id = 37,
                            EnglishName = "Rey",
                            IsCapital = false,
                            PersianName = "ری",
                            ProvinceId = 8,
                            UniqueCode = 2802
                        },
                        new
                        {
                            Id = 38,
                            EnglishName = "Eslamshahr",
                            IsCapital = false,
                            PersianName = "اسلام‌شهر",
                            ProvinceId = 8,
                            UniqueCode = 2803
                        },
                        new
                        {
                            Id = 39,
                            EnglishName = "Shahriar",
                            IsCapital = false,
                            PersianName = "شهریار",
                            ProvinceId = 8,
                            UniqueCode = 2804
                        },
                        new
                        {
                            Id = 40,
                            EnglishName = "Varamin",
                            IsCapital = false,
                            PersianName = "ورامین",
                            ProvinceId = 8,
                            UniqueCode = 2805
                        },
                        new
                        {
                            Id = 41,
                            EnglishName = "Shahrekord",
                            IsCapital = true,
                            PersianName = "شهرکرد",
                            ProvinceId = 9,
                            UniqueCode = 2901
                        },
                        new
                        {
                            Id = 42,
                            EnglishName = "Borujen",
                            IsCapital = false,
                            PersianName = "بروجن",
                            ProvinceId = 9,
                            UniqueCode = 2902
                        },
                        new
                        {
                            Id = 43,
                            EnglishName = "Farsan",
                            IsCapital = false,
                            PersianName = "فارسان",
                            ProvinceId = 9,
                            UniqueCode = 2903
                        },
                        new
                        {
                            Id = 44,
                            EnglishName = "Lordegan",
                            IsCapital = false,
                            PersianName = "لردگان",
                            ProvinceId = 9,
                            UniqueCode = 2904
                        },
                        new
                        {
                            Id = 45,
                            EnglishName = "Fereydunshahr",
                            IsCapital = false,
                            PersianName = "فرخ‌شهر",
                            ProvinceId = 9,
                            UniqueCode = 2905
                        },
                        new
                        {
                            Id = 46,
                            EnglishName = "Birjand",
                            IsCapital = true,
                            PersianName = "بیرجند",
                            ProvinceId = 10,
                            UniqueCode = 3001
                        },
                        new
                        {
                            Id = 47,
                            EnglishName = "Qaen",
                            IsCapital = false,
                            PersianName = "قائن",
                            ProvinceId = 10,
                            UniqueCode = 3002
                        },
                        new
                        {
                            Id = 48,
                            EnglishName = "Tabas",
                            IsCapital = false,
                            PersianName = "طبس",
                            ProvinceId = 10,
                            UniqueCode = 3003
                        },
                        new
                        {
                            Id = 49,
                            EnglishName = "Ferdows",
                            IsCapital = false,
                            PersianName = "فردوس",
                            ProvinceId = 10,
                            UniqueCode = 3004
                        },
                        new
                        {
                            Id = 50,
                            EnglishName = "Nehbandan",
                            IsCapital = false,
                            PersianName = "نهبندان",
                            ProvinceId = 10,
                            UniqueCode = 3005
                        },
                        new
                        {
                            Id = 51,
                            EnglishName = "Mashhad",
                            IsCapital = true,
                            PersianName = "مشهد",
                            ProvinceId = 11,
                            UniqueCode = 3101
                        },
                        new
                        {
                            Id = 52,
                            EnglishName = "Neyshabur",
                            IsCapital = false,
                            PersianName = "نیشابور",
                            ProvinceId = 11,
                            UniqueCode = 3102
                        },
                        new
                        {
                            Id = 53,
                            EnglishName = "Sabzevar",
                            IsCapital = false,
                            PersianName = "سبزوار",
                            ProvinceId = 11,
                            UniqueCode = 3103
                        },
                        new
                        {
                            Id = 54,
                            EnglishName = "Torbate Heydarieh",
                            IsCapital = false,
                            PersianName = "تربت‌حیدریه",
                            ProvinceId = 11,
                            UniqueCode = 3104
                        },
                        new
                        {
                            Id = 55,
                            EnglishName = "Quchan",
                            IsCapital = false,
                            PersianName = "قوچان",
                            ProvinceId = 11,
                            UniqueCode = 3105
                        },
                        new
                        {
                            Id = 56,
                            EnglishName = "Bojnord",
                            IsCapital = true,
                            PersianName = "بجنورد",
                            ProvinceId = 12,
                            UniqueCode = 3201
                        },
                        new
                        {
                            Id = 57,
                            EnglishName = "Shirvan",
                            IsCapital = false,
                            PersianName = "شیروان",
                            ProvinceId = 12,
                            UniqueCode = 3202
                        },
                        new
                        {
                            Id = 58,
                            EnglishName = "Esfarayen",
                            IsCapital = false,
                            PersianName = "اسفراین",
                            ProvinceId = 12,
                            UniqueCode = 3203
                        },
                        new
                        {
                            Id = 59,
                            EnglishName = "Ashkhaneh",
                            IsCapital = false,
                            PersianName = "آشخانه",
                            ProvinceId = 12,
                            UniqueCode = 3204
                        },
                        new
                        {
                            Id = 60,
                            EnglishName = "Jajarm",
                            IsCapital = false,
                            PersianName = "جاجرم",
                            ProvinceId = 12,
                            UniqueCode = 3205
                        },
                        new
                        {
                            Id = 61,
                            EnglishName = "Ahvaz",
                            IsCapital = true,
                            PersianName = "اهواز",
                            ProvinceId = 13,
                            UniqueCode = 3301
                        },
                        new
                        {
                            Id = 62,
                            EnglishName = "Abadan",
                            IsCapital = false,
                            PersianName = "آبادان",
                            ProvinceId = 13,
                            UniqueCode = 3302
                        },
                        new
                        {
                            Id = 63,
                            EnglishName = "Khorramshahr",
                            IsCapital = false,
                            PersianName = "خرمشهر",
                            ProvinceId = 13,
                            UniqueCode = 3303
                        },
                        new
                        {
                            Id = 64,
                            EnglishName = "Dezful",
                            IsCapital = false,
                            PersianName = "دزفول",
                            ProvinceId = 13,
                            UniqueCode = 3304
                        },
                        new
                        {
                            Id = 65,
                            EnglishName = "Shooshtar",
                            IsCapital = false,
                            PersianName = "شوشتر",
                            ProvinceId = 13,
                            UniqueCode = 3305
                        },
                        new
                        {
                            Id = 66,
                            EnglishName = "Zanjan",
                            IsCapital = true,
                            PersianName = "زنجان",
                            ProvinceId = 14,
                            UniqueCode = 3401
                        },
                        new
                        {
                            Id = 67,
                            EnglishName = "Abhar",
                            IsCapital = false,
                            PersianName = "ابهر",
                            ProvinceId = 14,
                            UniqueCode = 3402
                        },
                        new
                        {
                            Id = 68,
                            EnglishName = "Khoda Bandeh",
                            IsCapital = false,
                            PersianName = "خدابنده",
                            ProvinceId = 14,
                            UniqueCode = 3403
                        },
                        new
                        {
                            Id = 69,
                            EnglishName = "Khoramdareh",
                            IsCapital = false,
                            PersianName = "خرمدره",
                            ProvinceId = 14,
                            UniqueCode = 3404
                        },
                        new
                        {
                            Id = 70,
                            EnglishName = "Mahnashan",
                            IsCapital = false,
                            PersianName = "ماه‌نشان",
                            ProvinceId = 14,
                            UniqueCode = 3405
                        },
                        new
                        {
                            Id = 71,
                            EnglishName = "Semnan",
                            IsCapital = true,
                            PersianName = "سمنان",
                            ProvinceId = 15,
                            UniqueCode = 3501
                        },
                        new
                        {
                            Id = 72,
                            EnglishName = "Shahrood",
                            IsCapital = false,
                            PersianName = "شاهرود",
                            ProvinceId = 15,
                            UniqueCode = 3502
                        },
                        new
                        {
                            Id = 73,
                            EnglishName = "Damghan",
                            IsCapital = false,
                            PersianName = "دامغان",
                            ProvinceId = 15,
                            UniqueCode = 3503
                        },
                        new
                        {
                            Id = 74,
                            EnglishName = "Garmsar",
                            IsCapital = false,
                            PersianName = "گرمسار",
                            ProvinceId = 15,
                            UniqueCode = 3504
                        },
                        new
                        {
                            Id = 75,
                            EnglishName = "Mahdishahr",
                            IsCapital = false,
                            PersianName = "مهدیشهر",
                            ProvinceId = 15,
                            UniqueCode = 3505
                        },
                        new
                        {
                            Id = 76,
                            EnglishName = "Zahedan",
                            IsCapital = true,
                            PersianName = "زاهدان",
                            ProvinceId = 16,
                            UniqueCode = 3601
                        },
                        new
                        {
                            Id = 77,
                            EnglishName = "Chabahar",
                            IsCapital = false,
                            PersianName = "چابهار",
                            ProvinceId = 16,
                            UniqueCode = 3602
                        },
                        new
                        {
                            Id = 78,
                            EnglishName = "Iranshahr",
                            IsCapital = false,
                            PersianName = "ایرانشهر",
                            ProvinceId = 16,
                            UniqueCode = 3603
                        },
                        new
                        {
                            Id = 79,
                            EnglishName = "Zabol",
                            IsCapital = false,
                            PersianName = "زابل",
                            ProvinceId = 16,
                            UniqueCode = 3604
                        },
                        new
                        {
                            Id = 80,
                            EnglishName = "Khash",
                            IsCapital = false,
                            PersianName = "خاش",
                            ProvinceId = 16,
                            UniqueCode = 3605
                        },
                        new
                        {
                            Id = 81,
                            EnglishName = "Shiraz",
                            IsCapital = true,
                            PersianName = "شیراز",
                            ProvinceId = 17,
                            UniqueCode = 3701
                        },
                        new
                        {
                            Id = 82,
                            EnglishName = "Marvdasht",
                            IsCapital = false,
                            PersianName = "مرودشت",
                            ProvinceId = 17,
                            UniqueCode = 3702
                        },
                        new
                        {
                            Id = 83,
                            EnglishName = "Jahrom",
                            IsCapital = false,
                            PersianName = "جهرم",
                            ProvinceId = 17,
                            UniqueCode = 3703
                        },
                        new
                        {
                            Id = 84,
                            EnglishName = "Lar",
                            IsCapital = false,
                            PersianName = "لار",
                            ProvinceId = 17,
                            UniqueCode = 3704
                        },
                        new
                        {
                            Id = 85,
                            EnglishName = "Fasa",
                            IsCapital = false,
                            PersianName = "فسا",
                            ProvinceId = 17,
                            UniqueCode = 3705
                        },
                        new
                        {
                            Id = 86,
                            EnglishName = "Qazvin",
                            IsCapital = true,
                            PersianName = "قزوین",
                            ProvinceId = 18,
                            UniqueCode = 3801
                        },
                        new
                        {
                            Id = 87,
                            EnglishName = "Takestan",
                            IsCapital = false,
                            PersianName = "تاکستان",
                            ProvinceId = 18,
                            UniqueCode = 3802
                        },
                        new
                        {
                            Id = 88,
                            EnglishName = "Abyek",
                            IsCapital = false,
                            PersianName = "آبیک",
                            ProvinceId = 18,
                            UniqueCode = 3803
                        },
                        new
                        {
                            Id = 89,
                            EnglishName = "Alvand",
                            IsCapital = false,
                            PersianName = "الوند",
                            ProvinceId = 18,
                            UniqueCode = 3804
                        },
                        new
                        {
                            Id = 90,
                            EnglishName = "Bu’in Zahra",
                            IsCapital = false,
                            PersianName = "بوئین‌زهرا",
                            ProvinceId = 18,
                            UniqueCode = 3805
                        },
                        new
                        {
                            Id = 91,
                            EnglishName = "Qom",
                            IsCapital = true,
                            PersianName = "قم",
                            ProvinceId = 19,
                            UniqueCode = 3901
                        },
                        new
                        {
                            Id = 92,
                            EnglishName = "Kahak",
                            IsCapital = false,
                            PersianName = "کهک",
                            ProvinceId = 19,
                            UniqueCode = 3902
                        },
                        new
                        {
                            Id = 93,
                            EnglishName = "Salafchegan",
                            IsCapital = false,
                            PersianName = "سلفچگان",
                            ProvinceId = 19,
                            UniqueCode = 3903
                        },
                        new
                        {
                            Id = 94,
                            EnglishName = "Jafariyeh",
                            IsCapital = false,
                            PersianName = "جعفریه",
                            ProvinceId = 19,
                            UniqueCode = 3904
                        },
                        new
                        {
                            Id = 95,
                            EnglishName = "Dastjerd",
                            IsCapital = false,
                            PersianName = "دستجرد",
                            ProvinceId = 19,
                            UniqueCode = 3905
                        },
                        new
                        {
                            Id = 96,
                            EnglishName = "Sanandaj",
                            IsCapital = true,
                            PersianName = "سنندج",
                            ProvinceId = 20,
                            UniqueCode = 4001
                        },
                        new
                        {
                            Id = 97,
                            EnglishName = "Marivan",
                            IsCapital = false,
                            PersianName = "مریوان",
                            ProvinceId = 20,
                            UniqueCode = 4002
                        },
                        new
                        {
                            Id = 98,
                            EnglishName = "Saqez",
                            IsCapital = false,
                            PersianName = "سقز",
                            ProvinceId = 20,
                            UniqueCode = 4003
                        },
                        new
                        {
                            Id = 99,
                            EnglishName = "Baneh",
                            IsCapital = false,
                            PersianName = "بانه",
                            ProvinceId = 20,
                            UniqueCode = 4004
                        },
                        new
                        {
                            Id = 100,
                            EnglishName = "Bijar",
                            IsCapital = false,
                            PersianName = "بیجار",
                            ProvinceId = 20,
                            UniqueCode = 4005
                        },
                        new
                        {
                            Id = 101,
                            EnglishName = "Kerman",
                            IsCapital = true,
                            PersianName = "کرمان",
                            ProvinceId = 21,
                            UniqueCode = 4101
                        },
                        new
                        {
                            Id = 102,
                            EnglishName = "Sirjan",
                            IsCapital = false,
                            PersianName = "سیرجان",
                            ProvinceId = 21,
                            UniqueCode = 4102
                        },
                        new
                        {
                            Id = 103,
                            EnglishName = "Rafsanjan",
                            IsCapital = false,
                            PersianName = "رفسنجان",
                            ProvinceId = 21,
                            UniqueCode = 4103
                        },
                        new
                        {
                            Id = 104,
                            EnglishName = "Jiroft",
                            IsCapital = false,
                            PersianName = "جیرفت",
                            ProvinceId = 21,
                            UniqueCode = 4104
                        },
                        new
                        {
                            Id = 105,
                            EnglishName = "Zarand",
                            IsCapital = false,
                            PersianName = "زرند",
                            ProvinceId = 21,
                            UniqueCode = 4105
                        },
                        new
                        {
                            Id = 106,
                            EnglishName = "Kermanshah",
                            IsCapital = true,
                            PersianName = "کرمانشاه",
                            ProvinceId = 22,
                            UniqueCode = 4201
                        },
                        new
                        {
                            Id = 107,
                            EnglishName = "Eslamabad Gharb",
                            IsCapital = false,
                            PersianName = "اسلام‌آباد غرب",
                            ProvinceId = 22,
                            UniqueCode = 4202
                        },
                        new
                        {
                            Id = 108,
                            EnglishName = "Harsin",
                            IsCapital = false,
                            PersianName = "هرسین",
                            ProvinceId = 22,
                            UniqueCode = 4203
                        },
                        new
                        {
                            Id = 109,
                            EnglishName = "Sonqor",
                            IsCapital = false,
                            PersianName = "سنقر",
                            ProvinceId = 22,
                            UniqueCode = 4204
                        },
                        new
                        {
                            Id = 110,
                            EnglishName = "Sarpol-e Zahab",
                            IsCapital = false,
                            PersianName = "سرپل ذهاب",
                            ProvinceId = 22,
                            UniqueCode = 4205
                        },
                        new
                        {
                            Id = 111,
                            EnglishName = "Yasuj",
                            IsCapital = true,
                            PersianName = "یاسوج",
                            ProvinceId = 23,
                            UniqueCode = 4301
                        },
                        new
                        {
                            Id = 112,
                            EnglishName = "Gachsaran",
                            IsCapital = false,
                            PersianName = "گچساران",
                            ProvinceId = 23,
                            UniqueCode = 4302
                        },
                        new
                        {
                            Id = 113,
                            EnglishName = "Dehdasht",
                            IsCapital = false,
                            PersianName = "دهدشت",
                            ProvinceId = 23,
                            UniqueCode = 4303
                        },
                        new
                        {
                            Id = 114,
                            EnglishName = "Likak",
                            IsCapital = false,
                            PersianName = "لیکک",
                            ProvinceId = 23,
                            UniqueCode = 4304
                        },
                        new
                        {
                            Id = 115,
                            EnglishName = "Sisakht",
                            IsCapital = false,
                            PersianName = "سی‌سخت",
                            ProvinceId = 23,
                            UniqueCode = 4305
                        },
                        new
                        {
                            Id = 116,
                            EnglishName = "Gorgan",
                            IsCapital = true,
                            PersianName = "گرگان",
                            ProvinceId = 24,
                            UniqueCode = 4401
                        },
                        new
                        {
                            Id = 117,
                            EnglishName = "Gonbad-e Kavus",
                            IsCapital = false,
                            PersianName = "گنبد کاووس",
                            ProvinceId = 24,
                            UniqueCode = 4402
                        },
                        new
                        {
                            Id = 118,
                            EnglishName = "Aliabad",
                            IsCapital = false,
                            PersianName = "علی‌آباد",
                            ProvinceId = 24,
                            UniqueCode = 4403
                        },
                        new
                        {
                            Id = 119,
                            EnglishName = "Aqqala",
                            IsCapital = false,
                            PersianName = "آق‌قلا",
                            ProvinceId = 24,
                            UniqueCode = 4404
                        },
                        new
                        {
                            Id = 120,
                            EnglishName = "Minoodasht",
                            IsCapital = false,
                            PersianName = "مینودشت",
                            ProvinceId = 24,
                            UniqueCode = 4405
                        },
                        new
                        {
                            Id = 121,
                            EnglishName = "Rasht",
                            IsCapital = true,
                            PersianName = "رشت",
                            ProvinceId = 25,
                            UniqueCode = 4501
                        },
                        new
                        {
                            Id = 122,
                            EnglishName = "Bandar-e Anzali",
                            IsCapital = false,
                            PersianName = "بندر انزلی",
                            ProvinceId = 25,
                            UniqueCode = 4502
                        },
                        new
                        {
                            Id = 123,
                            EnglishName = "Lahijan",
                            IsCapital = false,
                            PersianName = "لاهیجان",
                            ProvinceId = 25,
                            UniqueCode = 4503
                        },
                        new
                        {
                            Id = 124,
                            EnglishName = "Talesh",
                            IsCapital = false,
                            PersianName = "تالش",
                            ProvinceId = 25,
                            UniqueCode = 4504
                        },
                        new
                        {
                            Id = 125,
                            EnglishName = "Astara",
                            IsCapital = false,
                            PersianName = "آستارا",
                            ProvinceId = 25,
                            UniqueCode = 4505
                        },
                        new
                        {
                            Id = 126,
                            EnglishName = "Khorramabad",
                            IsCapital = true,
                            PersianName = "خرم‌آباد",
                            ProvinceId = 26,
                            UniqueCode = 4601
                        },
                        new
                        {
                            Id = 127,
                            EnglishName = "Borujerd",
                            IsCapital = false,
                            PersianName = "بروجرد",
                            ProvinceId = 26,
                            UniqueCode = 4602
                        },
                        new
                        {
                            Id = 128,
                            EnglishName = "Dorud",
                            IsCapital = false,
                            PersianName = "دورود",
                            ProvinceId = 26,
                            UniqueCode = 4603
                        },
                        new
                        {
                            Id = 129,
                            EnglishName = "Kuhdasht",
                            IsCapital = false,
                            PersianName = "کوهدشت",
                            ProvinceId = 26,
                            UniqueCode = 4604
                        },
                        new
                        {
                            Id = 130,
                            EnglishName = "Aligudarz",
                            IsCapital = false,
                            PersianName = "الیگودرز",
                            ProvinceId = 26,
                            UniqueCode = 4605
                        },
                        new
                        {
                            Id = 131,
                            EnglishName = "Sari",
                            IsCapital = true,
                            PersianName = "ساری",
                            ProvinceId = 27,
                            UniqueCode = 4701
                        },
                        new
                        {
                            Id = 132,
                            EnglishName = "Amol",
                            IsCapital = false,
                            PersianName = "آمل",
                            ProvinceId = 27,
                            UniqueCode = 4702
                        },
                        new
                        {
                            Id = 133,
                            EnglishName = "Babol",
                            IsCapital = false,
                            PersianName = "بابل",
                            ProvinceId = 27,
                            UniqueCode = 4703
                        },
                        new
                        {
                            Id = 134,
                            EnglishName = "Qaem Shahr",
                            IsCapital = false,
                            PersianName = "قائم‌شهر",
                            ProvinceId = 27,
                            UniqueCode = 4704
                        },
                        new
                        {
                            Id = 135,
                            EnglishName = "Chalus",
                            IsCapital = false,
                            PersianName = "چالوس",
                            ProvinceId = 27,
                            UniqueCode = 4705
                        },
                        new
                        {
                            Id = 136,
                            EnglishName = "Arak",
                            IsCapital = true,
                            PersianName = "اراک",
                            ProvinceId = 28,
                            UniqueCode = 4801
                        },
                        new
                        {
                            Id = 137,
                            EnglishName = "Saveh",
                            IsCapital = false,
                            PersianName = "ساوه",
                            ProvinceId = 28,
                            UniqueCode = 4802
                        },
                        new
                        {
                            Id = 138,
                            EnglishName = "Khomein",
                            IsCapital = false,
                            PersianName = "خمین",
                            ProvinceId = 28,
                            UniqueCode = 4803
                        },
                        new
                        {
                            Id = 139,
                            EnglishName = "Delijan",
                            IsCapital = false,
                            PersianName = "دلیجان",
                            ProvinceId = 28,
                            UniqueCode = 4804
                        },
                        new
                        {
                            Id = 140,
                            EnglishName = "Mahallat",
                            IsCapital = false,
                            PersianName = "محلات",
                            ProvinceId = 28,
                            UniqueCode = 4805
                        },
                        new
                        {
                            Id = 141,
                            EnglishName = "Bandar Abbas",
                            IsCapital = true,
                            PersianName = "بندرعباس",
                            ProvinceId = 29,
                            UniqueCode = 4901
                        },
                        new
                        {
                            Id = 142,
                            EnglishName = "Minab",
                            IsCapital = false,
                            PersianName = "میناب",
                            ProvinceId = 29,
                            UniqueCode = 4902
                        },
                        new
                        {
                            Id = 143,
                            EnglishName = "Qeshm",
                            IsCapital = false,
                            PersianName = "قشم",
                            ProvinceId = 29,
                            UniqueCode = 4903
                        },
                        new
                        {
                            Id = 144,
                            EnglishName = "Bandar Lengeh",
                            IsCapital = false,
                            PersianName = "بندر لنگه",
                            ProvinceId = 29,
                            UniqueCode = 4904
                        },
                        new
                        {
                            Id = 145,
                            EnglishName = "Roodan",
                            IsCapital = false,
                            PersianName = "رودان",
                            ProvinceId = 29,
                            UniqueCode = 4905
                        },
                        new
                        {
                            Id = 146,
                            EnglishName = "Hamedan",
                            IsCapital = true,
                            PersianName = "همدان",
                            ProvinceId = 30,
                            UniqueCode = 5001
                        },
                        new
                        {
                            Id = 147,
                            EnglishName = "Malayer",
                            IsCapital = false,
                            PersianName = "ملایر",
                            ProvinceId = 30,
                            UniqueCode = 5002
                        },
                        new
                        {
                            Id = 148,
                            EnglishName = "Nahavand",
                            IsCapital = false,
                            PersianName = "نهاوند",
                            ProvinceId = 30,
                            UniqueCode = 5003
                        },
                        new
                        {
                            Id = 149,
                            EnglishName = "Tuyserkan",
                            IsCapital = false,
                            PersianName = "تویسرکان",
                            ProvinceId = 30,
                            UniqueCode = 5004
                        },
                        new
                        {
                            Id = 150,
                            EnglishName = "Kabudarahang",
                            IsCapital = false,
                            PersianName = "کبودرآهنگ",
                            ProvinceId = 30,
                            UniqueCode = 5005
                        },
                        new
                        {
                            Id = 151,
                            EnglishName = "Yazd",
                            IsCapital = true,
                            PersianName = "یزد",
                            ProvinceId = 31,
                            UniqueCode = 5101
                        },
                        new
                        {
                            Id = 152,
                            EnglishName = "Meybod",
                            IsCapital = false,
                            PersianName = "میبد",
                            ProvinceId = 31,
                            UniqueCode = 5102
                        },
                        new
                        {
                            Id = 153,
                            EnglishName = "Ardakan",
                            IsCapital = false,
                            PersianName = "اردکان",
                            ProvinceId = 31,
                            UniqueCode = 5103
                        },
                        new
                        {
                            Id = 154,
                            EnglishName = "Bafq",
                            IsCapital = false,
                            PersianName = "بافق",
                            ProvinceId = 31,
                            UniqueCode = 5104
                        },
                        new
                        {
                            Id = 155,
                            EnglishName = "Mehriz",
                            IsCapital = false,
                            PersianName = "مهریز",
                            ProvinceId = 31,
                            UniqueCode = 5105
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Geolocation.Models.Entities.Geo_Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NumericCode")
                        .HasColumnType("int");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Geo_Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "IR",
                            EnglishName = "Iran",
                            NumericCode = 364,
                            PersianName = "ایران"
                        },
                        new
                        {
                            Id = 2,
                            Code = "KW",
                            EnglishName = "Kuwait",
                            NumericCode = 414,
                            PersianName = "کویت"
                        },
                        new
                        {
                            Id = 3,
                            Code = "CA",
                            EnglishName = "Canada",
                            NumericCode = 124,
                            PersianName = "کانادا"
                        },
                        new
                        {
                            Id = 4,
                            Code = "GB",
                            EnglishName = "United Kingdom",
                            NumericCode = 826,
                            PersianName = "انگلیس"
                        },
                        new
                        {
                            Id = 5,
                            Code = "DE",
                            EnglishName = "Germany",
                            NumericCode = 276,
                            PersianName = "آلمان"
                        },
                        new
                        {
                            Id = 6,
                            Code = "SE",
                            EnglishName = "Sweden",
                            NumericCode = 752,
                            PersianName = "سوئد"
                        },
                        new
                        {
                            Id = 7,
                            Code = "CH",
                            EnglishName = "Switzerland",
                            NumericCode = 756,
                            PersianName = "سوئیس"
                        },
                        new
                        {
                            Id = 8,
                            Code = "FR",
                            EnglishName = "France",
                            NumericCode = 250,
                            PersianName = "فرانسه"
                        },
                        new
                        {
                            Id = 9,
                            Code = "AE",
                            EnglishName = "United Arab Emirates",
                            NumericCode = 784,
                            PersianName = "امارات"
                        },
                        new
                        {
                            Id = 10,
                            Code = "OM",
                            EnglishName = "Oman",
                            NumericCode = 512,
                            PersianName = "عمان"
                        },
                        new
                        {
                            Id = 11,
                            Code = "AU",
                            EnglishName = "Australia",
                            NumericCode = 36,
                            PersianName = "استرالیا"
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Geolocation.Models.Entities.Geo_Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UniqueCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Geo_Provinces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            EnglishName = "East Azerbaijan",
                            PersianName = "آذربایجان شرقی",
                            UniqueCode = 1101
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            EnglishName = "West Azerbaijan",
                            PersianName = "آذربایجان غربی",
                            UniqueCode = 1102
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            EnglishName = "Ardabil",
                            PersianName = "اردبیل",
                            UniqueCode = 1103
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 1,
                            EnglishName = "Isfahan",
                            PersianName = "اصفهان",
                            UniqueCode = 1104
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 1,
                            EnglishName = "Alborz",
                            PersianName = "البرز",
                            UniqueCode = 1105
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 1,
                            EnglishName = "Ilam",
                            PersianName = "ایلام",
                            UniqueCode = 1106
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 1,
                            EnglishName = "Bushehr",
                            PersianName = "بوشهر",
                            UniqueCode = 1107
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 1,
                            EnglishName = "Tehran",
                            PersianName = "تهران",
                            UniqueCode = 1108
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 1,
                            EnglishName = "Chaharmahal and Bakhtiari",
                            PersianName = "چهارمحال و بختیاری",
                            UniqueCode = 1109
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 1,
                            EnglishName = "South Khorasan",
                            PersianName = "خراسان جنوبی",
                            UniqueCode = 1110
                        },
                        new
                        {
                            Id = 11,
                            CountryId = 1,
                            EnglishName = "Razavi Khorasan",
                            PersianName = "خراسان رضوی",
                            UniqueCode = 1111
                        },
                        new
                        {
                            Id = 12,
                            CountryId = 1,
                            EnglishName = "North Khorasan",
                            PersianName = "خراسان شمالی",
                            UniqueCode = 1112
                        },
                        new
                        {
                            Id = 13,
                            CountryId = 1,
                            EnglishName = "Khuzestan",
                            PersianName = "خوزستان",
                            UniqueCode = 1113
                        },
                        new
                        {
                            Id = 14,
                            CountryId = 1,
                            EnglishName = "Zanjan",
                            PersianName = "زنجان",
                            UniqueCode = 1114
                        },
                        new
                        {
                            Id = 15,
                            CountryId = 1,
                            EnglishName = "Semnan",
                            PersianName = "سمنان",
                            UniqueCode = 1115
                        },
                        new
                        {
                            Id = 16,
                            CountryId = 1,
                            EnglishName = "Sistan and Baluchestan",
                            PersianName = "سیستان و بلوچستان",
                            UniqueCode = 1116
                        },
                        new
                        {
                            Id = 17,
                            CountryId = 1,
                            EnglishName = "Fars",
                            PersianName = "فارس",
                            UniqueCode = 1117
                        },
                        new
                        {
                            Id = 18,
                            CountryId = 1,
                            EnglishName = "Qazvin",
                            PersianName = "قزوین",
                            UniqueCode = 1118
                        },
                        new
                        {
                            Id = 19,
                            CountryId = 1,
                            EnglishName = "Qom",
                            PersianName = "قم",
                            UniqueCode = 1119
                        },
                        new
                        {
                            Id = 20,
                            CountryId = 1,
                            EnglishName = "Kurdistan",
                            PersianName = "کردستان",
                            UniqueCode = 1120
                        },
                        new
                        {
                            Id = 21,
                            CountryId = 1,
                            EnglishName = "Kerman",
                            PersianName = "کرمان",
                            UniqueCode = 1121
                        },
                        new
                        {
                            Id = 22,
                            CountryId = 1,
                            EnglishName = "Kermanshah",
                            PersianName = "کرمانشاه",
                            UniqueCode = 1122
                        },
                        new
                        {
                            Id = 23,
                            CountryId = 1,
                            EnglishName = "Kohgiluyeh and Boyer-Ahmad",
                            PersianName = "کهگیلویه و بویراحمد",
                            UniqueCode = 1123
                        },
                        new
                        {
                            Id = 24,
                            CountryId = 1,
                            EnglishName = "Golestan",
                            PersianName = "گلستان",
                            UniqueCode = 1124
                        },
                        new
                        {
                            Id = 25,
                            CountryId = 1,
                            EnglishName = "Gilan",
                            PersianName = "گیلان",
                            UniqueCode = 1125
                        },
                        new
                        {
                            Id = 26,
                            CountryId = 1,
                            EnglishName = "Lorestan",
                            PersianName = "لرستان",
                            UniqueCode = 1126
                        },
                        new
                        {
                            Id = 27,
                            CountryId = 1,
                            EnglishName = "Mazandaran",
                            PersianName = "مازندران",
                            UniqueCode = 1127
                        },
                        new
                        {
                            Id = 28,
                            CountryId = 1,
                            EnglishName = "Markazi",
                            PersianName = "مرکزی",
                            UniqueCode = 1128
                        },
                        new
                        {
                            Id = 29,
                            CountryId = 1,
                            EnglishName = "Hormozgan",
                            PersianName = "هرمزگان",
                            UniqueCode = 1129
                        },
                        new
                        {
                            Id = 30,
                            CountryId = 1,
                            EnglishName = "Hamedan",
                            PersianName = "همدان",
                            UniqueCode = 1130
                        },
                        new
                        {
                            Id = 31,
                            CountryId = 1,
                            EnglishName = "Yazd",
                            PersianName = "یزد",
                            UniqueCode = 1131
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Organization.Models.Entities.OrgDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentDepartmentId")
                        .HasColumnType("int");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParentDepartmentId");

                    b.ToTable("OrgDepartments");
                });

            modelBuilder.Entity("ParcelPro.Areas.Organization.Models.Entities.OrgEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<int>("RelationshipType")
                        .HasColumnType("int");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SupervisorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("OrgEmployees");
                });

            modelBuilder.Entity("ParcelPro.Areas.Organization.Models.Entities.OrgPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("OrgPositions");
                });

            modelBuilder.Entity("ParcelPro.Areas.Projects.Models.Entities.Con_Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ContractDurationDays")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("ProjectAmount")
                        .HasColumnType("bigint");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ProjectStartDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TafsilId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Con_Projects");
                });

            modelBuilder.Entity("ParcelPro.Areas.Treasury.Models.Entities.TreCarrency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ExchangeRateToRial")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TreCarrencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExchangeRateToRial = 1m,
                            FullName = "ریال ایران",
                            SellerId = 120L,
                            ShortName = "IRR"
                        },
                        new
                        {
                            Id = 2,
                            ExchangeRateToRial = 770000m,
                            FullName = "دلار آمریکا",
                            SellerId = 120L,
                            ShortName = "USD"
                        },
                        new
                        {
                            Id = 3,
                            ExchangeRateToRial = 810000m,
                            FullName = "یورو",
                            SellerId = 120L,
                            ShortName = "EUR"
                        },
                        new
                        {
                            Id = 4,
                            ExchangeRateToRial = 920000m,
                            FullName = "پوند انگلیس",
                            SellerId = 120L,
                            ShortName = "GBP"
                        },
                        new
                        {
                            Id = 5,
                            ExchangeRateToRial = 6500m,
                            FullName = "یوآن چین",
                            SellerId = 120L,
                            ShortName = "CNY"
                        },
                        new
                        {
                            Id = 6,
                            ExchangeRateToRial = 11400m,
                            FullName = "درهم امارات",
                            SellerId = 120L,
                            ShortName = "AED"
                        },
                        new
                        {
                            Id = 7,
                            ExchangeRateToRial = 6000m,
                            FullName = "لیره ترکیه",
                            SellerId = 120L,
                            ShortName = "TRY"
                        },
                        new
                        {
                            Id = 8,
                            ExchangeRateToRial = 35m,
                            FullName = "دینار عراق",
                            SellerId = 120L,
                            ShortName = "IQD"
                        },
                        new
                        {
                            Id = 9,
                            ExchangeRateToRial = 11500m,
                            FullName = "ریال قطر",
                            SellerId = 120L,
                            ShortName = "QAR"
                        },
                        new
                        {
                            Id = 10,
                            ExchangeRateToRial = 11200m,
                            FullName = "ریال سعودی",
                            SellerId = 120L,
                            ShortName = "SAR"
                        },
                        new
                        {
                            Id = 11,
                            ExchangeRateToRial = 140000m,
                            FullName = "دینار کویت",
                            SellerId = 120L,
                            ShortName = "KWD"
                        },
                        new
                        {
                            Id = 12,
                            ExchangeRateToRial = 380m,
                            FullName = "ین ژاپن",
                            SellerId = 120L,
                            ShortName = "JPY"
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Treasury.Models.Entities.TreOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsPOSTransaction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPay")
                        .HasColumnType("bit");

                    b.Property<string>("OperationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OperationType")
                        .HasColumnType("int");

                    b.Property<bool>("UserAlowSelect")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("TreOperations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsPOSTransaction = false,
                            IsPay = false,
                            OperationName = "دریافت وجه نقد",
                            OperationType = 1,
                            UserAlowSelect = true
                        },
                        new
                        {
                            Id = 2,
                            IsPOSTransaction = true,
                            IsPay = false,
                            OperationName = "واریز با کارتخوان (POS)",
                            OperationType = 2,
                            UserAlowSelect = true
                        },
                        new
                        {
                            Id = 3,
                            IsPOSTransaction = false,
                            IsPay = false,
                            OperationName = "حواله بانکی",
                            OperationType = 3,
                            UserAlowSelect = true
                        },
                        new
                        {
                            Id = 4,
                            IsPOSTransaction = false,
                            IsPay = false,
                            OperationName = "دریافت چک",
                            OperationType = 4,
                            UserAlowSelect = true
                        },
                        new
                        {
                            Id = 5,
                            IsPOSTransaction = false,
                            IsPay = false,
                            OperationName = "تهاتر",
                            OperationType = 5,
                            UserAlowSelect = false
                        },
                        new
                        {
                            Id = 6,
                            IsPOSTransaction = false,
                            IsPay = false,
                            OperationName = "واریز از طریق درگاه الکترونیک",
                            OperationType = 6,
                            UserAlowSelect = false
                        },
                        new
                        {
                            Id = 7,
                            IsPOSTransaction = false,
                            IsPay = true,
                            OperationName = "پرداخت وجه نقد",
                            OperationType = 20,
                            UserAlowSelect = true
                        },
                        new
                        {
                            Id = 8,
                            IsPOSTransaction = false,
                            IsPay = true,
                            OperationName = "واریز به حساب",
                            OperationType = 21,
                            UserAlowSelect = true
                        },
                        new
                        {
                            Id = 9,
                            IsPOSTransaction = false,
                            IsPay = true,
                            OperationName = "حواله",
                            OperationType = 22,
                            UserAlowSelect = true
                        },
                        new
                        {
                            Id = 10,
                            IsPOSTransaction = false,
                            IsPay = true,
                            OperationName = "پرداخت چک",
                            OperationType = 23,
                            UserAlowSelect = true
                        },
                        new
                        {
                            Id = 11,
                            IsPOSTransaction = false,
                            IsPay = true,
                            OperationName = "پرداخت از طریق درگاه الکترونیک",
                            OperationType = 24,
                            UserAlowSelect = false
                        },
                        new
                        {
                            Id = 12,
                            IsPOSTransaction = true,
                            IsPay = false,
                            OperationName = "پرداخت با کارتخوان (POS)",
                            OperationType = 25,
                            UserAlowSelect = true
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Treasury.Models.Entities.TreTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("AccountPartyId")
                        .HasColumnType("bigint");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<int?>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<Guid?>("BillOfLadingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CheckDueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CheckOwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreditAmount")
                        .HasColumnType("bigint");

                    b.Property<long>("DebitAmount")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OperationId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentGatewayTransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("TransactionTime")
                        .HasColumnType("time");

                    b.Property<byte>("TransactionTypeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("TransferNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccountPartyId");

                    b.HasIndex("BillOfLadingId");

                    b.HasIndex("OperationId");

                    b.HasIndex("UserId");

                    b.ToTable("TreTransactions");
                });

            modelBuilder.Entity("ParcelPro.Areas.Treasury.Models.Entities.kh_Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TafsilCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TafsilId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Banks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "بانک ملی ایران"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ملت"
                        },
                        new
                        {
                            Id = 3,
                            Name = "تجارت"
                        },
                        new
                        {
                            Id = 4,
                            Name = "صادرات ایران"
                        },
                        new
                        {
                            Id = 5,
                            Name = "سامان"
                        },
                        new
                        {
                            Id = 6,
                            Name = "سپه"
                        },
                        new
                        {
                            Id = 7,
                            Name = "پارسیان"
                        },
                        new
                        {
                            Id = 8,
                            Name = "پاسارگاد"
                        },
                        new
                        {
                            Id = 9,
                            Name = "مهر اقتصاد"
                        },
                        new
                        {
                            Id = 10,
                            Name = "رفاه کارگران"
                        },
                        new
                        {
                            Id = 11,
                            Name = "آینده"
                        },
                        new
                        {
                            Id = 12,
                            Name = "شهر"
                        },
                        new
                        {
                            Id = 13,
                            Name = "رسالت"
                        },
                        new
                        {
                            Id = 14,
                            Name = "سینا"
                        },
                        new
                        {
                            Id = 15,
                            Name = "ایران زمین"
                        });
                });

            modelBuilder.Entity("ParcelPro.Areas.Treasury.Models.Entities.kh_BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BankId")
                        .HasColumnType("int");

                    b.Property<string>("BranchCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SHABA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("TafsilCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TafsilId")
                        .HasColumnType("bigint");

                    b.Property<string>("cvvt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Inventory", b =>
                {
                    b.Property<Guid>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AvailableStockInBase")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AvailableStockInPackage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BasePerPackage")
                        .HasColumnType("int");

                    b.Property<int>("BaseUnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("ConsignmentStockInBase")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ConsignmentStockInPackage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InSupplyStockInBase")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InSupplyStockInPackage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OurStockWithOthersInBase")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OurStockWithOthersInPackage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PackageUnitId")
                        .HasColumnType("int");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("RequestedStockInBase")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RequestedStockInPackage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ReservedStockInBase")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ReservedStockInPackage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TotalStockInBase")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalStockInPackage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("WarehouseId")
                        .HasColumnType("bigint");

                    b.HasKey("InventoryId");

                    b.HasIndex("BaseUnitId");

                    b.HasIndex("PackageUnitId");

                    b.ToTable("Wh_Inventories");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_InventoryTransaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BaseUnitQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("DestinationWarehouseId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PakageQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("QuantityInUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<long>("SourceWarehouseId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TotalQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("TransactionType")
                        .HasColumnType("smallint");

                    b.Property<int>("UnitOfMeasureId")
                        .HasColumnType("int");

                    b.Property<Guid>("WarehouseDocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TransactionId");

                    b.HasIndex("DestinationWarehouseId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SourceWarehouseId");

                    b.HasIndex("UnitOfMeasureId");

                    b.HasIndex("WarehouseDocumentId");

                    b.ToTable("Wh_InventoryTransactions");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Product", b =>
                {
                    b.Property<long>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProductId"));

                    b.Property<int>("BaseUnitId")
                        .HasColumnType("int");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ForeignCurrencyValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("HasInventory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsService")
                        .HasColumnType("bit");

                    b.Property<decimal?>("LocalCurrencyValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MaximumQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinimumQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<float?>("NetWeight")
                        .HasColumnType("real");

                    b.Property<decimal?>("OtherLegalChargesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<float?>("OtherLegalChargesRate")
                        .HasColumnType("real");

                    b.Property<string>("OtherLegalChargesSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("OtherTaxesAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<float?>("OtherTaxesRate")
                        .HasColumnType("real");

                    b.Property<string>("OtherTaxesSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PakageCountId")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("ProductType")
                        .HasColumnType("smallint");

                    b.Property<int>("QuantityInPakage")
                        .HasColumnType("int");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("UniqueId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<float>("VATRate")
                        .HasColumnType("real");

                    b.HasKey("ProductId");

                    b.HasIndex("BaseUnitId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PakageCountId");

                    b.ToTable("Wh_Products");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_ProductCategory", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("MoeinId")
                        .HasColumnType("int");

                    b.Property<long?>("ParentCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TafsilId")
                        .HasColumnType("bigint");

                    b.HasKey("CategoryId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Wh_ProductCategories");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_ProductUnit", b =>
                {
                    b.Property<long>("ProductUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProductUnitId"));

                    b.Property<decimal>("ConversionFactor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("UnitOfMeasureId")
                        .HasColumnType("int");

                    b.Property<short>("UnitType")
                        .HasColumnType("smallint");

                    b.HasKey("ProductUnitId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("Wh_ProductUnits");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_UnitOfMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("UnitCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitSymbol")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Wh_UnitOfMeasures");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Warehouse", b =>
                {
                    b.Property<long>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("WarehouseId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("MoeinId")
                        .HasColumnType("int");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TafsilId")
                        .HasColumnType("bigint");

                    b.Property<string>("WarehouseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("WarehouseType")
                        .HasColumnType("smallint");

                    b.HasKey("WarehouseId");

                    b.HasIndex("BranchId");

                    b.ToTable("Wh_Warehouses");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseDocument", b =>
                {
                    b.Property<Guid>("WarehouseDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DestinationWarehouseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("DocumentStatus")
                        .HasColumnType("smallint");

                    b.Property<short>("DocumentType")
                        .HasColumnType("smallint");

                    b.Property<string>("EditorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SourceWarehouseId")
                        .HasColumnType("bigint");

                    b.HasKey("WarehouseDocumentId");

                    b.HasIndex("DestinationWarehouseId");

                    b.HasIndex("SourceWarehouseId");

                    b.ToTable("Wh_WarehouseDocuments");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseDocumentItem", b =>
                {
                    b.Property<Guid>("DocumentLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InvoiceItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("QuantityInBaseUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QuantityInUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitOfMeasureId")
                        .HasColumnType("int");

                    b.Property<Guid>("WarehouseDocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DocumentLineId");

                    b.HasIndex("InvoiceItemId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseDocumentId");

                    b.ToTable("Wh_WarehouseDocumentItems");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseLocation", b =>
                {
                    b.Property<long>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LocationId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LocationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentLocationId")
                        .HasColumnType("bigint");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<long>("WarehouseId")
                        .HasColumnType("bigint");

                    b.HasKey("LocationId");

                    b.HasIndex("ParentLocationId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Wh_WarehouseLocations");
                });

            modelBuilder.Entity("ParcelPro.Models.AppSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpierDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoginMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LunchDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppName = "نرم افزار حسابداری گارنِت ",
                            CompanyName = "آوا اندیش رستـا",
                            LoginMessage = "آوای تکنولوژی، آواز موفقیت",
                            LogoUrl = "../../img/aar.png",
                            OwnerName = "سیامک آهی",
                            Version = "0.1"
                        });
                });

            modelBuilder.Entity("ParcelPro.Models.AppSubsystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_En")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_fa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppSubsystems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name_En = "Accounting",
                            Name_fa = "حسابداری"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name_En = "Buy",
                            Name_fa = "خرید"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Name_En = "Sale",
                            Name_fa = "فروش"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            Name_En = "Warehouse",
                            Name_fa = "انبار"
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            Name_En = "Khazane",
                            Name_fa = "خزانه داری"
                        },
                        new
                        {
                            Id = 6,
                            Description = "",
                            Name_En = "Asset",
                            Name_fa = "اموال"
                        },
                        new
                        {
                            Id = 7,
                            Description = "",
                            Name_En = "Contract",
                            Name_fa = "قراردادها"
                        },
                        new
                        {
                            Id = 8,
                            Description = "",
                            Name_En = "Hoghoogh",
                            Name_fa = "حقوق و دستمزد"
                        });
                });

            modelBuilder.Entity("ParcelPro.Models.AppTheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CssClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDark")
                        .HasColumnType("bit");

                    b.Property<string>("StyleFileName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppThemes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CssClass = "morph",
                            IsDark = false,
                            StyleFileName = "bootstrap.morph.rtl.min.css"
                        },
                        new
                        {
                            Id = 2,
                            CssClass = "solar",
                            IsDark = true,
                            StyleFileName = "bootstrap.solar.rtl.min.css"
                        });
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActivationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("City")
                        .HasColumnType("int");

                    b.Property<string>("EconomicNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceCountLimit")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("Ishoghooghi")
                        .HasColumnType("bit");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LicenseCount")
                        .HasColumnType("int");

                    b.Property<string>("LogoAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("State")
                        .HasColumnType("int");

                    b.Property<string>("TafsilCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TafsilId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VersionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("licenseExpierDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.PartyRepresentative", b =>
                {
                    b.Property<long>("PartyId")
                        .HasColumnType("bigint");

                    b.Property<long>("RepresentativeId")
                        .HasColumnType("bigint");

                    b.HasKey("PartyId", "RepresentativeId");

                    b.HasIndex("RepresentativeId");

                    b.ToTable("PartyRepresentatives");
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.PartyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PartyTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "1",
                            Name = "حقیقی"
                        },
                        new
                        {
                            Id = 2,
                            Code = "2",
                            Name = "حقوقی"
                        },
                        new
                        {
                            Id = 3,
                            Code = "3",
                            Name = "مشارکت مدنی"
                        },
                        new
                        {
                            Id = 4,
                            Code = "4",
                            Name = "اتباع غیرایرانی"
                        },
                        new
                        {
                            Id = 5,
                            Code = "5",
                            Name = "مصرف کننده نهایی"
                        });
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.TaxPayerType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TaxPayerTypes");
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.TaxpayerInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountantMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountantName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountingSoftwareName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountingSoftwarePassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetPanelPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuditFirmName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoardMember1Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoardMember1Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoardMember1NationalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoardMember1Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoardMember2Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoardMember2Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoardMember2NationalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoardMember2Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoardMember3Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoardMember3Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoardMember3NationalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoardMember3Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CEOAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CEOName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CEONationalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CEOPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CFOMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CFOName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChiefTaxAuditor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyActivity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanySubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeclarationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinancialAdvisorMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinancialAdvisorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InterfaceSoftwareName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InterfaceSoftwarePassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreRegistrationTrackingCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegisteredAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("SeniorTaxAuditor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxAuditor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxFileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxGroupHead")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxOfficeAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxUnitCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueTaxMemoryId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VATStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TaxpayerInfos");
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.UserSeller", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserSellers");
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.UserSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActiveFinancePeriodId")
                        .HasColumnType("int");

                    b.Property<long?>("ActiveSellerId")
                        .HasColumnType("bigint");

                    b.Property<bool>("AllowBuyerManagement")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowSaleManagement")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowSellerManagement")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowStuffManagement")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowUserManagement")
                        .HasColumnType("bit");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrentTheme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<short?>("DepartmentCode")
                        .HasColumnType("smallint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("ParcelPro.Models.Identity.AppIdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<short>("DepartmentCode")
                        .HasColumnType("smallint");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Gender")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastVisitDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasFilter("[PersonId] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ParcelPro.Models.Identity.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("ParcelPro.Models.SmsLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderMessageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SmsLogs");
                });

            modelBuilder.Entity("ParcelPro.Models.SmsServiceSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApiUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("SupportContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SmsServiceSettings");
                });

            modelBuilder.Entity("Party", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountingSystemId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CEOContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CEOName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("EconomicCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCustomer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLogoDisplayedOnInvoice")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVendor")
                        .HasColumnType("bit");

                    b.Property<short>("LegalStatus")
                        .HasColumnType("smallint");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Role")
                        .HasColumnType("smallint");

                    b.Property<string>("SellerCSRKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellerCSRKeyAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellerPrivateAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellerPrivateKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellerPublicKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellerPublicKeyAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TafsilCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TafsilId")
                        .HasColumnType("bigint");

                    b.Property<string>("TaxAuditor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxFileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxMemoryId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxPanelPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("TaxPayerType")
                        .HasColumnType("smallint");

                    b.Property<string>("TaxTrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxUnitAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxUnitCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fullNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("uyer_SellerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TaxPayerType");

                    b.ToTable("parties");
                });

            modelBuilder.Entity("AppIdentityUserAppRole", b =>
                {
                    b.HasOne("ParcelPro.Models.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Models.Identity.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ParcelPro.Models.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ParcelPro.Models.Identity.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ParcelPro.Models.Identity.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ParcelPro.Models.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Models.Identity.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ParcelPro.Models.Identity.AppIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Article", b =>
                {
                    b.HasOne("ParcelPro.Areas.Accounting.Models.Entities.Acc_Document", "Doc")
                        .WithMany("DocArticles")
                        .HasForeignKey("DocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Moein", "Moein")
                        .WithMany("Articles")
                        .HasForeignKey("MoeinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Projects.Models.Entities.Con_Project", "Project")
                        .WithMany("AccArticles")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Doc");

                    b.Navigation("Moein");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Kol", b =>
                {
                    b.HasOne("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Group", "KolGroup")
                        .WithMany("Kols")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KolGroup");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Moein", b =>
                {
                    b.HasOne("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Kol", "MoeinKol")
                        .WithMany("Moeins")
                        .HasForeignKey("KolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MoeinKol");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_TafsilToGroup", b =>
                {
                    b.HasOne("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_TafsilGroup", "Group")
                        .WithMany("TafsilToGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Tafsil", "TafsilAccount")
                        .WithMany("TafsilToGroups")
                        .HasForeignKey("TafsilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("TafsilAccount");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Document", b =>
                {
                    b.HasOne("ParcelPro.Areas.Accounting.Models.Entities.Acc_FinancialPeriod", "DocPeriod")
                        .WithMany("Documents")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocPeriod");
                });

            modelBuilder.Entity("ParcelPro.Areas.AvaRasta.Models.Entities.License", b =>
                {
                    b.HasOne("ParcelPro.Models.Commercial.Customer", "Customer")
                        .WithMany("Licenses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.AvaRasta.Models.Entities.Module", "Module")
                        .WithMany("Licenses")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("ParcelPro.Areas.Commercial.Models.Entities.com_Invoice", b =>
                {
                    b.HasOne("Party", "InvoiceParty")
                        .WithMany("Invoices")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Projects.Models.Entities.Con_Project", "InvoiceProject")
                        .WithMany("ProjectInvoices")
                        .HasForeignKey("projectId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("InvoiceParty");

                    b.Navigation("InvoiceProject");
                });

            modelBuilder.Entity("ParcelPro.Areas.Commercial.Models.Entities.com_InvoiceItem", b =>
                {
                    b.HasOne("ParcelPro.Areas.Commercial.Models.Entities.com_Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Product", "Product")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_BillCost", b =>
                {
                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_BillOfLading", "BillOfLading")
                        .WithMany("BillCosts")
                        .HasForeignKey("BillOfLadingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_Consignment", "Consignment")
                        .WithMany("BillCosts")
                        .HasForeignKey("ConsignmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_BillOfLadingCostItem", "CostType")
                        .WithMany("BillCosts")
                        .HasForeignKey("CostTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BillOfLading");

                    b.Navigation("Consignment");

                    b.Navigation("CostType");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_BillOfLading", b =>
                {
                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_BillOfLadingStatus", "BillOfLadingStatus")
                        .WithMany("BillOfLadings")
                        .HasForeignKey("BillOfLadingStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_Hub", "DestinationHub")
                        .WithMany()
                        .HasForeignKey("DestinationHubId");

                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_Branch", "IssuingBranch")
                        .WithMany("OriginBills")
                        .HasForeignKey("OriginBranchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_Hub", "OriginHub")
                        .WithMany("BillOfLadings")
                        .HasForeignKey("OriginHubId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Party", "Receiver")
                        .WithMany("Recivers")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_Route", "Route")
                        .WithMany("BillOfLadings")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Party", "Sender")
                        .WithMany("Senders")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_Service", "Service")
                        .WithMany("BillOfLadings")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BillOfLadingStatus");

                    b.Navigation("DestinationHub");

                    b.Navigation("IssuingBranch");

                    b.Navigation("OriginHub");

                    b.Navigation("Receiver");

                    b.Navigation("Route");

                    b.Navigation("Sender");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Branch", b =>
                {
                    b.HasOne("ParcelPro.Areas.Geolocation.Models.Entities.Geo_City", "BranchCity")
                        .WithMany("CityBranches")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_Representative", null)
                        .WithMany("RepresentativeBranches")
                        .HasForeignKey("Cu_RepresentativeId");

                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_Hub", "BranchHub")
                        .WithMany("Branches")
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Tafsil", "TafsilAccount")
                        .WithMany("Branches")
                        .HasForeignKey("TafsilId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("BranchCity");

                    b.Navigation("BranchHub");

                    b.Navigation("TafsilAccount");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_BranchUser", b =>
                {
                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_Branch", "Branch")
                        .WithMany("BranchUsers")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Models.Identity.AppIdentityUser", "IdentityUser")
                        .WithOne("BranchUser")
                        .HasForeignKey("ParcelPro.Areas.Courier.Models.Entities.Cu_BranchUser", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Consignment", b =>
                {
                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_BillOfLading", "BillOfLading")
                        .WithMany("Consignments")
                        .HasForeignKey("BillOfLadingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_ConsignmentNature", "NatureType")
                        .WithMany("Consignments")
                        .HasForeignKey("NatureTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BillOfLading");

                    b.Navigation("NatureType");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_ConsignmentNature", b =>
                {
                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_RateImpactType", "RateImpactType")
                        .WithMany("ConsignmentNatures")
                        .HasForeignKey("RateImpactTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RateImpactType");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_FinancialTransaction", b =>
                {
                    b.HasOne("Party", "Party")
                        .WithMany("FinancialTransactions")
                        .HasForeignKey("AccountPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_BillOfLading", "BillOfLading")
                        .WithMany("FinancialTransactions")
                        .HasForeignKey("BillOfLadingId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_Branch", "Branch")
                        .WithMany("FinancialTransactions")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_FinancialTransactionOperation", "TransactionOperation")
                        .WithMany("Transactions")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ParcelPro.Models.Identity.AppIdentityUser", "User")
                        .WithMany("CuTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BillOfLading");

                    b.Navigation("Branch");

                    b.Navigation("Party");

                    b.Navigation("TransactionOperation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Hub", b =>
                {
                    b.HasOne("ParcelPro.Areas.Geolocation.Models.Entities.Geo_City", "HubCity")
                        .WithMany("CityHubs")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("HubCity");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Packaging", b =>
                {
                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_ProductCategory", "ProductCategory")
                        .WithMany("PackageList")
                        .HasForeignKey("WarehouseProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_ParcelTracking", b =>
                {
                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_ParcelStatus", "Status")
                        .WithMany("Parcels")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ParcelPro.Models.Identity.AppIdentityUser", "User")
                        .WithMany("Parcels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Representative", b =>
                {
                    b.HasOne("Party", "Person")
                        .WithOne("Representative")
                        .HasForeignKey("ParcelPro.Areas.Courier.Models.Entities.Cu_Representative", "PartyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Route", b =>
                {
                    b.HasOne("ParcelPro.Areas.Geolocation.Models.Entities.Geo_City", "DestinationCity")
                        .WithMany("DestinationCities")
                        .HasForeignKey("DestinationCityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Geolocation.Models.Entities.Geo_City", "OriginCity")
                        .WithMany("OriginCities")
                        .HasForeignKey("OriginCityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_RateZone", "Zone")
                        .WithMany("Cu_Routes")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("DestinationCity");

                    b.Navigation("OriginCity");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("ParcelPro.Areas.DataTransfer.Models.KPOldSystemSaleReport", b =>
                {
                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_BranchUser", "DistributerBranch")
                        .WithMany("Distributers")
                        .HasForeignKey("DistributerBranchId");

                    b.Navigation("DistributerBranch");
                });

            modelBuilder.Entity("ParcelPro.Areas.Geolocation.Models.Entities.Geo_City", b =>
                {
                    b.HasOne("ParcelPro.Areas.Geolocation.Models.Entities.Geo_Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("ParcelPro.Areas.Geolocation.Models.Entities.Geo_Province", b =>
                {
                    b.HasOne("ParcelPro.Areas.Geolocation.Models.Entities.Geo_Country", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ParcelPro.Areas.Organization.Models.Entities.OrgDepartment", b =>
                {
                    b.HasOne("ParcelPro.Areas.Organization.Models.Entities.OrgDepartment", "ParentDepartment")
                        .WithMany("ChildDepartments")
                        .HasForeignKey("ParentDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentDepartment");
                });

            modelBuilder.Entity("ParcelPro.Areas.Organization.Models.Entities.OrgEmployee", b =>
                {
                    b.HasOne("ParcelPro.Areas.Organization.Models.Entities.OrgPosition", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Organization.Models.Entities.OrgEmployee", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Position");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("ParcelPro.Areas.Organization.Models.Entities.OrgPosition", b =>
                {
                    b.HasOne("ParcelPro.Areas.Organization.Models.Entities.OrgDepartment", "Department")
                        .WithMany("Positions")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ParcelPro.Areas.Projects.Models.Entities.Con_Project", b =>
                {
                    b.HasOne("Party", "Client")
                        .WithMany("ClientProjects")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ParcelPro.Areas.Treasury.Models.Entities.TreTransaction", b =>
                {
                    b.HasOne("Party", "Party")
                        .WithMany("TreTransactions")
                        .HasForeignKey("AccountPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_BillOfLading", "BillOfLading")
                        .WithMany("TreTransactions")
                        .HasForeignKey("BillOfLadingId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ParcelPro.Areas.Treasury.Models.Entities.TreOperation", "Operation")
                        .WithMany("TreTransactions")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ParcelPro.Models.Identity.AppIdentityUser", "User")
                        .WithMany("TreTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BillOfLading");

                    b.Navigation("Operation");

                    b.Navigation("Party");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParcelPro.Areas.Treasury.Models.Entities.kh_BankAccount", b =>
                {
                    b.HasOne("ParcelPro.Areas.Treasury.Models.Entities.kh_Bank", "Bank")
                        .WithMany("BankAccounts")
                        .HasForeignKey("BankId");

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Inventory", b =>
                {
                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_UnitOfMeasure", "BaseUnit")
                        .WithMany("InventoriesBaseUnit")
                        .HasForeignKey("BaseUnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_UnitOfMeasure", "PakageUnit")
                        .WithMany("InventoriesPackageUnit")
                        .HasForeignKey("PackageUnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BaseUnit");

                    b.Navigation("PakageUnit");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_InventoryTransaction", b =>
                {
                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Warehouse", "DestinationWarehouse")
                        .WithMany()
                        .HasForeignKey("DestinationWarehouseId");

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Warehouse", "SourceWarehouse")
                        .WithMany()
                        .HasForeignKey("SourceWarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseDocument", "WarehouseDocument")
                        .WithMany()
                        .HasForeignKey("WarehouseDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationWarehouse");

                    b.Navigation("Product");

                    b.Navigation("SourceWarehouse");

                    b.Navigation("UnitOfMeasure");

                    b.Navigation("WarehouseDocument");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Product", b =>
                {
                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_UnitOfMeasure", "BaseUnit")
                        .WithMany("Products")
                        .HasForeignKey("BaseUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_UnitOfMeasure", "PakageUnit")
                        .WithMany("PakageProducts")
                        .HasForeignKey("PakageCountId");

                    b.Navigation("BaseUnit");

                    b.Navigation("PakageUnit");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_ProductCategory", b =>
                {
                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_ProductCategory", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_ProductUnit", b =>
                {
                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Product", "Product")
                        .WithMany("ProductUnits")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_UnitOfMeasure", "UnitOfMeasure")
                        .WithMany("ProductUnits")
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("UnitOfMeasure");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Warehouse", b =>
                {
                    b.HasOne("ParcelPro.Areas.Courier.Models.Entities.Cu_Branch", "WarehouseBranch")
                        .WithMany("Warehouses")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("WarehouseBranch");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseDocument", b =>
                {
                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Warehouse", "DestinationWarehouse")
                        .WithMany()
                        .HasForeignKey("DestinationWarehouseId");

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Warehouse", "SourceWarehouse")
                        .WithMany("WarehouseDocuments")
                        .HasForeignKey("SourceWarehouseId");

                    b.Navigation("DestinationWarehouse");

                    b.Navigation("SourceWarehouse");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseDocumentItem", b =>
                {
                    b.HasOne("ParcelPro.Areas.Commercial.Models.Entities.com_InvoiceItem", "InvoiceItem")
                        .WithMany()
                        .HasForeignKey("InvoiceItemId");

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Product", "Product")
                        .WithMany("WarehouseDocumentItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseDocument", "WarehouseDocument")
                        .WithMany("DocumentItems")
                        .HasForeignKey("WarehouseDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvoiceItem");

                    b.Navigation("Location");

                    b.Navigation("Product");

                    b.Navigation("WarehouseDocument");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseLocation", b =>
                {
                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseLocation", "ParentLocation")
                        .WithMany("SubLocations")
                        .HasForeignKey("ParentLocationId");

                    b.HasOne("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Warehouse", "Warehouse")
                        .WithMany("WarehouseLocations")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentLocation");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.PartyRepresentative", b =>
                {
                    b.HasOne("Party", "Party")
                        .WithMany("PartyRepresentatives")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Party", "Representative")
                        .WithMany()
                        .HasForeignKey("RepresentativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");

                    b.Navigation("Representative");
                });

            modelBuilder.Entity("ParcelPro.Models.Identity.AppIdentityUser", b =>
                {
                    b.HasOne("ParcelPro.Models.Commercial.Customer", "Customer")
                        .WithMany("CustomerUsers")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Party", "Person")
                        .WithOne("User")
                        .HasForeignKey("ParcelPro.Models.Identity.AppIdentityUser", "PersonId");

                    b.Navigation("Customer");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Party", b =>
                {
                    b.HasOne("ParcelPro.Models.Commercial.Customer", "PartyCustomer")
                        .WithMany("CustomerParties")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelPro.Models.Commercial.TaxPayerType", "PayerType")
                        .WithMany("Parties")
                        .HasForeignKey("TaxPayerType");

                    b.Navigation("PartyCustomer");

                    b.Navigation("PayerType");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Group", b =>
                {
                    b.Navigation("Kols");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Kol", b =>
                {
                    b.Navigation("Moeins");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Moein", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_Tafsil", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("TafsilToGroups");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Coding_TafsilGroup", b =>
                {
                    b.Navigation("TafsilToGroups");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_Document", b =>
                {
                    b.Navigation("DocArticles");
                });

            modelBuilder.Entity("ParcelPro.Areas.Accounting.Models.Entities.Acc_FinancialPeriod", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("ParcelPro.Areas.AvaRasta.Models.Entities.Module", b =>
                {
                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("ParcelPro.Areas.Commercial.Models.Entities.com_Invoice", b =>
                {
                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_BillOfLading", b =>
                {
                    b.Navigation("BillCosts");

                    b.Navigation("Consignments");

                    b.Navigation("FinancialTransactions");

                    b.Navigation("TreTransactions");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_BillOfLadingCostItem", b =>
                {
                    b.Navigation("BillCosts");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_BillOfLadingStatus", b =>
                {
                    b.Navigation("BillOfLadings");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Branch", b =>
                {
                    b.Navigation("BranchUsers");

                    b.Navigation("FinancialTransactions");

                    b.Navigation("OriginBills");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_BranchUser", b =>
                {
                    b.Navigation("Distributers");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Consignment", b =>
                {
                    b.Navigation("BillCosts");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_ConsignmentNature", b =>
                {
                    b.Navigation("Consignments");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_FinancialTransactionOperation", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Hub", b =>
                {
                    b.Navigation("BillOfLadings");

                    b.Navigation("Branches");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_ParcelStatus", b =>
                {
                    b.Navigation("Parcels");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_RateImpactType", b =>
                {
                    b.Navigation("ConsignmentNatures");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_RateZone", b =>
                {
                    b.Navigation("Cu_Routes");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Representative", b =>
                {
                    b.Navigation("RepresentativeBranches");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Route", b =>
                {
                    b.Navigation("BillOfLadings");
                });

            modelBuilder.Entity("ParcelPro.Areas.Courier.Models.Entities.Cu_Service", b =>
                {
                    b.Navigation("BillOfLadings");
                });

            modelBuilder.Entity("ParcelPro.Areas.Geolocation.Models.Entities.Geo_City", b =>
                {
                    b.Navigation("CityBranches");

                    b.Navigation("CityHubs");

                    b.Navigation("DestinationCities");

                    b.Navigation("OriginCities");
                });

            modelBuilder.Entity("ParcelPro.Areas.Geolocation.Models.Entities.Geo_Country", b =>
                {
                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("ParcelPro.Areas.Geolocation.Models.Entities.Geo_Province", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("ParcelPro.Areas.Organization.Models.Entities.OrgDepartment", b =>
                {
                    b.Navigation("ChildDepartments");

                    b.Navigation("Positions");
                });

            modelBuilder.Entity("ParcelPro.Areas.Projects.Models.Entities.Con_Project", b =>
                {
                    b.Navigation("AccArticles");

                    b.Navigation("ProjectInvoices");
                });

            modelBuilder.Entity("ParcelPro.Areas.Treasury.Models.Entities.TreOperation", b =>
                {
                    b.Navigation("TreTransactions");
                });

            modelBuilder.Entity("ParcelPro.Areas.Treasury.Models.Entities.kh_Bank", b =>
                {
                    b.Navigation("BankAccounts");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Product", b =>
                {
                    b.Navigation("InvoiceItems");

                    b.Navigation("ProductUnits");

                    b.Navigation("WarehouseDocumentItems");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_ProductCategory", b =>
                {
                    b.Navigation("PackageList");

                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_UnitOfMeasure", b =>
                {
                    b.Navigation("InventoriesBaseUnit");

                    b.Navigation("InventoriesPackageUnit");

                    b.Navigation("PakageProducts");

                    b.Navigation("ProductUnits");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_Warehouse", b =>
                {
                    b.Navigation("WarehouseDocuments");

                    b.Navigation("WarehouseLocations");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseDocument", b =>
                {
                    b.Navigation("DocumentItems");
                });

            modelBuilder.Entity("ParcelPro.Areas.Warehouse.Models.Entities.Wh_WarehouseLocation", b =>
                {
                    b.Navigation("SubLocations");
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.Customer", b =>
                {
                    b.Navigation("CustomerParties");

                    b.Navigation("CustomerUsers");

                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("ParcelPro.Models.Commercial.TaxPayerType", b =>
                {
                    b.Navigation("Parties");
                });

            modelBuilder.Entity("ParcelPro.Models.Identity.AppIdentityUser", b =>
                {
                    b.Navigation("BranchUser");

                    b.Navigation("CuTransactions");

                    b.Navigation("Parcels");

                    b.Navigation("TreTransactions");
                });

            modelBuilder.Entity("Party", b =>
                {
                    b.Navigation("ClientProjects");

                    b.Navigation("FinancialTransactions");

                    b.Navigation("Invoices");

                    b.Navigation("PartyRepresentatives");

                    b.Navigation("Recivers");

                    b.Navigation("Representative");

                    b.Navigation("Senders");

                    b.Navigation("TreTransactions");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
